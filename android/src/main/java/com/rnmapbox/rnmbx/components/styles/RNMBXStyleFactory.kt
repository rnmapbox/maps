// DO NOT MODIFY
// THIS FILE IS AUTOGENERATED
package com.rnmapbox.rnmbx.components.styles

import com.mapbox.maps.MapboxStyleException
import com.mapbox.maps.extension.style.expressions.generated.Expression
import com.mapbox.maps.extension.style.layers.generated.BackgroundLayer
import com.mapbox.maps.extension.style.layers.generated.CircleLayer
import com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer
import com.mapbox.maps.extension.style.layers.generated.FillLayer
import com.mapbox.maps.extension.style.layers.generated.LineLayer
import com.mapbox.maps.extension.style.layers.generated.SkyLayer
// import com.mapbox.maps.extension.style.layers.generated.PropertyFactory
// import com.mapbox.maps.extension.style.layers.generated.PropertyValue
import com.mapbox.maps.extension.style.layers.generated.RasterLayer
import com.mapbox.maps.extension.style.layers.generated.SymbolLayer
import com.mapbox.maps.extension.style.layers.generated.HeatmapLayer
import com.mapbox.maps.extension.style.layers.generated.HillshadeLayer
import com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere
import com.mapbox.maps.extension.style.terrain.generated.Terrain
import com.mapbox.maps.extension.style.layers.generated.ModelLayer
// import com.mapbox.maps.extension.style.layers.properties.generated.Visibility
import com.mapbox.maps.extension.style.layers.properties.generated.*
import com.mapbox.maps.extension.style.types.StyleTransition

import com.mapbox.maps.extension.style.light.LightPosition
import com.rnmapbox.rnmbx.utils.DownloadMapImageTask.OnAllImagesLoaded
import com.rnmapbox.rnmbx.utils.Logger

import com.rnmapbox.rnmbx.v11compat.light.*;
import com.rnmapbox.rnmbx.v11compat.stylefactory.*;

import java.util.List;

const val LOG_TAG = "RNMBXStyleFactory"

object RNMBXStyleFactory {
    const val VALUE_KEY = "value";
    const val SHOULD_ADD_IMAGE_KEY = "shouldAddImage";

    fun setFillLayerStyle(layer: FillLayer, style: RNMBXStyle ) {
      val styleKeys = style.allStyleKeys

      if (styleKeys.isEmpty()) {
        return
      }

      for (styleKey in styleKeys) {
        try {
          val styleValue = style.getStyleValueForKey(styleKey)

          when (styleKey) {
              "fillSortKey" ->
                setFillSortKey(layer, styleValue)
              "visibility" ->
                setVisibility(layer, styleValue)
              "fillAntialias" ->
                setFillAntialias(layer, styleValue)
              "fillOpacity" ->
                setFillOpacity(layer, styleValue)
                "fillOpacityTransition" ->
                setFillOpacityTransition(layer, styleValue)
              "fillColor" ->
                setFillColor(layer, styleValue)
                "fillColorTransition" ->
                setFillColorTransition(layer, styleValue)
              "fillOutlineColor" ->
                setFillOutlineColor(layer, styleValue)
                "fillOutlineColorTransition" ->
                setFillOutlineColorTransition(layer, styleValue)
              "fillTranslate" ->
                setFillTranslate(layer, styleValue)
                "fillTranslateTransition" ->
                setFillTranslateTransition(layer, styleValue)
              "fillTranslateAnchor" ->
                setFillTranslateAnchor(layer, styleValue)
              "fillPattern" ->
                style.addImage(styleValue!!, styleKey, object : OnAllImagesLoaded {
                    override fun onAllImagesLoaded() {
                        try {
                            setFillPattern(layer, styleValue)
                        } catch (exception: RuntimeException) {
                            Logger.e("RNMBXFill",String.format("Exception failed during setFillPattern: %s", exception.message))
                        }
                    }
                })
              "fillEmissiveStrength" ->
                setFillEmissiveStrength(layer, styleValue)
                "fillEmissiveStrengthTransition" ->
                setFillEmissiveStrengthTransition(layer, styleValue)
          }
        } catch (e: MapboxStyleException) {
          Logger.e(LOG_TAG, "Failed to update: $styleKey ${e.message}")
        }
      }
    }
    fun setLineLayerStyle(layer: LineLayer, style: RNMBXStyle ) {
      val styleKeys = style.allStyleKeys

      if (styleKeys.isEmpty()) {
        return
      }

      for (styleKey in styleKeys) {
        try {
          val styleValue = style.getStyleValueForKey(styleKey)

          when (styleKey) {
              "lineCap" ->
                setLineCap(layer, styleValue)
              "lineJoin" ->
                setLineJoin(layer, styleValue)
              "lineMiterLimit" ->
                setLineMiterLimit(layer, styleValue)
              "lineRoundLimit" ->
                setLineRoundLimit(layer, styleValue)
              "lineSortKey" ->
                setLineSortKey(layer, styleValue)
              "visibility" ->
                setVisibility(layer, styleValue)
              "lineOpacity" ->
                setLineOpacity(layer, styleValue)
                "lineOpacityTransition" ->
                setLineOpacityTransition(layer, styleValue)
              "lineColor" ->
                setLineColor(layer, styleValue)
                "lineColorTransition" ->
                setLineColorTransition(layer, styleValue)
              "lineTranslate" ->
                setLineTranslate(layer, styleValue)
                "lineTranslateTransition" ->
                setLineTranslateTransition(layer, styleValue)
              "lineTranslateAnchor" ->
                setLineTranslateAnchor(layer, styleValue)
              "lineWidth" ->
                setLineWidth(layer, styleValue)
                "lineWidthTransition" ->
                setLineWidthTransition(layer, styleValue)
              "lineGapWidth" ->
                setLineGapWidth(layer, styleValue)
                "lineGapWidthTransition" ->
                setLineGapWidthTransition(layer, styleValue)
              "lineOffset" ->
                setLineOffset(layer, styleValue)
                "lineOffsetTransition" ->
                setLineOffsetTransition(layer, styleValue)
              "lineBlur" ->
                setLineBlur(layer, styleValue)
                "lineBlurTransition" ->
                setLineBlurTransition(layer, styleValue)
              "lineDasharray" ->
                setLineDasharray(layer, styleValue)
              "linePattern" ->
                style.addImage(styleValue!!, styleKey, object : OnAllImagesLoaded {
                    override fun onAllImagesLoaded() {
                        try {
                            setLinePattern(layer, styleValue)
                        } catch (exception: RuntimeException) {
                            Logger.e("RNMBXLine",String.format("Exception failed during setLinePattern: %s", exception.message))
                        }
                    }
                })
              "lineGradient" ->
                setLineGradient(layer, styleValue)
              "lineTrimOffset" ->
                setLineTrimOffset(layer, styleValue)
              "lineEmissiveStrength" ->
                setLineEmissiveStrength(layer, styleValue)
                "lineEmissiveStrengthTransition" ->
                setLineEmissiveStrengthTransition(layer, styleValue)
          }
        } catch (e: MapboxStyleException) {
          Logger.e(LOG_TAG, "Failed to update: $styleKey ${e.message}")
        }
      }
    }
    fun setSymbolLayerStyle(layer: SymbolLayer, style: RNMBXStyle ) {
      val styleKeys = style.allStyleKeys

      if (styleKeys.isEmpty()) {
        return
      }

      for (styleKey in styleKeys) {
        try {
          val styleValue = style.getStyleValueForKey(styleKey)

          when (styleKey) {
              "symbolPlacement" ->
                setSymbolPlacement(layer, styleValue)
              "symbolSpacing" ->
                setSymbolSpacing(layer, styleValue)
              "symbolAvoidEdges" ->
                setSymbolAvoidEdges(layer, styleValue)
              "symbolSortKey" ->
                setSymbolSortKey(layer, styleValue)
              "symbolZOrder" ->
                setSymbolZOrder(layer, styleValue)
              "iconAllowOverlap" ->
                setIconAllowOverlap(layer, styleValue)
              "iconIgnorePlacement" ->
                setIconIgnorePlacement(layer, styleValue)
              "iconOptional" ->
                setIconOptional(layer, styleValue)
              "iconRotationAlignment" ->
                setIconRotationAlignment(layer, styleValue)
              "iconSize" ->
                setIconSize(layer, styleValue)
              "iconTextFit" ->
                setIconTextFit(layer, styleValue)
              "iconTextFitPadding" ->
                setIconTextFitPadding(layer, styleValue)
              "iconImage" ->
                style.addImage(styleValue!!, styleKey, object : OnAllImagesLoaded {
                    override fun onAllImagesLoaded() {
                        try {
                            setIconImage(layer, styleValue)
                        } catch (exception: RuntimeException) {
                            Logger.e("RNMBXSymbol",String.format("Exception failed during setIconImage: %s", exception.message))
                        }
                    }
                })
              "iconRotate" ->
                setIconRotate(layer, styleValue)
              "iconPadding" ->
                setIconPadding(layer, styleValue)
              "iconKeepUpright" ->
                setIconKeepUpright(layer, styleValue)
              "iconOffset" ->
                setIconOffset(layer, styleValue)
              "iconAnchor" ->
                setIconAnchor(layer, styleValue)
              "iconPitchAlignment" ->
                setIconPitchAlignment(layer, styleValue)
              "textPitchAlignment" ->
                setTextPitchAlignment(layer, styleValue)
              "textRotationAlignment" ->
                setTextRotationAlignment(layer, styleValue)
              "textField" ->
                setTextField(layer, styleValue)
              "textFont" ->
                setTextFont(layer, styleValue)
              "textSize" ->
                setTextSize(layer, styleValue)
              "textMaxWidth" ->
                setTextMaxWidth(layer, styleValue)
              "textLineHeight" ->
                setTextLineHeight(layer, styleValue)
              "textLetterSpacing" ->
                setTextLetterSpacing(layer, styleValue)
              "textJustify" ->
                setTextJustify(layer, styleValue)
              "textRadialOffset" ->
                setTextRadialOffset(layer, styleValue)
              "textVariableAnchor" ->
                setTextVariableAnchor(layer, styleValue)
              "textAnchor" ->
                setTextAnchor(layer, styleValue)
              "textMaxAngle" ->
                setTextMaxAngle(layer, styleValue)
              "textWritingMode" ->
                setTextWritingMode(layer, styleValue)
              "textRotate" ->
                setTextRotate(layer, styleValue)
              "textPadding" ->
                setTextPadding(layer, styleValue)
              "textKeepUpright" ->
                setTextKeepUpright(layer, styleValue)
              "textTransform" ->
                setTextTransform(layer, styleValue)
              "textOffset" ->
                setTextOffset(layer, styleValue)
              "textAllowOverlap" ->
                setTextAllowOverlap(layer, styleValue)
              "textIgnorePlacement" ->
                setTextIgnorePlacement(layer, styleValue)
              "textOptional" ->
                setTextOptional(layer, styleValue)
              "visibility" ->
                setVisibility(layer, styleValue)
              "iconOpacity" ->
                setIconOpacity(layer, styleValue)
                "iconOpacityTransition" ->
                setIconOpacityTransition(layer, styleValue)
              "iconColor" ->
                setIconColor(layer, styleValue)
                "iconColorTransition" ->
                setIconColorTransition(layer, styleValue)
              "iconHaloColor" ->
                setIconHaloColor(layer, styleValue)
                "iconHaloColorTransition" ->
                setIconHaloColorTransition(layer, styleValue)
              "iconHaloWidth" ->
                setIconHaloWidth(layer, styleValue)
                "iconHaloWidthTransition" ->
                setIconHaloWidthTransition(layer, styleValue)
              "iconHaloBlur" ->
                setIconHaloBlur(layer, styleValue)
                "iconHaloBlurTransition" ->
                setIconHaloBlurTransition(layer, styleValue)
              "iconTranslate" ->
                setIconTranslate(layer, styleValue)
                "iconTranslateTransition" ->
                setIconTranslateTransition(layer, styleValue)
              "iconTranslateAnchor" ->
                setIconTranslateAnchor(layer, styleValue)
              "textOpacity" ->
                setTextOpacity(layer, styleValue)
                "textOpacityTransition" ->
                setTextOpacityTransition(layer, styleValue)
              "textColor" ->
                setTextColor(layer, styleValue)
                "textColorTransition" ->
                setTextColorTransition(layer, styleValue)
              "textHaloColor" ->
                setTextHaloColor(layer, styleValue)
                "textHaloColorTransition" ->
                setTextHaloColorTransition(layer, styleValue)
              "textHaloWidth" ->
                setTextHaloWidth(layer, styleValue)
                "textHaloWidthTransition" ->
                setTextHaloWidthTransition(layer, styleValue)
              "textHaloBlur" ->
                setTextHaloBlur(layer, styleValue)
                "textHaloBlurTransition" ->
                setTextHaloBlurTransition(layer, styleValue)
              "textTranslate" ->
                setTextTranslate(layer, styleValue)
                "textTranslateTransition" ->
                setTextTranslateTransition(layer, styleValue)
              "textTranslateAnchor" ->
                setTextTranslateAnchor(layer, styleValue)
              "symbolZElevate" ->
                setSymbolZElevate(layer, styleValue)
              "iconEmissiveStrength" ->
                setIconEmissiveStrength(layer, styleValue)
                "iconEmissiveStrengthTransition" ->
                setIconEmissiveStrengthTransition(layer, styleValue)
              "textEmissiveStrength" ->
                setTextEmissiveStrength(layer, styleValue)
                "textEmissiveStrengthTransition" ->
                setTextEmissiveStrengthTransition(layer, styleValue)
              "iconImageCrossFade" ->
                style.addImage(styleValue!!, styleKey, object : OnAllImagesLoaded {
                    override fun onAllImagesLoaded() {
                        try {
                            setIconImageCrossFade(layer, styleValue)
                        } catch (exception: RuntimeException) {
                            Logger.e("RNMBXSymbol",String.format("Exception failed during setIconImageCrossFade: %s", exception.message))
                        }
                    }
                })
                "iconImageCrossFadeTransition" ->
                setIconImageCrossFadeTransition(layer, styleValue)
          }
        } catch (e: MapboxStyleException) {
          Logger.e(LOG_TAG, "Failed to update: $styleKey ${e.message}")
        }
      }
    }
    fun setCircleLayerStyle(layer: CircleLayer, style: RNMBXStyle ) {
      val styleKeys = style.allStyleKeys

      if (styleKeys.isEmpty()) {
        return
      }

      for (styleKey in styleKeys) {
        try {
          val styleValue = style.getStyleValueForKey(styleKey)

          when (styleKey) {
              "circleSortKey" ->
                setCircleSortKey(layer, styleValue)
              "visibility" ->
                setVisibility(layer, styleValue)
              "circleRadius" ->
                setCircleRadius(layer, styleValue)
                "circleRadiusTransition" ->
                setCircleRadiusTransition(layer, styleValue)
              "circleColor" ->
                setCircleColor(layer, styleValue)
                "circleColorTransition" ->
                setCircleColorTransition(layer, styleValue)
              "circleBlur" ->
                setCircleBlur(layer, styleValue)
                "circleBlurTransition" ->
                setCircleBlurTransition(layer, styleValue)
              "circleOpacity" ->
                setCircleOpacity(layer, styleValue)
                "circleOpacityTransition" ->
                setCircleOpacityTransition(layer, styleValue)
              "circleTranslate" ->
                setCircleTranslate(layer, styleValue)
                "circleTranslateTransition" ->
                setCircleTranslateTransition(layer, styleValue)
              "circleTranslateAnchor" ->
                setCircleTranslateAnchor(layer, styleValue)
              "circlePitchScale" ->
                setCirclePitchScale(layer, styleValue)
              "circlePitchAlignment" ->
                setCirclePitchAlignment(layer, styleValue)
              "circleStrokeWidth" ->
                setCircleStrokeWidth(layer, styleValue)
                "circleStrokeWidthTransition" ->
                setCircleStrokeWidthTransition(layer, styleValue)
              "circleStrokeColor" ->
                setCircleStrokeColor(layer, styleValue)
                "circleStrokeColorTransition" ->
                setCircleStrokeColorTransition(layer, styleValue)
              "circleStrokeOpacity" ->
                setCircleStrokeOpacity(layer, styleValue)
                "circleStrokeOpacityTransition" ->
                setCircleStrokeOpacityTransition(layer, styleValue)
              "circleEmissiveStrength" ->
                setCircleEmissiveStrength(layer, styleValue)
                "circleEmissiveStrengthTransition" ->
                setCircleEmissiveStrengthTransition(layer, styleValue)
          }
        } catch (e: MapboxStyleException) {
          Logger.e(LOG_TAG, "Failed to update: $styleKey ${e.message}")
        }
      }
    }
    fun setHeatmapLayerStyle(layer: HeatmapLayer, style: RNMBXStyle ) {
      val styleKeys = style.allStyleKeys

      if (styleKeys.isEmpty()) {
        return
      }

      for (styleKey in styleKeys) {
        try {
          val styleValue = style.getStyleValueForKey(styleKey)

          when (styleKey) {
              "visibility" ->
                setVisibility(layer, styleValue)
              "heatmapRadius" ->
                setHeatmapRadius(layer, styleValue)
                "heatmapRadiusTransition" ->
                setHeatmapRadiusTransition(layer, styleValue)
              "heatmapWeight" ->
                setHeatmapWeight(layer, styleValue)
              "heatmapIntensity" ->
                setHeatmapIntensity(layer, styleValue)
                "heatmapIntensityTransition" ->
                setHeatmapIntensityTransition(layer, styleValue)
              "heatmapColor" ->
                setHeatmapColor(layer, styleValue)
              "heatmapOpacity" ->
                setHeatmapOpacity(layer, styleValue)
                "heatmapOpacityTransition" ->
                setHeatmapOpacityTransition(layer, styleValue)
          }
        } catch (e: MapboxStyleException) {
          Logger.e(LOG_TAG, "Failed to update: $styleKey ${e.message}")
        }
      }
    }
    fun setFillExtrusionLayerStyle(layer: FillExtrusionLayer, style: RNMBXStyle ) {
      val styleKeys = style.allStyleKeys

      if (styleKeys.isEmpty()) {
        return
      }

      for (styleKey in styleKeys) {
        try {
          val styleValue = style.getStyleValueForKey(styleKey)

          when (styleKey) {
              "visibility" ->
                setVisibility(layer, styleValue)
              "fillExtrusionOpacity" ->
                setFillExtrusionOpacity(layer, styleValue)
                "fillExtrusionOpacityTransition" ->
                setFillExtrusionOpacityTransition(layer, styleValue)
              "fillExtrusionColor" ->
                setFillExtrusionColor(layer, styleValue)
                "fillExtrusionColorTransition" ->
                setFillExtrusionColorTransition(layer, styleValue)
              "fillExtrusionTranslate" ->
                setFillExtrusionTranslate(layer, styleValue)
                "fillExtrusionTranslateTransition" ->
                setFillExtrusionTranslateTransition(layer, styleValue)
              "fillExtrusionTranslateAnchor" ->
                setFillExtrusionTranslateAnchor(layer, styleValue)
              "fillExtrusionPattern" ->
                style.addImage(styleValue!!, styleKey, object : OnAllImagesLoaded {
                    override fun onAllImagesLoaded() {
                        try {
                            setFillExtrusionPattern(layer, styleValue)
                        } catch (exception: RuntimeException) {
                            Logger.e("RNMBXFillExtrusion",String.format("Exception failed during setFillExtrusionPattern: %s", exception.message))
                        }
                    }
                })
              "fillExtrusionHeight" ->
                setFillExtrusionHeight(layer, styleValue)
                "fillExtrusionHeightTransition" ->
                setFillExtrusionHeightTransition(layer, styleValue)
              "fillExtrusionBase" ->
                setFillExtrusionBase(layer, styleValue)
                "fillExtrusionBaseTransition" ->
                setFillExtrusionBaseTransition(layer, styleValue)
              "fillExtrusionVerticalGradient" ->
                setFillExtrusionVerticalGradient(layer, styleValue)
              "fillExtrusionRoundedRoof" ->
                setFillExtrusionRoundedRoof(layer, styleValue)
              "fillExtrusionAmbientOcclusionWallRadius" ->
                setFillExtrusionAmbientOcclusionWallRadius(layer, styleValue)
                "fillExtrusionAmbientOcclusionWallRadiusTransition" ->
                setFillExtrusionAmbientOcclusionWallRadiusTransition(layer, styleValue)
              "fillExtrusionAmbientOcclusionGroundRadius" ->
                setFillExtrusionAmbientOcclusionGroundRadius(layer, styleValue)
                "fillExtrusionAmbientOcclusionGroundRadiusTransition" ->
                setFillExtrusionAmbientOcclusionGroundRadiusTransition(layer, styleValue)
              "fillExtrusionAmbientOcclusionGroundAttenuation" ->
                setFillExtrusionAmbientOcclusionGroundAttenuation(layer, styleValue)
                "fillExtrusionAmbientOcclusionGroundAttenuationTransition" ->
                setFillExtrusionAmbientOcclusionGroundAttenuationTransition(layer, styleValue)
              "fillExtrusionFloodLightColor" ->
                setFillExtrusionFloodLightColor(layer, styleValue)
                "fillExtrusionFloodLightColorTransition" ->
                setFillExtrusionFloodLightColorTransition(layer, styleValue)
              "fillExtrusionFloodLightIntensity" ->
                setFillExtrusionFloodLightIntensity(layer, styleValue)
                "fillExtrusionFloodLightIntensityTransition" ->
                setFillExtrusionFloodLightIntensityTransition(layer, styleValue)
              "fillExtrusionFloodLightWallRadius" ->
                setFillExtrusionFloodLightWallRadius(layer, styleValue)
                "fillExtrusionFloodLightWallRadiusTransition" ->
                setFillExtrusionFloodLightWallRadiusTransition(layer, styleValue)
              "fillExtrusionFloodLightGroundRadius" ->
                setFillExtrusionFloodLightGroundRadius(layer, styleValue)
                "fillExtrusionFloodLightGroundRadiusTransition" ->
                setFillExtrusionFloodLightGroundRadiusTransition(layer, styleValue)
              "fillExtrusionFloodLightGroundAttenuation" ->
                setFillExtrusionFloodLightGroundAttenuation(layer, styleValue)
                "fillExtrusionFloodLightGroundAttenuationTransition" ->
                setFillExtrusionFloodLightGroundAttenuationTransition(layer, styleValue)
              "fillExtrusionVerticalScale" ->
                setFillExtrusionVerticalScale(layer, styleValue)
                "fillExtrusionVerticalScaleTransition" ->
                setFillExtrusionVerticalScaleTransition(layer, styleValue)
              "fillExtrusionCutoffFadeRange" ->
                setFillExtrusionCutoffFadeRange(layer, styleValue)
          }
        } catch (e: MapboxStyleException) {
          Logger.e(LOG_TAG, "Failed to update: $styleKey ${e.message}")
        }
      }
    }
    fun setRasterLayerStyle(layer: RasterLayer, style: RNMBXStyle ) {
      val styleKeys = style.allStyleKeys

      if (styleKeys.isEmpty()) {
        return
      }

      for (styleKey in styleKeys) {
        try {
          val styleValue = style.getStyleValueForKey(styleKey)

          when (styleKey) {
              "visibility" ->
                setVisibility(layer, styleValue)
              "rasterOpacity" ->
                setRasterOpacity(layer, styleValue)
                "rasterOpacityTransition" ->
                setRasterOpacityTransition(layer, styleValue)
              "rasterHueRotate" ->
                setRasterHueRotate(layer, styleValue)
                "rasterHueRotateTransition" ->
                setRasterHueRotateTransition(layer, styleValue)
              "rasterBrightnessMin" ->
                setRasterBrightnessMin(layer, styleValue)
                "rasterBrightnessMinTransition" ->
                setRasterBrightnessMinTransition(layer, styleValue)
              "rasterBrightnessMax" ->
                setRasterBrightnessMax(layer, styleValue)
                "rasterBrightnessMaxTransition" ->
                setRasterBrightnessMaxTransition(layer, styleValue)
              "rasterSaturation" ->
                setRasterSaturation(layer, styleValue)
                "rasterSaturationTransition" ->
                setRasterSaturationTransition(layer, styleValue)
              "rasterContrast" ->
                setRasterContrast(layer, styleValue)
                "rasterContrastTransition" ->
                setRasterContrastTransition(layer, styleValue)
              "rasterResampling" ->
                setRasterResampling(layer, styleValue)
              "rasterFadeDuration" ->
                setRasterFadeDuration(layer, styleValue)
              "rasterColor" ->
                setRasterColor(layer, styleValue)
              "rasterColorMix" ->
                setRasterColorMix(layer, styleValue)
                "rasterColorMixTransition" ->
                setRasterColorMixTransition(layer, styleValue)
              "rasterColorRange" ->
                setRasterColorRange(layer, styleValue)
                "rasterColorRangeTransition" ->
                setRasterColorRangeTransition(layer, styleValue)
          }
        } catch (e: MapboxStyleException) {
          Logger.e(LOG_TAG, "Failed to update: $styleKey ${e.message}")
        }
      }
    }
    fun setHillshadeLayerStyle(layer: HillshadeLayer, style: RNMBXStyle ) {
      val styleKeys = style.allStyleKeys

      if (styleKeys.isEmpty()) {
        return
      }

      for (styleKey in styleKeys) {
        try {
          val styleValue = style.getStyleValueForKey(styleKey)

          when (styleKey) {
              "visibility" ->
                setVisibility(layer, styleValue)
              "hillshadeIlluminationDirection" ->
                setHillshadeIlluminationDirection(layer, styleValue)
              "hillshadeIlluminationAnchor" ->
                setHillshadeIlluminationAnchor(layer, styleValue)
              "hillshadeExaggeration" ->
                setHillshadeExaggeration(layer, styleValue)
                "hillshadeExaggerationTransition" ->
                setHillshadeExaggerationTransition(layer, styleValue)
              "hillshadeShadowColor" ->
                setHillshadeShadowColor(layer, styleValue)
                "hillshadeShadowColorTransition" ->
                setHillshadeShadowColorTransition(layer, styleValue)
              "hillshadeHighlightColor" ->
                setHillshadeHighlightColor(layer, styleValue)
                "hillshadeHighlightColorTransition" ->
                setHillshadeHighlightColorTransition(layer, styleValue)
              "hillshadeAccentColor" ->
                setHillshadeAccentColor(layer, styleValue)
                "hillshadeAccentColorTransition" ->
                setHillshadeAccentColorTransition(layer, styleValue)
          }
        } catch (e: MapboxStyleException) {
          Logger.e(LOG_TAG, "Failed to update: $styleKey ${e.message}")
        }
      }
    }
    fun setModelLayerStyle(layer: ModelLayer, style: RNMBXStyle ) {
      val styleKeys = style.allStyleKeys

      if (styleKeys.isEmpty()) {
        return
      }

      for (styleKey in styleKeys) {
        try {
          val styleValue = style.getStyleValueForKey(styleKey)

          when (styleKey) {
              "visibility" ->
                setVisibility(layer, styleValue)
              "modelId" ->
                setModelId(layer, styleValue)
              "modelOpacity" ->
                setModelOpacity(layer, styleValue)
                "modelOpacityTransition" ->
                setModelOpacityTransition(layer, styleValue)
              "modelRotation" ->
                setModelRotation(layer, styleValue)
                "modelRotationTransition" ->
                setModelRotationTransition(layer, styleValue)
              "modelScale" ->
                setModelScale(layer, styleValue)
                "modelScaleTransition" ->
                setModelScaleTransition(layer, styleValue)
              "modelTranslation" ->
                setModelTranslation(layer, styleValue)
                "modelTranslationTransition" ->
                setModelTranslationTransition(layer, styleValue)
              "modelColor" ->
                setModelColor(layer, styleValue)
                "modelColorTransition" ->
                setModelColorTransition(layer, styleValue)
              "modelColorMixIntensity" ->
                setModelColorMixIntensity(layer, styleValue)
                "modelColorMixIntensityTransition" ->
                setModelColorMixIntensityTransition(layer, styleValue)
              "modelType" ->
                setModelType(layer, styleValue)
              "modelCastShadows" ->
                setModelCastShadows(layer, styleValue)
              "modelReceiveShadows" ->
                setModelReceiveShadows(layer, styleValue)
              "modelAmbientOcclusionIntensity" ->
                setModelAmbientOcclusionIntensity(layer, styleValue)
                "modelAmbientOcclusionIntensityTransition" ->
                setModelAmbientOcclusionIntensityTransition(layer, styleValue)
              "modelEmissiveStrength" ->
                setModelEmissiveStrength(layer, styleValue)
                "modelEmissiveStrengthTransition" ->
                setModelEmissiveStrengthTransition(layer, styleValue)
              "modelRoughness" ->
                setModelRoughness(layer, styleValue)
                "modelRoughnessTransition" ->
                setModelRoughnessTransition(layer, styleValue)
              "modelHeightBasedEmissiveStrengthMultiplier" ->
                setModelHeightBasedEmissiveStrengthMultiplier(layer, styleValue)
                "modelHeightBasedEmissiveStrengthMultiplierTransition" ->
                setModelHeightBasedEmissiveStrengthMultiplierTransition(layer, styleValue)
              "modelCutoffFadeRange" ->
                setModelCutoffFadeRange(layer, styleValue)
          }
        } catch (e: MapboxStyleException) {
          Logger.e(LOG_TAG, "Failed to update: $styleKey ${e.message}")
        }
      }
    }
    fun setBackgroundLayerStyle(layer: BackgroundLayer, style: RNMBXStyle ) {
      val styleKeys = style.allStyleKeys

      if (styleKeys.isEmpty()) {
        return
      }

      for (styleKey in styleKeys) {
        try {
          val styleValue = style.getStyleValueForKey(styleKey)

          when (styleKey) {
              "visibility" ->
                setVisibility(layer, styleValue)
              "backgroundColor" ->
                setBackgroundColor(layer, styleValue)
                "backgroundColorTransition" ->
                setBackgroundColorTransition(layer, styleValue)
              "backgroundPattern" ->
                style.addImage(styleValue!!, styleKey, object : OnAllImagesLoaded {
                    override fun onAllImagesLoaded() {
                        try {
                            setBackgroundPattern(layer, styleValue)
                        } catch (exception: RuntimeException) {
                            Logger.e("RNMBXBackground",String.format("Exception failed during setBackgroundPattern: %s", exception.message))
                        }
                    }
                })
              "backgroundOpacity" ->
                setBackgroundOpacity(layer, styleValue)
                "backgroundOpacityTransition" ->
                setBackgroundOpacityTransition(layer, styleValue)
              "backgroundEmissiveStrength" ->
                setBackgroundEmissiveStrength(layer, styleValue)
                "backgroundEmissiveStrengthTransition" ->
                setBackgroundEmissiveStrengthTransition(layer, styleValue)
          }
        } catch (e: MapboxStyleException) {
          Logger.e(LOG_TAG, "Failed to update: $styleKey ${e.message}")
        }
      }
    }
    fun setSkyLayerStyle(layer: SkyLayer, style: RNMBXStyle ) {
      val styleKeys = style.allStyleKeys

      if (styleKeys.isEmpty()) {
        return
      }

      for (styleKey in styleKeys) {
        try {
          val styleValue = style.getStyleValueForKey(styleKey)

          when (styleKey) {
              "visibility" ->
                setVisibility(layer, styleValue)
              "skyType" ->
                setSkyType(layer, styleValue)
              "skyAtmosphereSun" ->
                setSkyAtmosphereSun(layer, styleValue)
              "skyAtmosphereSunIntensity" ->
                setSkyAtmosphereSunIntensity(layer, styleValue)
              "skyGradientCenter" ->
                setSkyGradientCenter(layer, styleValue)
              "skyGradientRadius" ->
                setSkyGradientRadius(layer, styleValue)
              "skyGradient" ->
                setSkyGradient(layer, styleValue)
              "skyAtmosphereHaloColor" ->
                setSkyAtmosphereHaloColor(layer, styleValue)
              "skyAtmosphereColor" ->
                setSkyAtmosphereColor(layer, styleValue)
              "skyOpacity" ->
                setSkyOpacity(layer, styleValue)
                "skyOpacityTransition" ->
                setSkyOpacityTransition(layer, styleValue)
          }
        } catch (e: MapboxStyleException) {
          Logger.e(LOG_TAG, "Failed to update: $styleKey ${e.message}")
        }
      }
    }
    fun setLightLayerStyle(layer: Light, style: RNMBXStyle ) {
      val styleKeys = style.allStyleKeys

      if (styleKeys.isEmpty()) {
        return
      }

      for (styleKey in styleKeys) {
        try {
          val styleValue = style.getStyleValueForKey(styleKey)

          when (styleKey) {
              "anchor" ->
                setAnchor(layer, styleValue)
              "position" ->
                setPosition(layer, styleValue)
                "positionTransition" ->
                setPositionTransition(layer, styleValue)
              "color" ->
                setColor(layer, styleValue)
                "colorTransition" ->
                setColorTransition(layer, styleValue)
              "intensity" ->
                setIntensity(layer, styleValue)
                "intensityTransition" ->
                setIntensityTransition(layer, styleValue)
          }
        } catch (e: MapboxStyleException) {
          Logger.e(LOG_TAG, "Failed to update: $styleKey ${e.message}")
        }
      }
    }
    fun setAtmosphereLayerStyle(layer: Atmosphere, style: RNMBXStyle ) {
      val styleKeys = style.allStyleKeys

      if (styleKeys.isEmpty()) {
        return
      }

      for (styleKey in styleKeys) {
        try {
          val styleValue = style.getStyleValueForKey(styleKey)

          when (styleKey) {
              "range" ->
                setRange(layer, styleValue)
                "rangeTransition" ->
                setRangeTransition(layer, styleValue)
              "color" ->
                setColor(layer, styleValue)
                "colorTransition" ->
                setColorTransition(layer, styleValue)
              "highColor" ->
                setHighColor(layer, styleValue)
                "highColorTransition" ->
                setHighColorTransition(layer, styleValue)
              "spaceColor" ->
                setSpaceColor(layer, styleValue)
                "spaceColorTransition" ->
                setSpaceColorTransition(layer, styleValue)
              "horizonBlend" ->
                setHorizonBlend(layer, styleValue)
                "horizonBlendTransition" ->
                setHorizonBlendTransition(layer, styleValue)
              "starIntensity" ->
                setStarIntensity(layer, styleValue)
                "starIntensityTransition" ->
                setStarIntensityTransition(layer, styleValue)
              "verticalRange" ->
                setVerticalRange(layer, styleValue)
                "verticalRangeTransition" ->
                setVerticalRangeTransition(layer, styleValue)
          }
        } catch (e: MapboxStyleException) {
          Logger.e(LOG_TAG, "Failed to update: $styleKey ${e.message}")
        }
      }
    }
    fun setTerrainLayerStyle(layer: Terrain, style: RNMBXStyle ) {
      val styleKeys = style.allStyleKeys

      if (styleKeys.isEmpty()) {
        return
      }

      for (styleKey in styleKeys) {
        try {
          val styleValue = style.getStyleValueForKey(styleKey)

          when (styleKey) {
              "exaggeration" ->
                setExaggeration(layer, styleValue)
          }
        } catch (e: MapboxStyleException) {
          Logger.e(LOG_TAG, "Failed to update: $styleKey ${e.message}")
        }
      }
    }

    fun setFillSortKey(layer: FillLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.fillSortKey(expression)
        } else {
          Logger.e("RNMBXFill", "Expression for fillSortKey is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.fillSortKey(value)
          } else {
            Logger.e("RNMBXFill", "value for fillSortKey is null")
          }
      }
    }

    fun setVisibility(layer: FillLayer, styleValue: RNMBXStyleValue ) {
        layer.visibility(Visibility.valueOf(styleValue.getEnumName()));
    }

    fun setFillAntialias(layer: FillLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.fillAntialias(expression)
        } else {
          Logger.e("RNMBXFill", "Expression for fillAntialias is null")
        }
      } else {
          val value = styleValue.getBoolean(VALUE_KEY)
          if (value != null) {
            layer.fillAntialias(value)
          } else {
            Logger.e("RNMBXFill", "value for fillAntialias is null")
          }
      }
    }

    fun setFillOpacity(layer: FillLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.fillOpacity(expression)
        } else {
          Logger.e("RNMBXFill", "Expression for fillOpacity is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.fillOpacity(value)
          } else {
            Logger.e("RNMBXFill", "value for fillOpacity is null")
          }
      }
    }


    fun setFillOpacityTransition(layer: FillLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.fillOpacityTransition(transition);
      }
    }

    fun setFillColor(layer: FillLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.fillColor(expression)
        } else {
          Logger.e("RNMBXFill", "Expression for fillColor is null")
        }
      } else {
          val value = styleValue.getInt(VALUE_KEY)
          if (value != null) {
            layer.fillColor(value)
          } else {
            Logger.e("RNMBXFill", "value for fillColor is null")
          }
      }
    }


    fun setFillColorTransition(layer: FillLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.fillColorTransition(transition);
      }
    }

    fun setFillOutlineColor(layer: FillLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.fillOutlineColor(expression)
        } else {
          Logger.e("RNMBXFill", "Expression for fillOutlineColor is null")
        }
      } else {
          val value = styleValue.getInt(VALUE_KEY)
          if (value != null) {
            layer.fillOutlineColor(value)
          } else {
            Logger.e("RNMBXFill", "value for fillOutlineColor is null")
          }
      }
    }


    fun setFillOutlineColorTransition(layer: FillLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.fillOutlineColorTransition(transition);
      }
    }

    fun setFillTranslate(layer: FillLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.fillTranslate(expression)
        } else {
          Logger.e("RNMBXFill", "Expression for fillTranslate is null")
        }
      } else {
          val value = styleValue.getFloatArray(VALUE_KEY)
          if (value != null) {
            layer.fillTranslate(value)
          } else {
            Logger.e("RNMBXFill", "value for fillTranslate is null")
          }
      }
    }


    fun setFillTranslateTransition(layer: FillLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.fillTranslateTransition(transition);
      }
    }

    fun setFillTranslateAnchor(layer: FillLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.fillTranslateAnchor(expression)
        } else {
          Logger.e("RNMBXFill", "Expression for fillTranslateAnchor is null")
        }
      } else {
          layer.fillTranslateAnchor(FillTranslateAnchor.valueOf(styleValue.getEnumName()))
      }
    }

    fun setFillPattern(layer: FillLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        if (styleValue.isImageStringValue) {
          val value = styleValue.getImageStringValue()
          if (value != null) {
            layer.fillPattern(value)
          } else {
            Logger.e("RNMBXFill", "Image for fillPattern is null")
          }
        } else {
          val expression = styleValue.getExpression()
          if (expression != null) {
            layer.fillPattern(expression)
          } else {
            Logger.e("RNMBXFill", "Expression for fillPattern is null")
          }
        }
      } else {
        val value = styleValue.imageURI
        if (value != null) {
          layer.fillPattern(value);
        } else {
          Logger.e("RNMBXFill", "value for fillPattern is null")
        }
      }
    }

    fun setFillEmissiveStrength(layer: FillLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.fillEmissiveStrength(expression)
        } else {
          Logger.e("RNMBXFill", "Expression for fillEmissiveStrength is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.fillEmissiveStrength(value)
          } else {
            Logger.e("RNMBXFill", "value for fillEmissiveStrength is null")
          }
      }
    }


    fun setFillEmissiveStrengthTransition(layer: FillLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.fillEmissiveStrengthTransition(transition);
      }
    }

    fun setLineCap(layer: LineLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.lineCap(expression)
        } else {
          Logger.e("RNMBXLine", "Expression for lineCap is null")
        }
      } else {
          layer.lineCap(LineCap.valueOf(styleValue.getEnumName()))
      }
    }

    fun setLineJoin(layer: LineLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.lineJoin(expression)
        } else {
          Logger.e("RNMBXLine", "Expression for lineJoin is null")
        }
      } else {
          layer.lineJoin(LineJoin.valueOf(styleValue.getEnumName()))
      }
    }

    fun setLineMiterLimit(layer: LineLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.lineMiterLimit(expression)
        } else {
          Logger.e("RNMBXLine", "Expression for lineMiterLimit is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.lineMiterLimit(value)
          } else {
            Logger.e("RNMBXLine", "value for lineMiterLimit is null")
          }
      }
    }

    fun setLineRoundLimit(layer: LineLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.lineRoundLimit(expression)
        } else {
          Logger.e("RNMBXLine", "Expression for lineRoundLimit is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.lineRoundLimit(value)
          } else {
            Logger.e("RNMBXLine", "value for lineRoundLimit is null")
          }
      }
    }

    fun setLineSortKey(layer: LineLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.lineSortKey(expression)
        } else {
          Logger.e("RNMBXLine", "Expression for lineSortKey is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.lineSortKey(value)
          } else {
            Logger.e("RNMBXLine", "value for lineSortKey is null")
          }
      }
    }

    fun setVisibility(layer: LineLayer, styleValue: RNMBXStyleValue ) {
        layer.visibility(Visibility.valueOf(styleValue.getEnumName()));
    }

    fun setLineOpacity(layer: LineLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.lineOpacity(expression)
        } else {
          Logger.e("RNMBXLine", "Expression for lineOpacity is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.lineOpacity(value)
          } else {
            Logger.e("RNMBXLine", "value for lineOpacity is null")
          }
      }
    }


    fun setLineOpacityTransition(layer: LineLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.lineOpacityTransition(transition);
      }
    }

    fun setLineColor(layer: LineLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.lineColor(expression)
        } else {
          Logger.e("RNMBXLine", "Expression for lineColor is null")
        }
      } else {
          val value = styleValue.getInt(VALUE_KEY)
          if (value != null) {
            layer.lineColor(value)
          } else {
            Logger.e("RNMBXLine", "value for lineColor is null")
          }
      }
    }


    fun setLineColorTransition(layer: LineLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.lineColorTransition(transition);
      }
    }

    fun setLineTranslate(layer: LineLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.lineTranslate(expression)
        } else {
          Logger.e("RNMBXLine", "Expression for lineTranslate is null")
        }
      } else {
          val value = styleValue.getFloatArray(VALUE_KEY)
          if (value != null) {
            layer.lineTranslate(value)
          } else {
            Logger.e("RNMBXLine", "value for lineTranslate is null")
          }
      }
    }


    fun setLineTranslateTransition(layer: LineLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.lineTranslateTransition(transition);
      }
    }

    fun setLineTranslateAnchor(layer: LineLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.lineTranslateAnchor(expression)
        } else {
          Logger.e("RNMBXLine", "Expression for lineTranslateAnchor is null")
        }
      } else {
          layer.lineTranslateAnchor(LineTranslateAnchor.valueOf(styleValue.getEnumName()))
      }
    }

    fun setLineWidth(layer: LineLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.lineWidth(expression)
        } else {
          Logger.e("RNMBXLine", "Expression for lineWidth is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.lineWidth(value)
          } else {
            Logger.e("RNMBXLine", "value for lineWidth is null")
          }
      }
    }


    fun setLineWidthTransition(layer: LineLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.lineWidthTransition(transition);
      }
    }

    fun setLineGapWidth(layer: LineLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.lineGapWidth(expression)
        } else {
          Logger.e("RNMBXLine", "Expression for lineGapWidth is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.lineGapWidth(value)
          } else {
            Logger.e("RNMBXLine", "value for lineGapWidth is null")
          }
      }
    }


    fun setLineGapWidthTransition(layer: LineLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.lineGapWidthTransition(transition);
      }
    }

    fun setLineOffset(layer: LineLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.lineOffset(expression)
        } else {
          Logger.e("RNMBXLine", "Expression for lineOffset is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.lineOffset(value)
          } else {
            Logger.e("RNMBXLine", "value for lineOffset is null")
          }
      }
    }


    fun setLineOffsetTransition(layer: LineLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.lineOffsetTransition(transition);
      }
    }

    fun setLineBlur(layer: LineLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.lineBlur(expression)
        } else {
          Logger.e("RNMBXLine", "Expression for lineBlur is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.lineBlur(value)
          } else {
            Logger.e("RNMBXLine", "value for lineBlur is null")
          }
      }
    }


    fun setLineBlurTransition(layer: LineLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.lineBlurTransition(transition);
      }
    }

    fun setLineDasharray(layer: LineLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.lineDasharray(expression)
        } else {
          Logger.e("RNMBXLine", "Expression for lineDasharray is null")
        }
      } else {
          val value = styleValue.getFloatArray(VALUE_KEY)
          if (value != null) {
            layer.lineDasharray(value)
          } else {
            Logger.e("RNMBXLine", "value for lineDasharray is null")
          }
      }
    }

    fun setLinePattern(layer: LineLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        if (styleValue.isImageStringValue) {
          val value = styleValue.getImageStringValue()
          if (value != null) {
            layer.linePattern(value)
          } else {
            Logger.e("RNMBXLine", "Image for linePattern is null")
          }
        } else {
          val expression = styleValue.getExpression()
          if (expression != null) {
            layer.linePattern(expression)
          } else {
            Logger.e("RNMBXLine", "Expression for linePattern is null")
          }
        }
      } else {
        val value = styleValue.imageURI
        if (value != null) {
          layer.linePattern(value);
        } else {
          Logger.e("RNMBXLine", "value for linePattern is null")
        }
      }
    }

    fun setLineGradient(layer: LineLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.lineGradient(expression)
        } else {
          Logger.e("RNMBXLine", "Expression for lineGradient is null")
        }
      } else {
          layer.lineGradient(styleValue.getIntExpression(VALUE_KEY))
      }
    }

    fun setLineTrimOffset(layer: LineLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.lineTrimOffset(expression)
        } else {
          Logger.e("RNMBXLine", "Expression for lineTrimOffset is null")
        }
      } else {
          val value = styleValue.getFloatArray(VALUE_KEY)
          if (value != null) {
            layer.lineTrimOffset(value)
          } else {
            Logger.e("RNMBXLine", "value for lineTrimOffset is null")
          }
      }
    }

    fun setLineEmissiveStrength(layer: LineLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.lineEmissiveStrength(expression)
        } else {
          Logger.e("RNMBXLine", "Expression for lineEmissiveStrength is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.lineEmissiveStrength(value)
          } else {
            Logger.e("RNMBXLine", "value for lineEmissiveStrength is null")
          }
      }
    }


    fun setLineEmissiveStrengthTransition(layer: LineLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.lineEmissiveStrengthTransition(transition);
      }
    }

    fun setSymbolPlacement(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.symbolPlacement(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for symbolPlacement is null")
        }
      } else {
          layer.symbolPlacement(SymbolPlacement.valueOf(styleValue.getEnumName()))
      }
    }

    fun setSymbolSpacing(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.symbolSpacing(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for symbolSpacing is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.symbolSpacing(value)
          } else {
            Logger.e("RNMBXSymbol", "value for symbolSpacing is null")
          }
      }
    }

    fun setSymbolAvoidEdges(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.symbolAvoidEdges(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for symbolAvoidEdges is null")
        }
      } else {
          val value = styleValue.getBoolean(VALUE_KEY)
          if (value != null) {
            layer.symbolAvoidEdges(value)
          } else {
            Logger.e("RNMBXSymbol", "value for symbolAvoidEdges is null")
          }
      }
    }

    fun setSymbolSortKey(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.symbolSortKey(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for symbolSortKey is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.symbolSortKey(value)
          } else {
            Logger.e("RNMBXSymbol", "value for symbolSortKey is null")
          }
      }
    }

    fun setSymbolZOrder(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.symbolZOrder(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for symbolZOrder is null")
        }
      } else {
          layer.symbolZOrder(SymbolZOrder.valueOf(styleValue.getEnumName()))
      }
    }

    fun setIconAllowOverlap(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.iconAllowOverlap(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for iconAllowOverlap is null")
        }
      } else {
          val value = styleValue.getBoolean(VALUE_KEY)
          if (value != null) {
            layer.iconAllowOverlap(value)
          } else {
            Logger.e("RNMBXSymbol", "value for iconAllowOverlap is null")
          }
      }
    }

    fun setIconIgnorePlacement(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.iconIgnorePlacement(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for iconIgnorePlacement is null")
        }
      } else {
          val value = styleValue.getBoolean(VALUE_KEY)
          if (value != null) {
            layer.iconIgnorePlacement(value)
          } else {
            Logger.e("RNMBXSymbol", "value for iconIgnorePlacement is null")
          }
      }
    }

    fun setIconOptional(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.iconOptional(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for iconOptional is null")
        }
      } else {
          val value = styleValue.getBoolean(VALUE_KEY)
          if (value != null) {
            layer.iconOptional(value)
          } else {
            Logger.e("RNMBXSymbol", "value for iconOptional is null")
          }
      }
    }

    fun setIconRotationAlignment(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.iconRotationAlignment(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for iconRotationAlignment is null")
        }
      } else {
          layer.iconRotationAlignment(IconRotationAlignment.valueOf(styleValue.getEnumName()))
      }
    }

    fun setIconSize(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.iconSize(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for iconSize is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.iconSize(value)
          } else {
            Logger.e("RNMBXSymbol", "value for iconSize is null")
          }
      }
    }

    fun setIconTextFit(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.iconTextFit(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for iconTextFit is null")
        }
      } else {
          layer.iconTextFit(IconTextFit.valueOf(styleValue.getEnumName()))
      }
    }

    fun setIconTextFitPadding(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.iconTextFitPadding(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for iconTextFitPadding is null")
        }
      } else {
          val value = styleValue.getFloatArray(VALUE_KEY)
          if (value != null) {
            layer.iconTextFitPadding(value)
          } else {
            Logger.e("RNMBXSymbol", "value for iconTextFitPadding is null")
          }
      }
    }

    fun setIconImage(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        if (styleValue.isImageStringValue) {
          val value = styleValue.getImageStringValue()
          if (value != null) {
            layer.iconImage(value)
          } else {
            Logger.e("RNMBXSymbol", "Image for iconImage is null")
          }
        } else {
          val expression = styleValue.getExpression()
          if (expression != null) {
            layer.iconImage(expression)
          } else {
            Logger.e("RNMBXSymbol", "Expression for iconImage is null")
          }
        }
      } else {
        val value = styleValue.imageURI
        if (value != null) {
          layer.iconImage(value);
        } else {
          Logger.e("RNMBXSymbol", "value for iconImage is null")
        }
      }
    }

    fun setIconRotate(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.iconRotate(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for iconRotate is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.iconRotate(value)
          } else {
            Logger.e("RNMBXSymbol", "value for iconRotate is null")
          }
      }
    }

    fun setIconPadding(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.iconPadding(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for iconPadding is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.iconPadding(value)
          } else {
            Logger.e("RNMBXSymbol", "value for iconPadding is null")
          }
      }
    }

    fun setIconKeepUpright(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.iconKeepUpright(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for iconKeepUpright is null")
        }
      } else {
          val value = styleValue.getBoolean(VALUE_KEY)
          if (value != null) {
            layer.iconKeepUpright(value)
          } else {
            Logger.e("RNMBXSymbol", "value for iconKeepUpright is null")
          }
      }
    }

    fun setIconOffset(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.iconOffset(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for iconOffset is null")
        }
      } else {
          val value = styleValue.getFloatArray(VALUE_KEY)
          if (value != null) {
            layer.iconOffset(value)
          } else {
            Logger.e("RNMBXSymbol", "value for iconOffset is null")
          }
      }
    }

    fun setIconAnchor(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.iconAnchor(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for iconAnchor is null")
        }
      } else {
          layer.iconAnchor(IconAnchor.valueOf(styleValue.getEnumName()))
      }
    }

    fun setIconPitchAlignment(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.iconPitchAlignment(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for iconPitchAlignment is null")
        }
      } else {
          layer.iconPitchAlignment(IconPitchAlignment.valueOf(styleValue.getEnumName()))
      }
    }

    fun setTextPitchAlignment(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.textPitchAlignment(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for textPitchAlignment is null")
        }
      } else {
          layer.textPitchAlignment(TextPitchAlignment.valueOf(styleValue.getEnumName()))
      }
    }

    fun setTextRotationAlignment(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.textRotationAlignment(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for textRotationAlignment is null")
        }
      } else {
          layer.textRotationAlignment(TextRotationAlignment.valueOf(styleValue.getEnumName()))
      }
    }

    fun setTextField(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.textField(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for textField is null")
        }
      } else {
          val value = styleValue.getString(VALUE_KEY)
          if (value != null) {
            layer.textField(value)
          } else {
            Logger.e("RNMBXSymbol", "value for textField is null")
          }
      }
    }

    fun setTextFont(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.textFont(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for textFont is null")
        }
      } else {
          val value = styleValue.getStringArray(VALUE_KEY)
          if (value != null) {
            layer.textFont(value)
          } else {
            Logger.e("RNMBXSymbol", "value for textFont is null")
          }
      }
    }

    fun setTextSize(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.textSize(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for textSize is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.textSize(value)
          } else {
            Logger.e("RNMBXSymbol", "value for textSize is null")
          }
      }
    }

    fun setTextMaxWidth(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.textMaxWidth(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for textMaxWidth is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.textMaxWidth(value)
          } else {
            Logger.e("RNMBXSymbol", "value for textMaxWidth is null")
          }
      }
    }

    fun setTextLineHeight(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.textLineHeight(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for textLineHeight is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.textLineHeight(value)
          } else {
            Logger.e("RNMBXSymbol", "value for textLineHeight is null")
          }
      }
    }

    fun setTextLetterSpacing(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.textLetterSpacing(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for textLetterSpacing is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.textLetterSpacing(value)
          } else {
            Logger.e("RNMBXSymbol", "value for textLetterSpacing is null")
          }
      }
    }

    fun setTextJustify(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.textJustify(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for textJustify is null")
        }
      } else {
          layer.textJustify(TextJustify.valueOf(styleValue.getEnumName()))
      }
    }

    fun setTextRadialOffset(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.textRadialOffset(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for textRadialOffset is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.textRadialOffset(value)
          } else {
            Logger.e("RNMBXSymbol", "value for textRadialOffset is null")
          }
      }
    }

    fun setTextVariableAnchor(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.textVariableAnchor(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for textVariableAnchor is null")
        }
      } else {
          val value = styleValue.getStringArray(VALUE_KEY)
          if (value != null) {
            layer.textVariableAnchor(value)
          } else {
            Logger.e("RNMBXSymbol", "value for textVariableAnchor is null")
          }
      }
    }

    fun setTextAnchor(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.textAnchor(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for textAnchor is null")
        }
      } else {
          layer.textAnchor(TextAnchor.valueOf(styleValue.getEnumName()))
      }
    }

    fun setTextMaxAngle(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.textMaxAngle(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for textMaxAngle is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.textMaxAngle(value)
          } else {
            Logger.e("RNMBXSymbol", "value for textMaxAngle is null")
          }
      }
    }

    fun setTextWritingMode(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.textWritingMode(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for textWritingMode is null")
        }
      } else {
          val value = styleValue.getStringArray(VALUE_KEY)
          if (value != null) {
            layer.textWritingMode(value)
          } else {
            Logger.e("RNMBXSymbol", "value for textWritingMode is null")
          }
      }
    }

    fun setTextRotate(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.textRotate(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for textRotate is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.textRotate(value)
          } else {
            Logger.e("RNMBXSymbol", "value for textRotate is null")
          }
      }
    }

    fun setTextPadding(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.textPadding(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for textPadding is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.textPadding(value)
          } else {
            Logger.e("RNMBXSymbol", "value for textPadding is null")
          }
      }
    }

    fun setTextKeepUpright(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.textKeepUpright(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for textKeepUpright is null")
        }
      } else {
          val value = styleValue.getBoolean(VALUE_KEY)
          if (value != null) {
            layer.textKeepUpright(value)
          } else {
            Logger.e("RNMBXSymbol", "value for textKeepUpright is null")
          }
      }
    }

    fun setTextTransform(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.textTransform(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for textTransform is null")
        }
      } else {
          layer.textTransform(TextTransform.valueOf(styleValue.getEnumName()))
      }
    }

    fun setTextOffset(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.textOffset(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for textOffset is null")
        }
      } else {
          val value = styleValue.getFloatArray(VALUE_KEY)
          if (value != null) {
            layer.textOffset(value)
          } else {
            Logger.e("RNMBXSymbol", "value for textOffset is null")
          }
      }
    }

    fun setTextAllowOverlap(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.textAllowOverlap(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for textAllowOverlap is null")
        }
      } else {
          val value = styleValue.getBoolean(VALUE_KEY)
          if (value != null) {
            layer.textAllowOverlap(value)
          } else {
            Logger.e("RNMBXSymbol", "value for textAllowOverlap is null")
          }
      }
    }

    fun setTextIgnorePlacement(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.textIgnorePlacement(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for textIgnorePlacement is null")
        }
      } else {
          val value = styleValue.getBoolean(VALUE_KEY)
          if (value != null) {
            layer.textIgnorePlacement(value)
          } else {
            Logger.e("RNMBXSymbol", "value for textIgnorePlacement is null")
          }
      }
    }

    fun setTextOptional(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.textOptional(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for textOptional is null")
        }
      } else {
          val value = styleValue.getBoolean(VALUE_KEY)
          if (value != null) {
            layer.textOptional(value)
          } else {
            Logger.e("RNMBXSymbol", "value for textOptional is null")
          }
      }
    }

    fun setVisibility(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
        layer.visibility(Visibility.valueOf(styleValue.getEnumName()));
    }

    fun setIconOpacity(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.iconOpacity(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for iconOpacity is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.iconOpacity(value)
          } else {
            Logger.e("RNMBXSymbol", "value for iconOpacity is null")
          }
      }
    }


    fun setIconOpacityTransition(layer: SymbolLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.iconOpacityTransition(transition);
      }
    }

    fun setIconColor(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.iconColor(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for iconColor is null")
        }
      } else {
          val value = styleValue.getInt(VALUE_KEY)
          if (value != null) {
            layer.iconColor(value)
          } else {
            Logger.e("RNMBXSymbol", "value for iconColor is null")
          }
      }
    }


    fun setIconColorTransition(layer: SymbolLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.iconColorTransition(transition);
      }
    }

    fun setIconHaloColor(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.iconHaloColor(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for iconHaloColor is null")
        }
      } else {
          val value = styleValue.getInt(VALUE_KEY)
          if (value != null) {
            layer.iconHaloColor(value)
          } else {
            Logger.e("RNMBXSymbol", "value for iconHaloColor is null")
          }
      }
    }


    fun setIconHaloColorTransition(layer: SymbolLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.iconHaloColorTransition(transition);
      }
    }

    fun setIconHaloWidth(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.iconHaloWidth(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for iconHaloWidth is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.iconHaloWidth(value)
          } else {
            Logger.e("RNMBXSymbol", "value for iconHaloWidth is null")
          }
      }
    }


    fun setIconHaloWidthTransition(layer: SymbolLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.iconHaloWidthTransition(transition);
      }
    }

    fun setIconHaloBlur(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.iconHaloBlur(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for iconHaloBlur is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.iconHaloBlur(value)
          } else {
            Logger.e("RNMBXSymbol", "value for iconHaloBlur is null")
          }
      }
    }


    fun setIconHaloBlurTransition(layer: SymbolLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.iconHaloBlurTransition(transition);
      }
    }

    fun setIconTranslate(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.iconTranslate(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for iconTranslate is null")
        }
      } else {
          val value = styleValue.getFloatArray(VALUE_KEY)
          if (value != null) {
            layer.iconTranslate(value)
          } else {
            Logger.e("RNMBXSymbol", "value for iconTranslate is null")
          }
      }
    }


    fun setIconTranslateTransition(layer: SymbolLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.iconTranslateTransition(transition);
      }
    }

    fun setIconTranslateAnchor(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.iconTranslateAnchor(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for iconTranslateAnchor is null")
        }
      } else {
          layer.iconTranslateAnchor(IconTranslateAnchor.valueOf(styleValue.getEnumName()))
      }
    }

    fun setTextOpacity(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.textOpacity(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for textOpacity is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.textOpacity(value)
          } else {
            Logger.e("RNMBXSymbol", "value for textOpacity is null")
          }
      }
    }


    fun setTextOpacityTransition(layer: SymbolLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.textOpacityTransition(transition);
      }
    }

    fun setTextColor(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.textColor(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for textColor is null")
        }
      } else {
          val value = styleValue.getInt(VALUE_KEY)
          if (value != null) {
            layer.textColor(value)
          } else {
            Logger.e("RNMBXSymbol", "value for textColor is null")
          }
      }
    }


    fun setTextColorTransition(layer: SymbolLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.textColorTransition(transition);
      }
    }

    fun setTextHaloColor(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.textHaloColor(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for textHaloColor is null")
        }
      } else {
          val value = styleValue.getInt(VALUE_KEY)
          if (value != null) {
            layer.textHaloColor(value)
          } else {
            Logger.e("RNMBXSymbol", "value for textHaloColor is null")
          }
      }
    }


    fun setTextHaloColorTransition(layer: SymbolLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.textHaloColorTransition(transition);
      }
    }

    fun setTextHaloWidth(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.textHaloWidth(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for textHaloWidth is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.textHaloWidth(value)
          } else {
            Logger.e("RNMBXSymbol", "value for textHaloWidth is null")
          }
      }
    }


    fun setTextHaloWidthTransition(layer: SymbolLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.textHaloWidthTransition(transition);
      }
    }

    fun setTextHaloBlur(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.textHaloBlur(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for textHaloBlur is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.textHaloBlur(value)
          } else {
            Logger.e("RNMBXSymbol", "value for textHaloBlur is null")
          }
      }
    }


    fun setTextHaloBlurTransition(layer: SymbolLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.textHaloBlurTransition(transition);
      }
    }

    fun setTextTranslate(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.textTranslate(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for textTranslate is null")
        }
      } else {
          val value = styleValue.getFloatArray(VALUE_KEY)
          if (value != null) {
            layer.textTranslate(value)
          } else {
            Logger.e("RNMBXSymbol", "value for textTranslate is null")
          }
      }
    }


    fun setTextTranslateTransition(layer: SymbolLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.textTranslateTransition(transition);
      }
    }

    fun setTextTranslateAnchor(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.textTranslateAnchor(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for textTranslateAnchor is null")
        }
      } else {
          layer.textTranslateAnchor(TextTranslateAnchor.valueOf(styleValue.getEnumName()))
      }
    }

    fun setSymbolZElevate(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.symbolZElevate(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for symbolZElevate is null")
        }
      } else {
          val value = styleValue.getBoolean(VALUE_KEY)
          if (value != null) {
            layer.symbolZElevate(value)
          } else {
            Logger.e("RNMBXSymbol", "value for symbolZElevate is null")
          }
      }
    }

    fun setIconEmissiveStrength(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.iconEmissiveStrength(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for iconEmissiveStrength is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.iconEmissiveStrength(value)
          } else {
            Logger.e("RNMBXSymbol", "value for iconEmissiveStrength is null")
          }
      }
    }


    fun setIconEmissiveStrengthTransition(layer: SymbolLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.iconEmissiveStrengthTransition(transition);
      }
    }

    fun setTextEmissiveStrength(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.textEmissiveStrength(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for textEmissiveStrength is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.textEmissiveStrength(value)
          } else {
            Logger.e("RNMBXSymbol", "value for textEmissiveStrength is null")
          }
      }
    }


    fun setTextEmissiveStrengthTransition(layer: SymbolLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.textEmissiveStrengthTransition(transition);
      }
    }

    fun setIconImageCrossFade(layer: SymbolLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.iconImageCrossFade(expression)
        } else {
          Logger.e("RNMBXSymbol", "Expression for iconImageCrossFade is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.iconImageCrossFade(value)
          } else {
            Logger.e("RNMBXSymbol", "value for iconImageCrossFade is null")
          }
      }
    }


    fun setIconImageCrossFadeTransition(layer: SymbolLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.iconImageCrossFadeTransition(transition);
      }
    }

    fun setCircleSortKey(layer: CircleLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.circleSortKey(expression)
        } else {
          Logger.e("RNMBXCircle", "Expression for circleSortKey is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.circleSortKey(value)
          } else {
            Logger.e("RNMBXCircle", "value for circleSortKey is null")
          }
      }
    }

    fun setVisibility(layer: CircleLayer, styleValue: RNMBXStyleValue ) {
        layer.visibility(Visibility.valueOf(styleValue.getEnumName()));
    }

    fun setCircleRadius(layer: CircleLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.circleRadius(expression)
        } else {
          Logger.e("RNMBXCircle", "Expression for circleRadius is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.circleRadius(value)
          } else {
            Logger.e("RNMBXCircle", "value for circleRadius is null")
          }
      }
    }


    fun setCircleRadiusTransition(layer: CircleLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.circleRadiusTransition(transition);
      }
    }

    fun setCircleColor(layer: CircleLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.circleColor(expression)
        } else {
          Logger.e("RNMBXCircle", "Expression for circleColor is null")
        }
      } else {
          val value = styleValue.getInt(VALUE_KEY)
          if (value != null) {
            layer.circleColor(value)
          } else {
            Logger.e("RNMBXCircle", "value for circleColor is null")
          }
      }
    }


    fun setCircleColorTransition(layer: CircleLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.circleColorTransition(transition);
      }
    }

    fun setCircleBlur(layer: CircleLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.circleBlur(expression)
        } else {
          Logger.e("RNMBXCircle", "Expression for circleBlur is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.circleBlur(value)
          } else {
            Logger.e("RNMBXCircle", "value for circleBlur is null")
          }
      }
    }


    fun setCircleBlurTransition(layer: CircleLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.circleBlurTransition(transition);
      }
    }

    fun setCircleOpacity(layer: CircleLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.circleOpacity(expression)
        } else {
          Logger.e("RNMBXCircle", "Expression for circleOpacity is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.circleOpacity(value)
          } else {
            Logger.e("RNMBXCircle", "value for circleOpacity is null")
          }
      }
    }


    fun setCircleOpacityTransition(layer: CircleLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.circleOpacityTransition(transition);
      }
    }

    fun setCircleTranslate(layer: CircleLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.circleTranslate(expression)
        } else {
          Logger.e("RNMBXCircle", "Expression for circleTranslate is null")
        }
      } else {
          val value = styleValue.getFloatArray(VALUE_KEY)
          if (value != null) {
            layer.circleTranslate(value)
          } else {
            Logger.e("RNMBXCircle", "value for circleTranslate is null")
          }
      }
    }


    fun setCircleTranslateTransition(layer: CircleLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.circleTranslateTransition(transition);
      }
    }

    fun setCircleTranslateAnchor(layer: CircleLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.circleTranslateAnchor(expression)
        } else {
          Logger.e("RNMBXCircle", "Expression for circleTranslateAnchor is null")
        }
      } else {
          layer.circleTranslateAnchor(CircleTranslateAnchor.valueOf(styleValue.getEnumName()))
      }
    }

    fun setCirclePitchScale(layer: CircleLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.circlePitchScale(expression)
        } else {
          Logger.e("RNMBXCircle", "Expression for circlePitchScale is null")
        }
      } else {
          layer.circlePitchScale(CirclePitchScale.valueOf(styleValue.getEnumName()))
      }
    }

    fun setCirclePitchAlignment(layer: CircleLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.circlePitchAlignment(expression)
        } else {
          Logger.e("RNMBXCircle", "Expression for circlePitchAlignment is null")
        }
      } else {
          layer.circlePitchAlignment(CirclePitchAlignment.valueOf(styleValue.getEnumName()))
      }
    }

    fun setCircleStrokeWidth(layer: CircleLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.circleStrokeWidth(expression)
        } else {
          Logger.e("RNMBXCircle", "Expression for circleStrokeWidth is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.circleStrokeWidth(value)
          } else {
            Logger.e("RNMBXCircle", "value for circleStrokeWidth is null")
          }
      }
    }


    fun setCircleStrokeWidthTransition(layer: CircleLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.circleStrokeWidthTransition(transition);
      }
    }

    fun setCircleStrokeColor(layer: CircleLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.circleStrokeColor(expression)
        } else {
          Logger.e("RNMBXCircle", "Expression for circleStrokeColor is null")
        }
      } else {
          val value = styleValue.getInt(VALUE_KEY)
          if (value != null) {
            layer.circleStrokeColor(value)
          } else {
            Logger.e("RNMBXCircle", "value for circleStrokeColor is null")
          }
      }
    }


    fun setCircleStrokeColorTransition(layer: CircleLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.circleStrokeColorTransition(transition);
      }
    }

    fun setCircleStrokeOpacity(layer: CircleLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.circleStrokeOpacity(expression)
        } else {
          Logger.e("RNMBXCircle", "Expression for circleStrokeOpacity is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.circleStrokeOpacity(value)
          } else {
            Logger.e("RNMBXCircle", "value for circleStrokeOpacity is null")
          }
      }
    }


    fun setCircleStrokeOpacityTransition(layer: CircleLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.circleStrokeOpacityTransition(transition);
      }
    }

    fun setCircleEmissiveStrength(layer: CircleLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.circleEmissiveStrength(expression)
        } else {
          Logger.e("RNMBXCircle", "Expression for circleEmissiveStrength is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.circleEmissiveStrength(value)
          } else {
            Logger.e("RNMBXCircle", "value for circleEmissiveStrength is null")
          }
      }
    }


    fun setCircleEmissiveStrengthTransition(layer: CircleLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.circleEmissiveStrengthTransition(transition);
      }
    }

    fun setVisibility(layer: HeatmapLayer, styleValue: RNMBXStyleValue ) {
        layer.visibility(Visibility.valueOf(styleValue.getEnumName()));
    }

    fun setHeatmapRadius(layer: HeatmapLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.heatmapRadius(expression)
        } else {
          Logger.e("RNMBXHeatmap", "Expression for heatmapRadius is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.heatmapRadius(value)
          } else {
            Logger.e("RNMBXHeatmap", "value for heatmapRadius is null")
          }
      }
    }


    fun setHeatmapRadiusTransition(layer: HeatmapLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.heatmapRadiusTransition(transition);
      }
    }

    fun setHeatmapWeight(layer: HeatmapLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.heatmapWeight(expression)
        } else {
          Logger.e("RNMBXHeatmap", "Expression for heatmapWeight is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.heatmapWeight(value)
          } else {
            Logger.e("RNMBXHeatmap", "value for heatmapWeight is null")
          }
      }
    }

    fun setHeatmapIntensity(layer: HeatmapLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.heatmapIntensity(expression)
        } else {
          Logger.e("RNMBXHeatmap", "Expression for heatmapIntensity is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.heatmapIntensity(value)
          } else {
            Logger.e("RNMBXHeatmap", "value for heatmapIntensity is null")
          }
      }
    }


    fun setHeatmapIntensityTransition(layer: HeatmapLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.heatmapIntensityTransition(transition);
      }
    }

    fun setHeatmapColor(layer: HeatmapLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.heatmapColor(expression)
        } else {
          Logger.e("RNMBXHeatmap", "Expression for heatmapColor is null")
        }
      } else {
          layer.heatmapColor(styleValue.getIntExpression(VALUE_KEY))
      }
    }

    fun setHeatmapOpacity(layer: HeatmapLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.heatmapOpacity(expression)
        } else {
          Logger.e("RNMBXHeatmap", "Expression for heatmapOpacity is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.heatmapOpacity(value)
          } else {
            Logger.e("RNMBXHeatmap", "value for heatmapOpacity is null")
          }
      }
    }


    fun setHeatmapOpacityTransition(layer: HeatmapLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.heatmapOpacityTransition(transition);
      }
    }

    fun setVisibility(layer: FillExtrusionLayer, styleValue: RNMBXStyleValue ) {
        layer.visibility(Visibility.valueOf(styleValue.getEnumName()));
    }

    fun setFillExtrusionOpacity(layer: FillExtrusionLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.fillExtrusionOpacity(expression)
        } else {
          Logger.e("RNMBXFillExtrusion", "Expression for fillExtrusionOpacity is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.fillExtrusionOpacity(value)
          } else {
            Logger.e("RNMBXFillExtrusion", "value for fillExtrusionOpacity is null")
          }
      }
    }


    fun setFillExtrusionOpacityTransition(layer: FillExtrusionLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.fillExtrusionOpacityTransition(transition);
      }
    }

    fun setFillExtrusionColor(layer: FillExtrusionLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.fillExtrusionColor(expression)
        } else {
          Logger.e("RNMBXFillExtrusion", "Expression for fillExtrusionColor is null")
        }
      } else {
          val value = styleValue.getInt(VALUE_KEY)
          if (value != null) {
            layer.fillExtrusionColor(value)
          } else {
            Logger.e("RNMBXFillExtrusion", "value for fillExtrusionColor is null")
          }
      }
    }


    fun setFillExtrusionColorTransition(layer: FillExtrusionLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.fillExtrusionColorTransition(transition);
      }
    }

    fun setFillExtrusionTranslate(layer: FillExtrusionLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.fillExtrusionTranslate(expression)
        } else {
          Logger.e("RNMBXFillExtrusion", "Expression for fillExtrusionTranslate is null")
        }
      } else {
          val value = styleValue.getFloatArray(VALUE_KEY)
          if (value != null) {
            layer.fillExtrusionTranslate(value)
          } else {
            Logger.e("RNMBXFillExtrusion", "value for fillExtrusionTranslate is null")
          }
      }
    }


    fun setFillExtrusionTranslateTransition(layer: FillExtrusionLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.fillExtrusionTranslateTransition(transition);
      }
    }

    fun setFillExtrusionTranslateAnchor(layer: FillExtrusionLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.fillExtrusionTranslateAnchor(expression)
        } else {
          Logger.e("RNMBXFillExtrusion", "Expression for fillExtrusionTranslateAnchor is null")
        }
      } else {
          layer.fillExtrusionTranslateAnchor(FillExtrusionTranslateAnchor.valueOf(styleValue.getEnumName()))
      }
    }

    fun setFillExtrusionPattern(layer: FillExtrusionLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        if (styleValue.isImageStringValue) {
          val value = styleValue.getImageStringValue()
          if (value != null) {
            layer.fillExtrusionPattern(value)
          } else {
            Logger.e("RNMBXFillExtrusion", "Image for fillExtrusionPattern is null")
          }
        } else {
          val expression = styleValue.getExpression()
          if (expression != null) {
            layer.fillExtrusionPattern(expression)
          } else {
            Logger.e("RNMBXFillExtrusion", "Expression for fillExtrusionPattern is null")
          }
        }
      } else {
        val value = styleValue.imageURI
        if (value != null) {
          layer.fillExtrusionPattern(value);
        } else {
          Logger.e("RNMBXFillExtrusion", "value for fillExtrusionPattern is null")
        }
      }
    }

    fun setFillExtrusionHeight(layer: FillExtrusionLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.fillExtrusionHeight(expression)
        } else {
          Logger.e("RNMBXFillExtrusion", "Expression for fillExtrusionHeight is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.fillExtrusionHeight(value)
          } else {
            Logger.e("RNMBXFillExtrusion", "value for fillExtrusionHeight is null")
          }
      }
    }


    fun setFillExtrusionHeightTransition(layer: FillExtrusionLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.fillExtrusionHeightTransition(transition);
      }
    }

    fun setFillExtrusionBase(layer: FillExtrusionLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.fillExtrusionBase(expression)
        } else {
          Logger.e("RNMBXFillExtrusion", "Expression for fillExtrusionBase is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.fillExtrusionBase(value)
          } else {
            Logger.e("RNMBXFillExtrusion", "value for fillExtrusionBase is null")
          }
      }
    }


    fun setFillExtrusionBaseTransition(layer: FillExtrusionLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.fillExtrusionBaseTransition(transition);
      }
    }

    fun setFillExtrusionVerticalGradient(layer: FillExtrusionLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.fillExtrusionVerticalGradient(expression)
        } else {
          Logger.e("RNMBXFillExtrusion", "Expression for fillExtrusionVerticalGradient is null")
        }
      } else {
          val value = styleValue.getBoolean(VALUE_KEY)
          if (value != null) {
            layer.fillExtrusionVerticalGradient(value)
          } else {
            Logger.e("RNMBXFillExtrusion", "value for fillExtrusionVerticalGradient is null")
          }
      }
    }

    fun setFillExtrusionRoundedRoof(layer: FillExtrusionLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.fillExtrusionRoundedRoof(expression)
        } else {
          Logger.e("RNMBXFillExtrusion", "Expression for fillExtrusionRoundedRoof is null")
        }
      } else {
          val value = styleValue.getBoolean(VALUE_KEY)
          if (value != null) {
            layer.fillExtrusionRoundedRoof(value)
          } else {
            Logger.e("RNMBXFillExtrusion", "value for fillExtrusionRoundedRoof is null")
          }
      }
    }

    fun setFillExtrusionAmbientOcclusionWallRadius(layer: FillExtrusionLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.fillExtrusionAmbientOcclusionWallRadius(expression)
        } else {
          Logger.e("RNMBXFillExtrusion", "Expression for fillExtrusionAmbientOcclusionWallRadius is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.fillExtrusionAmbientOcclusionWallRadius(value)
          } else {
            Logger.e("RNMBXFillExtrusion", "value for fillExtrusionAmbientOcclusionWallRadius is null")
          }
      }
    }


    fun setFillExtrusionAmbientOcclusionWallRadiusTransition(layer: FillExtrusionLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.fillExtrusionAmbientOcclusionWallRadiusTransition(transition);
      }
    }

    fun setFillExtrusionAmbientOcclusionGroundRadius(layer: FillExtrusionLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.fillExtrusionAmbientOcclusionGroundRadius(expression)
        } else {
          Logger.e("RNMBXFillExtrusion", "Expression for fillExtrusionAmbientOcclusionGroundRadius is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.fillExtrusionAmbientOcclusionGroundRadius(value)
          } else {
            Logger.e("RNMBXFillExtrusion", "value for fillExtrusionAmbientOcclusionGroundRadius is null")
          }
      }
    }


    fun setFillExtrusionAmbientOcclusionGroundRadiusTransition(layer: FillExtrusionLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.fillExtrusionAmbientOcclusionGroundRadiusTransition(transition);
      }
    }

    fun setFillExtrusionAmbientOcclusionGroundAttenuation(layer: FillExtrusionLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.fillExtrusionAmbientOcclusionGroundAttenuation(expression)
        } else {
          Logger.e("RNMBXFillExtrusion", "Expression for fillExtrusionAmbientOcclusionGroundAttenuation is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.fillExtrusionAmbientOcclusionGroundAttenuation(value)
          } else {
            Logger.e("RNMBXFillExtrusion", "value for fillExtrusionAmbientOcclusionGroundAttenuation is null")
          }
      }
    }


    fun setFillExtrusionAmbientOcclusionGroundAttenuationTransition(layer: FillExtrusionLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.fillExtrusionAmbientOcclusionGroundAttenuationTransition(transition);
      }
    }

    fun setFillExtrusionFloodLightColor(layer: FillExtrusionLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.fillExtrusionFloodLightColor(expression)
        } else {
          Logger.e("RNMBXFillExtrusion", "Expression for fillExtrusionFloodLightColor is null")
        }
      } else {
          val value = styleValue.getInt(VALUE_KEY)
          if (value != null) {
            layer.fillExtrusionFloodLightColor(value)
          } else {
            Logger.e("RNMBXFillExtrusion", "value for fillExtrusionFloodLightColor is null")
          }
      }
    }


    fun setFillExtrusionFloodLightColorTransition(layer: FillExtrusionLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.fillExtrusionFloodLightColorTransition(transition);
      }
    }

    fun setFillExtrusionFloodLightIntensity(layer: FillExtrusionLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.fillExtrusionFloodLightIntensity(expression)
        } else {
          Logger.e("RNMBXFillExtrusion", "Expression for fillExtrusionFloodLightIntensity is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.fillExtrusionFloodLightIntensity(value)
          } else {
            Logger.e("RNMBXFillExtrusion", "value for fillExtrusionFloodLightIntensity is null")
          }
      }
    }


    fun setFillExtrusionFloodLightIntensityTransition(layer: FillExtrusionLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.fillExtrusionFloodLightIntensityTransition(transition);
      }
    }

    fun setFillExtrusionFloodLightWallRadius(layer: FillExtrusionLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.fillExtrusionFloodLightWallRadius(expression)
        } else {
          Logger.e("RNMBXFillExtrusion", "Expression for fillExtrusionFloodLightWallRadius is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.fillExtrusionFloodLightWallRadius(value)
          } else {
            Logger.e("RNMBXFillExtrusion", "value for fillExtrusionFloodLightWallRadius is null")
          }
      }
    }


    fun setFillExtrusionFloodLightWallRadiusTransition(layer: FillExtrusionLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.fillExtrusionFloodLightWallRadiusTransition(transition);
      }
    }

    fun setFillExtrusionFloodLightGroundRadius(layer: FillExtrusionLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.fillExtrusionFloodLightGroundRadius(expression)
        } else {
          Logger.e("RNMBXFillExtrusion", "Expression for fillExtrusionFloodLightGroundRadius is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.fillExtrusionFloodLightGroundRadius(value)
          } else {
            Logger.e("RNMBXFillExtrusion", "value for fillExtrusionFloodLightGroundRadius is null")
          }
      }
    }


    fun setFillExtrusionFloodLightGroundRadiusTransition(layer: FillExtrusionLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.fillExtrusionFloodLightGroundRadiusTransition(transition);
      }
    }

    fun setFillExtrusionFloodLightGroundAttenuation(layer: FillExtrusionLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.fillExtrusionFloodLightGroundAttenuation(expression)
        } else {
          Logger.e("RNMBXFillExtrusion", "Expression for fillExtrusionFloodLightGroundAttenuation is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.fillExtrusionFloodLightGroundAttenuation(value)
          } else {
            Logger.e("RNMBXFillExtrusion", "value for fillExtrusionFloodLightGroundAttenuation is null")
          }
      }
    }


    fun setFillExtrusionFloodLightGroundAttenuationTransition(layer: FillExtrusionLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.fillExtrusionFloodLightGroundAttenuationTransition(transition);
      }
    }

    fun setFillExtrusionVerticalScale(layer: FillExtrusionLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.fillExtrusionVerticalScale(expression)
        } else {
          Logger.e("RNMBXFillExtrusion", "Expression for fillExtrusionVerticalScale is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.fillExtrusionVerticalScale(value)
          } else {
            Logger.e("RNMBXFillExtrusion", "value for fillExtrusionVerticalScale is null")
          }
      }
    }


    fun setFillExtrusionVerticalScaleTransition(layer: FillExtrusionLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.fillExtrusionVerticalScaleTransition(transition);
      }
    }

    fun setFillExtrusionCutoffFadeRange(layer: FillExtrusionLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.fillExtrusionCutoffFadeRange(expression)
        } else {
          Logger.e("RNMBXFillExtrusion", "Expression for fillExtrusionCutoffFadeRange is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.fillExtrusionCutoffFadeRange(value)
          } else {
            Logger.e("RNMBXFillExtrusion", "value for fillExtrusionCutoffFadeRange is null")
          }
      }
    }

    fun setVisibility(layer: RasterLayer, styleValue: RNMBXStyleValue ) {
        layer.visibility(Visibility.valueOf(styleValue.getEnumName()));
    }

    fun setRasterOpacity(layer: RasterLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.rasterOpacity(expression)
        } else {
          Logger.e("RNMBXRaster", "Expression for rasterOpacity is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.rasterOpacity(value)
          } else {
            Logger.e("RNMBXRaster", "value for rasterOpacity is null")
          }
      }
    }


    fun setRasterOpacityTransition(layer: RasterLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.rasterOpacityTransition(transition);
      }
    }

    fun setRasterHueRotate(layer: RasterLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.rasterHueRotate(expression)
        } else {
          Logger.e("RNMBXRaster", "Expression for rasterHueRotate is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.rasterHueRotate(value)
          } else {
            Logger.e("RNMBXRaster", "value for rasterHueRotate is null")
          }
      }
    }


    fun setRasterHueRotateTransition(layer: RasterLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.rasterHueRotateTransition(transition);
      }
    }

    fun setRasterBrightnessMin(layer: RasterLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.rasterBrightnessMin(expression)
        } else {
          Logger.e("RNMBXRaster", "Expression for rasterBrightnessMin is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.rasterBrightnessMin(value)
          } else {
            Logger.e("RNMBXRaster", "value for rasterBrightnessMin is null")
          }
      }
    }


    fun setRasterBrightnessMinTransition(layer: RasterLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.rasterBrightnessMinTransition(transition);
      }
    }

    fun setRasterBrightnessMax(layer: RasterLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.rasterBrightnessMax(expression)
        } else {
          Logger.e("RNMBXRaster", "Expression for rasterBrightnessMax is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.rasterBrightnessMax(value)
          } else {
            Logger.e("RNMBXRaster", "value for rasterBrightnessMax is null")
          }
      }
    }


    fun setRasterBrightnessMaxTransition(layer: RasterLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.rasterBrightnessMaxTransition(transition);
      }
    }

    fun setRasterSaturation(layer: RasterLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.rasterSaturation(expression)
        } else {
          Logger.e("RNMBXRaster", "Expression for rasterSaturation is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.rasterSaturation(value)
          } else {
            Logger.e("RNMBXRaster", "value for rasterSaturation is null")
          }
      }
    }


    fun setRasterSaturationTransition(layer: RasterLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.rasterSaturationTransition(transition);
      }
    }

    fun setRasterContrast(layer: RasterLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.rasterContrast(expression)
        } else {
          Logger.e("RNMBXRaster", "Expression for rasterContrast is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.rasterContrast(value)
          } else {
            Logger.e("RNMBXRaster", "value for rasterContrast is null")
          }
      }
    }


    fun setRasterContrastTransition(layer: RasterLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.rasterContrastTransition(transition);
      }
    }

    fun setRasterResampling(layer: RasterLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.rasterResampling(expression)
        } else {
          Logger.e("RNMBXRaster", "Expression for rasterResampling is null")
        }
      } else {
          layer.rasterResampling(RasterResampling.valueOf(styleValue.getEnumName()))
      }
    }

    fun setRasterFadeDuration(layer: RasterLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.rasterFadeDuration(expression)
        } else {
          Logger.e("RNMBXRaster", "Expression for rasterFadeDuration is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.rasterFadeDuration(value)
          } else {
            Logger.e("RNMBXRaster", "value for rasterFadeDuration is null")
          }
      }
    }

    fun setRasterColor(layer: RasterLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.rasterColor(expression)
        } else {
          Logger.e("RNMBXRaster", "Expression for rasterColor is null")
        }
      } else {
          val value = styleValue.getInt(VALUE_KEY)
          if (value != null) {
            layer.rasterColor(value)
          } else {
            Logger.e("RNMBXRaster", "value for rasterColor is null")
          }
      }
    }

    fun setRasterColorMix(layer: RasterLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.rasterColorMix(expression)
        } else {
          Logger.e("RNMBXRaster", "Expression for rasterColorMix is null")
        }
      } else {
          val value = styleValue.getFloatArray(VALUE_KEY)
          if (value != null) {
            layer.rasterColorMix(value)
          } else {
            Logger.e("RNMBXRaster", "value for rasterColorMix is null")
          }
      }
    }


    fun setRasterColorMixTransition(layer: RasterLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.rasterColorMixTransition(transition);
      }
    }

    fun setRasterColorRange(layer: RasterLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.rasterColorRange(expression)
        } else {
          Logger.e("RNMBXRaster", "Expression for rasterColorRange is null")
        }
      } else {
          val value = styleValue.getFloatArray(VALUE_KEY)
          if (value != null) {
            layer.rasterColorRange(value)
          } else {
            Logger.e("RNMBXRaster", "value for rasterColorRange is null")
          }
      }
    }


    fun setRasterColorRangeTransition(layer: RasterLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.rasterColorRangeTransition(transition);
      }
    }

    fun setVisibility(layer: HillshadeLayer, styleValue: RNMBXStyleValue ) {
        layer.visibility(Visibility.valueOf(styleValue.getEnumName()));
    }

    fun setHillshadeIlluminationDirection(layer: HillshadeLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.hillshadeIlluminationDirection(expression)
        } else {
          Logger.e("RNMBXHillshade", "Expression for hillshadeIlluminationDirection is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.hillshadeIlluminationDirection(value)
          } else {
            Logger.e("RNMBXHillshade", "value for hillshadeIlluminationDirection is null")
          }
      }
    }

    fun setHillshadeIlluminationAnchor(layer: HillshadeLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.hillshadeIlluminationAnchor(expression)
        } else {
          Logger.e("RNMBXHillshade", "Expression for hillshadeIlluminationAnchor is null")
        }
      } else {
          layer.hillshadeIlluminationAnchor(HillshadeIlluminationAnchor.valueOf(styleValue.getEnumName()))
      }
    }

    fun setHillshadeExaggeration(layer: HillshadeLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.hillshadeExaggeration(expression)
        } else {
          Logger.e("RNMBXHillshade", "Expression for hillshadeExaggeration is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.hillshadeExaggeration(value)
          } else {
            Logger.e("RNMBXHillshade", "value for hillshadeExaggeration is null")
          }
      }
    }


    fun setHillshadeExaggerationTransition(layer: HillshadeLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.hillshadeExaggerationTransition(transition);
      }
    }

    fun setHillshadeShadowColor(layer: HillshadeLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.hillshadeShadowColor(expression)
        } else {
          Logger.e("RNMBXHillshade", "Expression for hillshadeShadowColor is null")
        }
      } else {
          val value = styleValue.getInt(VALUE_KEY)
          if (value != null) {
            layer.hillshadeShadowColor(value)
          } else {
            Logger.e("RNMBXHillshade", "value for hillshadeShadowColor is null")
          }
      }
    }


    fun setHillshadeShadowColorTransition(layer: HillshadeLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.hillshadeShadowColorTransition(transition);
      }
    }

    fun setHillshadeHighlightColor(layer: HillshadeLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.hillshadeHighlightColor(expression)
        } else {
          Logger.e("RNMBXHillshade", "Expression for hillshadeHighlightColor is null")
        }
      } else {
          val value = styleValue.getInt(VALUE_KEY)
          if (value != null) {
            layer.hillshadeHighlightColor(value)
          } else {
            Logger.e("RNMBXHillshade", "value for hillshadeHighlightColor is null")
          }
      }
    }


    fun setHillshadeHighlightColorTransition(layer: HillshadeLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.hillshadeHighlightColorTransition(transition);
      }
    }

    fun setHillshadeAccentColor(layer: HillshadeLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.hillshadeAccentColor(expression)
        } else {
          Logger.e("RNMBXHillshade", "Expression for hillshadeAccentColor is null")
        }
      } else {
          val value = styleValue.getInt(VALUE_KEY)
          if (value != null) {
            layer.hillshadeAccentColor(value)
          } else {
            Logger.e("RNMBXHillshade", "value for hillshadeAccentColor is null")
          }
      }
    }


    fun setHillshadeAccentColorTransition(layer: HillshadeLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.hillshadeAccentColorTransition(transition);
      }
    }

    fun setVisibility(layer: ModelLayer, styleValue: RNMBXStyleValue ) {
        layer.visibility(Visibility.valueOf(styleValue.getEnumName()));
    }

    fun setModelId(layer: ModelLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.modelId(expression)
        } else {
          Logger.e("RNMBXModel", "Expression for modelId is null")
        }
      } else {
          val value = styleValue.getString(VALUE_KEY)
          if (value != null) {
            layer.modelId(value)
          } else {
            Logger.e("RNMBXModel", "value for modelId is null")
          }
      }
    }

    fun setModelOpacity(layer: ModelLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.modelOpacity(expression)
        } else {
          Logger.e("RNMBXModel", "Expression for modelOpacity is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.modelOpacity(value)
          } else {
            Logger.e("RNMBXModel", "value for modelOpacity is null")
          }
      }
    }


    fun setModelOpacityTransition(layer: ModelLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.modelOpacityTransition(transition);
      }
    }

    fun setModelRotation(layer: ModelLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.modelRotation(expression)
        } else {
          Logger.e("RNMBXModel", "Expression for modelRotation is null")
        }
      } else {
          val value = styleValue.getFloatArray(VALUE_KEY)
          if (value != null) {
            layer.modelRotation(value)
          } else {
            Logger.e("RNMBXModel", "value for modelRotation is null")
          }
      }
    }


    fun setModelRotationTransition(layer: ModelLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.modelRotationTransition(transition);
      }
    }

    fun setModelScale(layer: ModelLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.modelScale(expression)
        } else {
          Logger.e("RNMBXModel", "Expression for modelScale is null")
        }
      } else {
          val value = styleValue.getFloatArray(VALUE_KEY)
          if (value != null) {
            layer.modelScale(value)
          } else {
            Logger.e("RNMBXModel", "value for modelScale is null")
          }
      }
    }


    fun setModelScaleTransition(layer: ModelLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.modelScaleTransition(transition);
      }
    }

    fun setModelTranslation(layer: ModelLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.modelTranslation(expression)
        } else {
          Logger.e("RNMBXModel", "Expression for modelTranslation is null")
        }
      } else {
          val value = styleValue.getFloatArray(VALUE_KEY)
          if (value != null) {
            layer.modelTranslation(value)
          } else {
            Logger.e("RNMBXModel", "value for modelTranslation is null")
          }
      }
    }


    fun setModelTranslationTransition(layer: ModelLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.modelTranslationTransition(transition);
      }
    }

    fun setModelColor(layer: ModelLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.modelColor(expression)
        } else {
          Logger.e("RNMBXModel", "Expression for modelColor is null")
        }
      } else {
          val value = styleValue.getInt(VALUE_KEY)
          if (value != null) {
            layer.modelColor(value)
          } else {
            Logger.e("RNMBXModel", "value for modelColor is null")
          }
      }
    }


    fun setModelColorTransition(layer: ModelLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.modelColorTransition(transition);
      }
    }

    fun setModelColorMixIntensity(layer: ModelLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.modelColorMixIntensity(expression)
        } else {
          Logger.e("RNMBXModel", "Expression for modelColorMixIntensity is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.modelColorMixIntensity(value)
          } else {
            Logger.e("RNMBXModel", "value for modelColorMixIntensity is null")
          }
      }
    }


    fun setModelColorMixIntensityTransition(layer: ModelLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.modelColorMixIntensityTransition(transition);
      }
    }

    fun setModelType(layer: ModelLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.modelType(expression)
        } else {
          Logger.e("RNMBXModel", "Expression for modelType is null")
        }
      } else {
          layer.modelType(ModelType.valueOf(styleValue.getEnumName()))
      }
    }

    fun setModelCastShadows(layer: ModelLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.modelCastShadows(expression)
        } else {
          Logger.e("RNMBXModel", "Expression for modelCastShadows is null")
        }
      } else {
          val value = styleValue.getBoolean(VALUE_KEY)
          if (value != null) {
            layer.modelCastShadows(value)
          } else {
            Logger.e("RNMBXModel", "value for modelCastShadows is null")
          }
      }
    }

    fun setModelReceiveShadows(layer: ModelLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.modelReceiveShadows(expression)
        } else {
          Logger.e("RNMBXModel", "Expression for modelReceiveShadows is null")
        }
      } else {
          val value = styleValue.getBoolean(VALUE_KEY)
          if (value != null) {
            layer.modelReceiveShadows(value)
          } else {
            Logger.e("RNMBXModel", "value for modelReceiveShadows is null")
          }
      }
    }

    fun setModelAmbientOcclusionIntensity(layer: ModelLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.modelAmbientOcclusionIntensity(expression)
        } else {
          Logger.e("RNMBXModel", "Expression for modelAmbientOcclusionIntensity is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.modelAmbientOcclusionIntensity(value)
          } else {
            Logger.e("RNMBXModel", "value for modelAmbientOcclusionIntensity is null")
          }
      }
    }


    fun setModelAmbientOcclusionIntensityTransition(layer: ModelLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.modelAmbientOcclusionIntensityTransition(transition);
      }
    }

    fun setModelEmissiveStrength(layer: ModelLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.modelEmissiveStrength(expression)
        } else {
          Logger.e("RNMBXModel", "Expression for modelEmissiveStrength is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.modelEmissiveStrength(value)
          } else {
            Logger.e("RNMBXModel", "value for modelEmissiveStrength is null")
          }
      }
    }


    fun setModelEmissiveStrengthTransition(layer: ModelLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.modelEmissiveStrengthTransition(transition);
      }
    }

    fun setModelRoughness(layer: ModelLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.modelRoughness(expression)
        } else {
          Logger.e("RNMBXModel", "Expression for modelRoughness is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.modelRoughness(value)
          } else {
            Logger.e("RNMBXModel", "value for modelRoughness is null")
          }
      }
    }


    fun setModelRoughnessTransition(layer: ModelLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.modelRoughnessTransition(transition);
      }
    }

    fun setModelHeightBasedEmissiveStrengthMultiplier(layer: ModelLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.modelHeightBasedEmissiveStrengthMultiplier(expression)
        } else {
          Logger.e("RNMBXModel", "Expression for modelHeightBasedEmissiveStrengthMultiplier is null")
        }
      } else {
          val value = styleValue.getFloatArray(VALUE_KEY)
          if (value != null) {
            layer.modelHeightBasedEmissiveStrengthMultiplier(value)
          } else {
            Logger.e("RNMBXModel", "value for modelHeightBasedEmissiveStrengthMultiplier is null")
          }
      }
    }


    fun setModelHeightBasedEmissiveStrengthMultiplierTransition(layer: ModelLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.modelHeightBasedEmissiveStrengthMultiplierTransition(transition);
      }
    }

    fun setModelCutoffFadeRange(layer: ModelLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.modelCutoffFadeRange(expression)
        } else {
          Logger.e("RNMBXModel", "Expression for modelCutoffFadeRange is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.modelCutoffFadeRange(value)
          } else {
            Logger.e("RNMBXModel", "value for modelCutoffFadeRange is null")
          }
      }
    }

    fun setVisibility(layer: BackgroundLayer, styleValue: RNMBXStyleValue ) {
        layer.visibility(Visibility.valueOf(styleValue.getEnumName()));
    }

    fun setBackgroundColor(layer: BackgroundLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.backgroundColor(expression)
        } else {
          Logger.e("RNMBXBackground", "Expression for backgroundColor is null")
        }
      } else {
          val value = styleValue.getInt(VALUE_KEY)
          if (value != null) {
            layer.backgroundColor(value)
          } else {
            Logger.e("RNMBXBackground", "value for backgroundColor is null")
          }
      }
    }


    fun setBackgroundColorTransition(layer: BackgroundLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.backgroundColorTransition(transition);
      }
    }

    fun setBackgroundPattern(layer: BackgroundLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        if (styleValue.isImageStringValue) {
          val value = styleValue.getImageStringValue()
          if (value != null) {
            layer.backgroundPattern(value)
          } else {
            Logger.e("RNMBXBackground", "Image for backgroundPattern is null")
          }
        } else {
          val expression = styleValue.getExpression()
          if (expression != null) {
            layer.backgroundPattern(expression)
          } else {
            Logger.e("RNMBXBackground", "Expression for backgroundPattern is null")
          }
        }
      } else {
        val value = styleValue.imageURI
        if (value != null) {
          layer.backgroundPattern(value);
        } else {
          Logger.e("RNMBXBackground", "value for backgroundPattern is null")
        }
      }
    }

    fun setBackgroundOpacity(layer: BackgroundLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.backgroundOpacity(expression)
        } else {
          Logger.e("RNMBXBackground", "Expression for backgroundOpacity is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.backgroundOpacity(value)
          } else {
            Logger.e("RNMBXBackground", "value for backgroundOpacity is null")
          }
      }
    }


    fun setBackgroundOpacityTransition(layer: BackgroundLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.backgroundOpacityTransition(transition);
      }
    }

    fun setBackgroundEmissiveStrength(layer: BackgroundLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.backgroundEmissiveStrength(expression)
        } else {
          Logger.e("RNMBXBackground", "Expression for backgroundEmissiveStrength is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.backgroundEmissiveStrength(value)
          } else {
            Logger.e("RNMBXBackground", "value for backgroundEmissiveStrength is null")
          }
      }
    }


    fun setBackgroundEmissiveStrengthTransition(layer: BackgroundLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.backgroundEmissiveStrengthTransition(transition);
      }
    }

    fun setVisibility(layer: SkyLayer, styleValue: RNMBXStyleValue ) {
        layer.visibility(Visibility.valueOf(styleValue.getEnumName()));
    }

    fun setSkyType(layer: SkyLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.skyType(expression)
        } else {
          Logger.e("RNMBXSky", "Expression for skyType is null")
        }
      } else {
          layer.skyType(SkyType.valueOf(styleValue.getEnumName()))
      }
    }

    fun setSkyAtmosphereSun(layer: SkyLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.skyAtmosphereSun(expression)
        } else {
          Logger.e("RNMBXSky", "Expression for skyAtmosphereSun is null")
        }
      } else {
          val value = styleValue.getFloatArray(VALUE_KEY)
          if (value != null) {
            layer.skyAtmosphereSun(value)
          } else {
            Logger.e("RNMBXSky", "value for skyAtmosphereSun is null")
          }
      }
    }

    fun setSkyAtmosphereSunIntensity(layer: SkyLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.skyAtmosphereSunIntensity(expression)
        } else {
          Logger.e("RNMBXSky", "Expression for skyAtmosphereSunIntensity is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.skyAtmosphereSunIntensity(value)
          } else {
            Logger.e("RNMBXSky", "value for skyAtmosphereSunIntensity is null")
          }
      }
    }

    fun setSkyGradientCenter(layer: SkyLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.skyGradientCenter(expression)
        } else {
          Logger.e("RNMBXSky", "Expression for skyGradientCenter is null")
        }
      } else {
          val value = styleValue.getFloatArray(VALUE_KEY)
          if (value != null) {
            layer.skyGradientCenter(value)
          } else {
            Logger.e("RNMBXSky", "value for skyGradientCenter is null")
          }
      }
    }

    fun setSkyGradientRadius(layer: SkyLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.skyGradientRadius(expression)
        } else {
          Logger.e("RNMBXSky", "Expression for skyGradientRadius is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.skyGradientRadius(value)
          } else {
            Logger.e("RNMBXSky", "value for skyGradientRadius is null")
          }
      }
    }

    fun setSkyGradient(layer: SkyLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.skyGradient(expression)
        } else {
          Logger.e("RNMBXSky", "Expression for skyGradient is null")
        }
      } else {
          layer.skyGradient(styleValue.getIntExpression(VALUE_KEY))
      }
    }

    fun setSkyAtmosphereHaloColor(layer: SkyLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.skyAtmosphereHaloColor(expression)
        } else {
          Logger.e("RNMBXSky", "Expression for skyAtmosphereHaloColor is null")
        }
      } else {
          val value = styleValue.getInt(VALUE_KEY)
          if (value != null) {
            layer.skyAtmosphereHaloColor(value)
          } else {
            Logger.e("RNMBXSky", "value for skyAtmosphereHaloColor is null")
          }
      }
    }

    fun setSkyAtmosphereColor(layer: SkyLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.skyAtmosphereColor(expression)
        } else {
          Logger.e("RNMBXSky", "Expression for skyAtmosphereColor is null")
        }
      } else {
          val value = styleValue.getInt(VALUE_KEY)
          if (value != null) {
            layer.skyAtmosphereColor(value)
          } else {
            Logger.e("RNMBXSky", "value for skyAtmosphereColor is null")
          }
      }
    }

    fun setSkyOpacity(layer: SkyLayer, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.skyOpacity(expression)
        } else {
          Logger.e("RNMBXSky", "Expression for skyOpacity is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.skyOpacity(value)
          } else {
            Logger.e("RNMBXSky", "value for skyOpacity is null")
          }
      }
    }


    fun setSkyOpacityTransition(layer: SkyLayer, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.skyOpacityTransition(transition);
      }
    }

    fun setAnchor(layer: Light, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.anchor(expression)
        } else {
          Logger.e("RNMBXLight", "Expression for anchor is null")
        }
      } else {
          layer.anchor(Anchor.valueOf(styleValue.getEnumName()))
      }
    }

    fun setPosition(layer: Light, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.position(expression)
        } else {
          Logger.e("RNMBXLight", "Expression for position is null")
        }
      } else {
          layer.position(styleValue.getLightPosition())
      }
    }


    fun setPositionTransition(layer: Light, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.positionTransition(transition);
      }
    }

    fun setColor(layer: Light, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.color(expression)
        } else {
          Logger.e("RNMBXLight", "Expression for color is null")
        }
      } else {
          val value = styleValue.getInt(VALUE_KEY)
          if (value != null) {
            layer.color(value)
          } else {
            Logger.e("RNMBXLight", "value for color is null")
          }
      }
    }


    fun setColorTransition(layer: Light, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.colorTransition(transition);
      }
    }

    fun setIntensity(layer: Light, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.intensity(expression)
        } else {
          Logger.e("RNMBXLight", "Expression for intensity is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.intensity(value)
          } else {
            Logger.e("RNMBXLight", "value for intensity is null")
          }
      }
    }


    fun setIntensityTransition(layer: Light, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.intensityTransition(transition);
      }
    }

    fun setRange(layer: Atmosphere, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.range(expression)
        } else {
          Logger.e("RNMBXAtmosphere", "Expression for range is null")
        }
      } else {
          val value = styleValue.getFloatArray(VALUE_KEY)
          if (value != null) {
            layer.range(value)
          } else {
            Logger.e("RNMBXAtmosphere", "value for range is null")
          }
      }
    }


    fun setRangeTransition(layer: Atmosphere, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.rangeTransition(transition);
      }
    }

    fun setColor(layer: Atmosphere, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.color(expression)
        } else {
          Logger.e("RNMBXAtmosphere", "Expression for color is null")
        }
      } else {
          val value = styleValue.getInt(VALUE_KEY)
          if (value != null) {
            layer.color(value)
          } else {
            Logger.e("RNMBXAtmosphere", "value for color is null")
          }
      }
    }


    fun setColorTransition(layer: Atmosphere, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.colorTransition(transition);
      }
    }

    fun setHighColor(layer: Atmosphere, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.highColor(expression)
        } else {
          Logger.e("RNMBXAtmosphere", "Expression for highColor is null")
        }
      } else {
          val value = styleValue.getInt(VALUE_KEY)
          if (value != null) {
            layer.highColor(value)
          } else {
            Logger.e("RNMBXAtmosphere", "value for highColor is null")
          }
      }
    }


    fun setHighColorTransition(layer: Atmosphere, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.highColorTransition(transition);
      }
    }

    fun setSpaceColor(layer: Atmosphere, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.spaceColor(expression)
        } else {
          Logger.e("RNMBXAtmosphere", "Expression for spaceColor is null")
        }
      } else {
          val value = styleValue.getInt(VALUE_KEY)
          if (value != null) {
            layer.spaceColor(value)
          } else {
            Logger.e("RNMBXAtmosphere", "value for spaceColor is null")
          }
      }
    }


    fun setSpaceColorTransition(layer: Atmosphere, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.spaceColorTransition(transition);
      }
    }

    fun setHorizonBlend(layer: Atmosphere, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.horizonBlend(expression)
        } else {
          Logger.e("RNMBXAtmosphere", "Expression for horizonBlend is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.horizonBlend(value)
          } else {
            Logger.e("RNMBXAtmosphere", "value for horizonBlend is null")
          }
      }
    }


    fun setHorizonBlendTransition(layer: Atmosphere, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.horizonBlendTransition(transition);
      }
    }

    fun setStarIntensity(layer: Atmosphere, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.starIntensity(expression)
        } else {
          Logger.e("RNMBXAtmosphere", "Expression for starIntensity is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.starIntensity(value)
          } else {
            Logger.e("RNMBXAtmosphere", "value for starIntensity is null")
          }
      }
    }


    fun setStarIntensityTransition(layer: Atmosphere, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.starIntensityTransition(transition);
      }
    }

    fun setVerticalRange(layer: Atmosphere, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.verticalRange(expression)
        } else {
          Logger.e("RNMBXAtmosphere", "Expression for verticalRange is null")
        }
      } else {
          val value = styleValue.getFloatArray(VALUE_KEY)
          if (value != null) {
            layer.verticalRange(value)
          } else {
            Logger.e("RNMBXAtmosphere", "value for verticalRange is null")
          }
      }
    }


    fun setVerticalRangeTransition(layer: Atmosphere, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.verticalRangeTransition(transition);
      }
    }

    fun setExaggeration(layer: Terrain, styleValue: RNMBXStyleValue ) {
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.exaggeration(expression)
        } else {
          Logger.e("RNMBXTerrain", "Expression for exaggeration is null")
        }
      } else {
          val value = styleValue.getDouble(VALUE_KEY)
          if (value != null) {
            layer.exaggeration(value)
          } else {
            Logger.e("RNMBXTerrain", "value for exaggeration is null")
          }
      }
    }

}
