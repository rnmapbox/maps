/**
* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
*
* Do not edit this file as changes may cause incorrect behavior and will be lost
* once the code is regenerated.
*
* @generated by codegen project: GeneratePropsJavaDelegate.js
*/

package com.facebook.react.viewmanagers;

import android.view.View;
import androidx.annotation.Nullable;
import com.facebook.react.bridge.DynamicFromObject;
import com.facebook.react.uimanager.BaseViewManagerDelegate;
import com.facebook.react.uimanager.BaseViewManagerInterface;

public class RNMBXMapViewManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNMBXMapViewManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
  public RNMBXMapViewManagerDelegate(U viewManager) {
    super(viewManager);
  }
  @Override
  public void setProperty(T view, String propName, @Nullable Object value) {
    switch (propName) {
      case "attributionEnabled":
        mViewManager.setAttributionEnabled(view, new DynamicFromObject(value));
        break;
      case "attributionPosition":
        mViewManager.setAttributionPosition(view, new DynamicFromObject(value));
        break;
      case "logoEnabled":
        mViewManager.setLogoEnabled(view, new DynamicFromObject(value));
        break;
      case "logoPosition":
        mViewManager.setLogoPosition(view, new DynamicFromObject(value));
        break;
      case "compassEnabled":
        mViewManager.setCompassEnabled(view, new DynamicFromObject(value));
        break;
      case "compassFadeWhenNorth":
        mViewManager.setCompassFadeWhenNorth(view, new DynamicFromObject(value));
        break;
      case "compassPosition":
        mViewManager.setCompassPosition(view, new DynamicFromObject(value));
        break;
      case "compassViewPosition":
        mViewManager.setCompassViewPosition(view, new DynamicFromObject(value));
        break;
      case "compassViewMargins":
        mViewManager.setCompassViewMargins(view, new DynamicFromObject(value));
        break;
      case "scaleBarEnabled":
        mViewManager.setScaleBarEnabled(view, new DynamicFromObject(value));
        break;
      case "scaleBarPosition":
        mViewManager.setScaleBarPosition(view, new DynamicFromObject(value));
        break;
      case "zoomEnabled":
        mViewManager.setZoomEnabled(view, new DynamicFromObject(value));
        break;
      case "scrollEnabled":
        mViewManager.setScrollEnabled(view, new DynamicFromObject(value));
        break;
      case "rotateEnabled":
        mViewManager.setRotateEnabled(view, new DynamicFromObject(value));
        break;
      case "pitchEnabled":
        mViewManager.setPitchEnabled(view, new DynamicFromObject(value));
        break;
      case "requestDisallowInterceptTouchEvent":
        mViewManager.setRequestDisallowInterceptTouchEvent(view, new DynamicFromObject(value));
        break;
      case "projection":
        mViewManager.setProjection(view, new DynamicFromObject(value));
        break;
      case "localizeLabels":
        mViewManager.setLocalizeLabels(view, new DynamicFromObject(value));
        break;
      case "styleURL":
        mViewManager.setStyleURL(view, new DynamicFromObject(value));
        break;
      case "gestureSettings":
        mViewManager.setGestureSettings(view, new DynamicFromObject(value));
        break;
      case "surfaceView":
        mViewManager.setSurfaceView(view, new DynamicFromObject(value));
        break;
      case "scaleBarViewMargins":
        mViewManager.setScaleBarViewMargins(view, new DynamicFromObject(value));
        break;
      case "attributionViewMargins":
        mViewManager.setAttributionViewMargins(view, new DynamicFromObject(value));
        break;
      case "attributionViewPosition":
        mViewManager.setAttributionViewPosition(view, new DynamicFromObject(value));
        break;
      case "compassImage":
        mViewManager.setCompassImage(view, new DynamicFromObject(value));
        break;
      default:
        super.setProperty(view, propName, value);
    }
  }
}
