// DO NOT MODIFY
// THIS FILE IS AUTOGENERATED

package com.mapbox.rctmgl.components.styles;

import com.mapbox.maps.extension.style.expressions.generated.Expression;
import com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
import com.mapbox.maps.extension.style.layers.generated.CircleLayer;
import com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
import com.mapbox.maps.extension.style.layers.generated.FillLayer;
import com.mapbox.maps.extension.style.layers.generated.LineLayer;
import com.mapbox.maps.extension.style.layers.generated.SkyLayer;
// import com.mapbox.maps.extension.style.layers.generated.PropertyFactory;
// import com.mapbox.maps.extension.style.layers.generated.PropertyValue;
import com.mapbox.maps.extension.style.layers.generated.RasterLayer;
import com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
import com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
import com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
// import com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
import com.mapbox.maps.extension.style.layers.properties.generated.*;
import com.mapbox.maps.extension.style.types.StyleTransition;
import com.mapbox.maps.extension.style.light.generated.Light;
import com.mapbox.maps.extension.style.light.LightPosition;
import com.mapbox.rctmgl.utils.DownloadMapImageTask;

import java.util.List;

public class RCTMGLStyleFactory {
    public static final String VALUE_KEY = "value";
    public static final String SHOULD_ADD_IMAGE_KEY = "shouldAddImage";

    public static void setFillLayerStyle(final FillLayer layer, RCTMGLStyle style) {
      List<String> styleKeys = style.getAllStyleKeys();

      if (styleKeys.size() == 0) {
        return;
      }

      for (String styleKey : styleKeys) {
        final RCTMGLStyleValue styleValue = style.getStyleValueForKey(styleKey);

        switch (styleKey) {
            case "fillSortKey":
              RCTMGLStyleFactory.setFillSortKey(layer, styleValue);
              break;
            case "visibility":
              RCTMGLStyleFactory.setVisibility(layer, styleValue);
              break;
            case "fillAntialias":
              RCTMGLStyleFactory.setFillAntialias(layer, styleValue);
              break;
            case "fillOpacity":
              RCTMGLStyleFactory.setFillOpacity(layer, styleValue);
              break;
            case "fillOpacityTransition":
              RCTMGLStyleFactory.setFillOpacityTransition(layer, styleValue);
              break;
            case "fillColor":
              RCTMGLStyleFactory.setFillColor(layer, styleValue);
              break;
            case "fillColorTransition":
              RCTMGLStyleFactory.setFillColorTransition(layer, styleValue);
              break;
            case "fillOutlineColor":
              RCTMGLStyleFactory.setFillOutlineColor(layer, styleValue);
              break;
            case "fillOutlineColorTransition":
              RCTMGLStyleFactory.setFillOutlineColorTransition(layer, styleValue);
              break;
            case "fillTranslate":
              RCTMGLStyleFactory.setFillTranslate(layer, styleValue);
              break;
            case "fillTranslateTransition":
              RCTMGLStyleFactory.setFillTranslateTransition(layer, styleValue);
              break;
            case "fillTranslateAnchor":
              RCTMGLStyleFactory.setFillTranslateAnchor(layer, styleValue);
              break;
            case "fillPattern":
              style.addImage(styleValue, new DownloadMapImageTask.OnAllImagesLoaded() {
                  @Override
                  public void onAllImagesLoaded() {
                      RCTMGLStyleFactory.setFillPattern(layer, styleValue);
                  }
              });
              break;
            case "fillPatternTransition":
              RCTMGLStyleFactory.setFillPatternTransition(layer, styleValue);
              break;
        }
      }
    }
    public static void setLineLayerStyle(final LineLayer layer, RCTMGLStyle style) {
      List<String> styleKeys = style.getAllStyleKeys();

      if (styleKeys.size() == 0) {
        return;
      }

      for (String styleKey : styleKeys) {
        final RCTMGLStyleValue styleValue = style.getStyleValueForKey(styleKey);

        switch (styleKey) {
            case "lineCap":
              RCTMGLStyleFactory.setLineCap(layer, styleValue);
              break;
            case "lineJoin":
              RCTMGLStyleFactory.setLineJoin(layer, styleValue);
              break;
            case "lineMiterLimit":
              RCTMGLStyleFactory.setLineMiterLimit(layer, styleValue);
              break;
            case "lineRoundLimit":
              RCTMGLStyleFactory.setLineRoundLimit(layer, styleValue);
              break;
            case "lineSortKey":
              RCTMGLStyleFactory.setLineSortKey(layer, styleValue);
              break;
            case "visibility":
              RCTMGLStyleFactory.setVisibility(layer, styleValue);
              break;
            case "lineOpacity":
              RCTMGLStyleFactory.setLineOpacity(layer, styleValue);
              break;
            case "lineOpacityTransition":
              RCTMGLStyleFactory.setLineOpacityTransition(layer, styleValue);
              break;
            case "lineColor":
              RCTMGLStyleFactory.setLineColor(layer, styleValue);
              break;
            case "lineColorTransition":
              RCTMGLStyleFactory.setLineColorTransition(layer, styleValue);
              break;
            case "lineTranslate":
              RCTMGLStyleFactory.setLineTranslate(layer, styleValue);
              break;
            case "lineTranslateTransition":
              RCTMGLStyleFactory.setLineTranslateTransition(layer, styleValue);
              break;
            case "lineTranslateAnchor":
              RCTMGLStyleFactory.setLineTranslateAnchor(layer, styleValue);
              break;
            case "lineWidth":
              RCTMGLStyleFactory.setLineWidth(layer, styleValue);
              break;
            case "lineWidthTransition":
              RCTMGLStyleFactory.setLineWidthTransition(layer, styleValue);
              break;
            case "lineGapWidth":
              RCTMGLStyleFactory.setLineGapWidth(layer, styleValue);
              break;
            case "lineGapWidthTransition":
              RCTMGLStyleFactory.setLineGapWidthTransition(layer, styleValue);
              break;
            case "lineOffset":
              RCTMGLStyleFactory.setLineOffset(layer, styleValue);
              break;
            case "lineOffsetTransition":
              RCTMGLStyleFactory.setLineOffsetTransition(layer, styleValue);
              break;
            case "lineBlur":
              RCTMGLStyleFactory.setLineBlur(layer, styleValue);
              break;
            case "lineBlurTransition":
              RCTMGLStyleFactory.setLineBlurTransition(layer, styleValue);
              break;
            case "lineDasharray":
              RCTMGLStyleFactory.setLineDasharray(layer, styleValue);
              break;
            case "lineDasharrayTransition":
              RCTMGLStyleFactory.setLineDasharrayTransition(layer, styleValue);
              break;
            case "linePattern":
              style.addImage(styleValue, new DownloadMapImageTask.OnAllImagesLoaded() {
                  @Override
                  public void onAllImagesLoaded() {
                      RCTMGLStyleFactory.setLinePattern(layer, styleValue);
                  }
              });
              break;
            case "linePatternTransition":
              RCTMGLStyleFactory.setLinePatternTransition(layer, styleValue);
              break;
            case "lineGradient":
              RCTMGLStyleFactory.setLineGradient(layer, styleValue);
              break;
        }
      }
    }
    public static void setSymbolLayerStyle(final SymbolLayer layer, RCTMGLStyle style) {
      List<String> styleKeys = style.getAllStyleKeys();

      if (styleKeys.size() == 0) {
        return;
      }

      for (String styleKey : styleKeys) {
        final RCTMGLStyleValue styleValue = style.getStyleValueForKey(styleKey);

        switch (styleKey) {
            case "symbolPlacement":
              RCTMGLStyleFactory.setSymbolPlacement(layer, styleValue);
              break;
            case "symbolSpacing":
              RCTMGLStyleFactory.setSymbolSpacing(layer, styleValue);
              break;
            case "symbolAvoidEdges":
              RCTMGLStyleFactory.setSymbolAvoidEdges(layer, styleValue);
              break;
            case "symbolSortKey":
              RCTMGLStyleFactory.setSymbolSortKey(layer, styleValue);
              break;
            case "symbolZOrder":
              RCTMGLStyleFactory.setSymbolZOrder(layer, styleValue);
              break;
            case "iconAllowOverlap":
              RCTMGLStyleFactory.setIconAllowOverlap(layer, styleValue);
              break;
            case "iconIgnorePlacement":
              RCTMGLStyleFactory.setIconIgnorePlacement(layer, styleValue);
              break;
            case "iconOptional":
              RCTMGLStyleFactory.setIconOptional(layer, styleValue);
              break;
            case "iconRotationAlignment":
              RCTMGLStyleFactory.setIconRotationAlignment(layer, styleValue);
              break;
            case "iconSize":
              RCTMGLStyleFactory.setIconSize(layer, styleValue);
              break;
            case "iconTextFit":
              RCTMGLStyleFactory.setIconTextFit(layer, styleValue);
              break;
            case "iconTextFitPadding":
              RCTMGLStyleFactory.setIconTextFitPadding(layer, styleValue);
              break;
            case "iconImage":
              style.addImage(styleValue, new DownloadMapImageTask.OnAllImagesLoaded() {
                  @Override
                  public void onAllImagesLoaded() {
                      RCTMGLStyleFactory.setIconImage(layer, styleValue);
                  }
              });
              break;
            case "iconRotate":
              RCTMGLStyleFactory.setIconRotate(layer, styleValue);
              break;
            case "iconPadding":
              RCTMGLStyleFactory.setIconPadding(layer, styleValue);
              break;
            case "iconKeepUpright":
              RCTMGLStyleFactory.setIconKeepUpright(layer, styleValue);
              break;
            case "iconOffset":
              RCTMGLStyleFactory.setIconOffset(layer, styleValue);
              break;
            case "iconAnchor":
              RCTMGLStyleFactory.setIconAnchor(layer, styleValue);
              break;
            case "iconPitchAlignment":
              RCTMGLStyleFactory.setIconPitchAlignment(layer, styleValue);
              break;
            case "textPitchAlignment":
              RCTMGLStyleFactory.setTextPitchAlignment(layer, styleValue);
              break;
            case "textRotationAlignment":
              RCTMGLStyleFactory.setTextRotationAlignment(layer, styleValue);
              break;
            case "textField":
              RCTMGLStyleFactory.setTextField(layer, styleValue);
              break;
            case "textFont":
              RCTMGLStyleFactory.setTextFont(layer, styleValue);
              break;
            case "textSize":
              RCTMGLStyleFactory.setTextSize(layer, styleValue);
              break;
            case "textMaxWidth":
              RCTMGLStyleFactory.setTextMaxWidth(layer, styleValue);
              break;
            case "textLineHeight":
              RCTMGLStyleFactory.setTextLineHeight(layer, styleValue);
              break;
            case "textLetterSpacing":
              RCTMGLStyleFactory.setTextLetterSpacing(layer, styleValue);
              break;
            case "textJustify":
              RCTMGLStyleFactory.setTextJustify(layer, styleValue);
              break;
            case "textRadialOffset":
              RCTMGLStyleFactory.setTextRadialOffset(layer, styleValue);
              break;
            case "textVariableAnchor":
              RCTMGLStyleFactory.setTextVariableAnchor(layer, styleValue);
              break;
            case "textAnchor":
              RCTMGLStyleFactory.setTextAnchor(layer, styleValue);
              break;
            case "textMaxAngle":
              RCTMGLStyleFactory.setTextMaxAngle(layer, styleValue);
              break;
            case "textWritingMode":
              RCTMGLStyleFactory.setTextWritingMode(layer, styleValue);
              break;
            case "textRotate":
              RCTMGLStyleFactory.setTextRotate(layer, styleValue);
              break;
            case "textPadding":
              RCTMGLStyleFactory.setTextPadding(layer, styleValue);
              break;
            case "textKeepUpright":
              RCTMGLStyleFactory.setTextKeepUpright(layer, styleValue);
              break;
            case "textTransform":
              RCTMGLStyleFactory.setTextTransform(layer, styleValue);
              break;
            case "textOffset":
              RCTMGLStyleFactory.setTextOffset(layer, styleValue);
              break;
            case "textAllowOverlap":
              RCTMGLStyleFactory.setTextAllowOverlap(layer, styleValue);
              break;
            case "textIgnorePlacement":
              RCTMGLStyleFactory.setTextIgnorePlacement(layer, styleValue);
              break;
            case "textOptional":
              RCTMGLStyleFactory.setTextOptional(layer, styleValue);
              break;
            case "visibility":
              RCTMGLStyleFactory.setVisibility(layer, styleValue);
              break;
            case "iconOpacity":
              RCTMGLStyleFactory.setIconOpacity(layer, styleValue);
              break;
            case "iconOpacityTransition":
              RCTMGLStyleFactory.setIconOpacityTransition(layer, styleValue);
              break;
            case "iconColor":
              RCTMGLStyleFactory.setIconColor(layer, styleValue);
              break;
            case "iconColorTransition":
              RCTMGLStyleFactory.setIconColorTransition(layer, styleValue);
              break;
            case "iconHaloColor":
              RCTMGLStyleFactory.setIconHaloColor(layer, styleValue);
              break;
            case "iconHaloColorTransition":
              RCTMGLStyleFactory.setIconHaloColorTransition(layer, styleValue);
              break;
            case "iconHaloWidth":
              RCTMGLStyleFactory.setIconHaloWidth(layer, styleValue);
              break;
            case "iconHaloWidthTransition":
              RCTMGLStyleFactory.setIconHaloWidthTransition(layer, styleValue);
              break;
            case "iconHaloBlur":
              RCTMGLStyleFactory.setIconHaloBlur(layer, styleValue);
              break;
            case "iconHaloBlurTransition":
              RCTMGLStyleFactory.setIconHaloBlurTransition(layer, styleValue);
              break;
            case "iconTranslate":
              RCTMGLStyleFactory.setIconTranslate(layer, styleValue);
              break;
            case "iconTranslateTransition":
              RCTMGLStyleFactory.setIconTranslateTransition(layer, styleValue);
              break;
            case "iconTranslateAnchor":
              RCTMGLStyleFactory.setIconTranslateAnchor(layer, styleValue);
              break;
            case "textOpacity":
              RCTMGLStyleFactory.setTextOpacity(layer, styleValue);
              break;
            case "textOpacityTransition":
              RCTMGLStyleFactory.setTextOpacityTransition(layer, styleValue);
              break;
            case "textColor":
              RCTMGLStyleFactory.setTextColor(layer, styleValue);
              break;
            case "textColorTransition":
              RCTMGLStyleFactory.setTextColorTransition(layer, styleValue);
              break;
            case "textHaloColor":
              RCTMGLStyleFactory.setTextHaloColor(layer, styleValue);
              break;
            case "textHaloColorTransition":
              RCTMGLStyleFactory.setTextHaloColorTransition(layer, styleValue);
              break;
            case "textHaloWidth":
              RCTMGLStyleFactory.setTextHaloWidth(layer, styleValue);
              break;
            case "textHaloWidthTransition":
              RCTMGLStyleFactory.setTextHaloWidthTransition(layer, styleValue);
              break;
            case "textHaloBlur":
              RCTMGLStyleFactory.setTextHaloBlur(layer, styleValue);
              break;
            case "textHaloBlurTransition":
              RCTMGLStyleFactory.setTextHaloBlurTransition(layer, styleValue);
              break;
            case "textTranslate":
              RCTMGLStyleFactory.setTextTranslate(layer, styleValue);
              break;
            case "textTranslateTransition":
              RCTMGLStyleFactory.setTextTranslateTransition(layer, styleValue);
              break;
            case "textTranslateAnchor":
              RCTMGLStyleFactory.setTextTranslateAnchor(layer, styleValue);
              break;
        }
      }
    }
    public static void setCircleLayerStyle(final CircleLayer layer, RCTMGLStyle style) {
      List<String> styleKeys = style.getAllStyleKeys();

      if (styleKeys.size() == 0) {
        return;
      }

      for (String styleKey : styleKeys) {
        final RCTMGLStyleValue styleValue = style.getStyleValueForKey(styleKey);

        switch (styleKey) {
            case "circleSortKey":
              RCTMGLStyleFactory.setCircleSortKey(layer, styleValue);
              break;
            case "visibility":
              RCTMGLStyleFactory.setVisibility(layer, styleValue);
              break;
            case "circleRadius":
              RCTMGLStyleFactory.setCircleRadius(layer, styleValue);
              break;
            case "circleRadiusTransition":
              RCTMGLStyleFactory.setCircleRadiusTransition(layer, styleValue);
              break;
            case "circleColor":
              RCTMGLStyleFactory.setCircleColor(layer, styleValue);
              break;
            case "circleColorTransition":
              RCTMGLStyleFactory.setCircleColorTransition(layer, styleValue);
              break;
            case "circleBlur":
              RCTMGLStyleFactory.setCircleBlur(layer, styleValue);
              break;
            case "circleBlurTransition":
              RCTMGLStyleFactory.setCircleBlurTransition(layer, styleValue);
              break;
            case "circleOpacity":
              RCTMGLStyleFactory.setCircleOpacity(layer, styleValue);
              break;
            case "circleOpacityTransition":
              RCTMGLStyleFactory.setCircleOpacityTransition(layer, styleValue);
              break;
            case "circleTranslate":
              RCTMGLStyleFactory.setCircleTranslate(layer, styleValue);
              break;
            case "circleTranslateTransition":
              RCTMGLStyleFactory.setCircleTranslateTransition(layer, styleValue);
              break;
            case "circleTranslateAnchor":
              RCTMGLStyleFactory.setCircleTranslateAnchor(layer, styleValue);
              break;
            case "circlePitchScale":
              RCTMGLStyleFactory.setCirclePitchScale(layer, styleValue);
              break;
            case "circlePitchAlignment":
              RCTMGLStyleFactory.setCirclePitchAlignment(layer, styleValue);
              break;
            case "circleStrokeWidth":
              RCTMGLStyleFactory.setCircleStrokeWidth(layer, styleValue);
              break;
            case "circleStrokeWidthTransition":
              RCTMGLStyleFactory.setCircleStrokeWidthTransition(layer, styleValue);
              break;
            case "circleStrokeColor":
              RCTMGLStyleFactory.setCircleStrokeColor(layer, styleValue);
              break;
            case "circleStrokeColorTransition":
              RCTMGLStyleFactory.setCircleStrokeColorTransition(layer, styleValue);
              break;
            case "circleStrokeOpacity":
              RCTMGLStyleFactory.setCircleStrokeOpacity(layer, styleValue);
              break;
            case "circleStrokeOpacityTransition":
              RCTMGLStyleFactory.setCircleStrokeOpacityTransition(layer, styleValue);
              break;
        }
      }
    }
    public static void setHeatmapLayerStyle(final HeatmapLayer layer, RCTMGLStyle style) {
      List<String> styleKeys = style.getAllStyleKeys();

      if (styleKeys.size() == 0) {
        return;
      }

      for (String styleKey : styleKeys) {
        final RCTMGLStyleValue styleValue = style.getStyleValueForKey(styleKey);

        switch (styleKey) {
            case "visibility":
              RCTMGLStyleFactory.setVisibility(layer, styleValue);
              break;
            case "heatmapRadius":
              RCTMGLStyleFactory.setHeatmapRadius(layer, styleValue);
              break;
            case "heatmapRadiusTransition":
              RCTMGLStyleFactory.setHeatmapRadiusTransition(layer, styleValue);
              break;
            case "heatmapWeight":
              RCTMGLStyleFactory.setHeatmapWeight(layer, styleValue);
              break;
            case "heatmapIntensity":
              RCTMGLStyleFactory.setHeatmapIntensity(layer, styleValue);
              break;
            case "heatmapIntensityTransition":
              RCTMGLStyleFactory.setHeatmapIntensityTransition(layer, styleValue);
              break;
            case "heatmapColor":
              RCTMGLStyleFactory.setHeatmapColor(layer, styleValue);
              break;
            case "heatmapOpacity":
              RCTMGLStyleFactory.setHeatmapOpacity(layer, styleValue);
              break;
            case "heatmapOpacityTransition":
              RCTMGLStyleFactory.setHeatmapOpacityTransition(layer, styleValue);
              break;
        }
      }
    }
    public static void setFillExtrusionLayerStyle(final FillExtrusionLayer layer, RCTMGLStyle style) {
      List<String> styleKeys = style.getAllStyleKeys();

      if (styleKeys.size() == 0) {
        return;
      }

      for (String styleKey : styleKeys) {
        final RCTMGLStyleValue styleValue = style.getStyleValueForKey(styleKey);

        switch (styleKey) {
            case "visibility":
              RCTMGLStyleFactory.setVisibility(layer, styleValue);
              break;
            case "fillExtrusionOpacity":
              RCTMGLStyleFactory.setFillExtrusionOpacity(layer, styleValue);
              break;
            case "fillExtrusionOpacityTransition":
              RCTMGLStyleFactory.setFillExtrusionOpacityTransition(layer, styleValue);
              break;
            case "fillExtrusionColor":
              RCTMGLStyleFactory.setFillExtrusionColor(layer, styleValue);
              break;
            case "fillExtrusionColorTransition":
              RCTMGLStyleFactory.setFillExtrusionColorTransition(layer, styleValue);
              break;
            case "fillExtrusionTranslate":
              RCTMGLStyleFactory.setFillExtrusionTranslate(layer, styleValue);
              break;
            case "fillExtrusionTranslateTransition":
              RCTMGLStyleFactory.setFillExtrusionTranslateTransition(layer, styleValue);
              break;
            case "fillExtrusionTranslateAnchor":
              RCTMGLStyleFactory.setFillExtrusionTranslateAnchor(layer, styleValue);
              break;
            case "fillExtrusionPattern":
              style.addImage(styleValue, new DownloadMapImageTask.OnAllImagesLoaded() {
                  @Override
                  public void onAllImagesLoaded() {
                      RCTMGLStyleFactory.setFillExtrusionPattern(layer, styleValue);
                  }
              });
              break;
            case "fillExtrusionPatternTransition":
              RCTMGLStyleFactory.setFillExtrusionPatternTransition(layer, styleValue);
              break;
            case "fillExtrusionHeight":
              RCTMGLStyleFactory.setFillExtrusionHeight(layer, styleValue);
              break;
            case "fillExtrusionHeightTransition":
              RCTMGLStyleFactory.setFillExtrusionHeightTransition(layer, styleValue);
              break;
            case "fillExtrusionBase":
              RCTMGLStyleFactory.setFillExtrusionBase(layer, styleValue);
              break;
            case "fillExtrusionBaseTransition":
              RCTMGLStyleFactory.setFillExtrusionBaseTransition(layer, styleValue);
              break;
            case "fillExtrusionVerticalGradient":
              RCTMGLStyleFactory.setFillExtrusionVerticalGradient(layer, styleValue);
              break;
        }
      }
    }
    public static void setRasterLayerStyle(final RasterLayer layer, RCTMGLStyle style) {
      List<String> styleKeys = style.getAllStyleKeys();

      if (styleKeys.size() == 0) {
        return;
      }

      for (String styleKey : styleKeys) {
        final RCTMGLStyleValue styleValue = style.getStyleValueForKey(styleKey);

        switch (styleKey) {
            case "visibility":
              RCTMGLStyleFactory.setVisibility(layer, styleValue);
              break;
            case "rasterOpacity":
              RCTMGLStyleFactory.setRasterOpacity(layer, styleValue);
              break;
            case "rasterOpacityTransition":
              RCTMGLStyleFactory.setRasterOpacityTransition(layer, styleValue);
              break;
            case "rasterHueRotate":
              RCTMGLStyleFactory.setRasterHueRotate(layer, styleValue);
              break;
            case "rasterHueRotateTransition":
              RCTMGLStyleFactory.setRasterHueRotateTransition(layer, styleValue);
              break;
            case "rasterBrightnessMin":
              RCTMGLStyleFactory.setRasterBrightnessMin(layer, styleValue);
              break;
            case "rasterBrightnessMinTransition":
              RCTMGLStyleFactory.setRasterBrightnessMinTransition(layer, styleValue);
              break;
            case "rasterBrightnessMax":
              RCTMGLStyleFactory.setRasterBrightnessMax(layer, styleValue);
              break;
            case "rasterBrightnessMaxTransition":
              RCTMGLStyleFactory.setRasterBrightnessMaxTransition(layer, styleValue);
              break;
            case "rasterSaturation":
              RCTMGLStyleFactory.setRasterSaturation(layer, styleValue);
              break;
            case "rasterSaturationTransition":
              RCTMGLStyleFactory.setRasterSaturationTransition(layer, styleValue);
              break;
            case "rasterContrast":
              RCTMGLStyleFactory.setRasterContrast(layer, styleValue);
              break;
            case "rasterContrastTransition":
              RCTMGLStyleFactory.setRasterContrastTransition(layer, styleValue);
              break;
            case "rasterResampling":
              RCTMGLStyleFactory.setRasterResampling(layer, styleValue);
              break;
            case "rasterFadeDuration":
              RCTMGLStyleFactory.setRasterFadeDuration(layer, styleValue);
              break;
        }
      }
    }
    public static void setHillshadeLayerStyle(final HillshadeLayer layer, RCTMGLStyle style) {
      List<String> styleKeys = style.getAllStyleKeys();

      if (styleKeys.size() == 0) {
        return;
      }

      for (String styleKey : styleKeys) {
        final RCTMGLStyleValue styleValue = style.getStyleValueForKey(styleKey);

        switch (styleKey) {
            case "visibility":
              RCTMGLStyleFactory.setVisibility(layer, styleValue);
              break;
            case "hillshadeIlluminationDirection":
              RCTMGLStyleFactory.setHillshadeIlluminationDirection(layer, styleValue);
              break;
            case "hillshadeIlluminationAnchor":
              RCTMGLStyleFactory.setHillshadeIlluminationAnchor(layer, styleValue);
              break;
            case "hillshadeExaggeration":
              RCTMGLStyleFactory.setHillshadeExaggeration(layer, styleValue);
              break;
            case "hillshadeExaggerationTransition":
              RCTMGLStyleFactory.setHillshadeExaggerationTransition(layer, styleValue);
              break;
            case "hillshadeShadowColor":
              RCTMGLStyleFactory.setHillshadeShadowColor(layer, styleValue);
              break;
            case "hillshadeShadowColorTransition":
              RCTMGLStyleFactory.setHillshadeShadowColorTransition(layer, styleValue);
              break;
            case "hillshadeHighlightColor":
              RCTMGLStyleFactory.setHillshadeHighlightColor(layer, styleValue);
              break;
            case "hillshadeHighlightColorTransition":
              RCTMGLStyleFactory.setHillshadeHighlightColorTransition(layer, styleValue);
              break;
            case "hillshadeAccentColor":
              RCTMGLStyleFactory.setHillshadeAccentColor(layer, styleValue);
              break;
            case "hillshadeAccentColorTransition":
              RCTMGLStyleFactory.setHillshadeAccentColorTransition(layer, styleValue);
              break;
        }
      }
    }
    public static void setBackgroundLayerStyle(final BackgroundLayer layer, RCTMGLStyle style) {
      List<String> styleKeys = style.getAllStyleKeys();

      if (styleKeys.size() == 0) {
        return;
      }

      for (String styleKey : styleKeys) {
        final RCTMGLStyleValue styleValue = style.getStyleValueForKey(styleKey);

        switch (styleKey) {
            case "visibility":
              RCTMGLStyleFactory.setVisibility(layer, styleValue);
              break;
            case "backgroundColor":
              RCTMGLStyleFactory.setBackgroundColor(layer, styleValue);
              break;
            case "backgroundColorTransition":
              RCTMGLStyleFactory.setBackgroundColorTransition(layer, styleValue);
              break;
            case "backgroundPattern":
              style.addImage(styleValue, new DownloadMapImageTask.OnAllImagesLoaded() {
                  @Override
                  public void onAllImagesLoaded() {
                      RCTMGLStyleFactory.setBackgroundPattern(layer, styleValue);
                  }
              });
              break;
            case "backgroundPatternTransition":
              RCTMGLStyleFactory.setBackgroundPatternTransition(layer, styleValue);
              break;
            case "backgroundOpacity":
              RCTMGLStyleFactory.setBackgroundOpacity(layer, styleValue);
              break;
            case "backgroundOpacityTransition":
              RCTMGLStyleFactory.setBackgroundOpacityTransition(layer, styleValue);
              break;
        }
      }
    }
    public static void setSkyLayerStyle(final SkyLayer layer, RCTMGLStyle style) {
      List<String> styleKeys = style.getAllStyleKeys();

      if (styleKeys.size() == 0) {
        return;
      }

      for (String styleKey : styleKeys) {
        final RCTMGLStyleValue styleValue = style.getStyleValueForKey(styleKey);

        switch (styleKey) {
            case "visibility":
              RCTMGLStyleFactory.setVisibility(layer, styleValue);
              break;
            case "skyType":
              RCTMGLStyleFactory.setSkyType(layer, styleValue);
              break;
            case "skyAtmosphereSun":
              RCTMGLStyleFactory.setSkyAtmosphereSun(layer, styleValue);
              break;
            case "skyAtmosphereSunIntensity":
              RCTMGLStyleFactory.setSkyAtmosphereSunIntensity(layer, styleValue);
              break;
            case "skyGradientCenter":
              RCTMGLStyleFactory.setSkyGradientCenter(layer, styleValue);
              break;
            case "skyGradientRadius":
              RCTMGLStyleFactory.setSkyGradientRadius(layer, styleValue);
              break;
            case "skyGradient":
              RCTMGLStyleFactory.setSkyGradient(layer, styleValue);
              break;
            case "skyAtmosphereHaloColor":
              RCTMGLStyleFactory.setSkyAtmosphereHaloColor(layer, styleValue);
              break;
            case "skyAtmosphereColor":
              RCTMGLStyleFactory.setSkyAtmosphereColor(layer, styleValue);
              break;
            case "skyOpacity":
              RCTMGLStyleFactory.setSkyOpacity(layer, styleValue);
              break;
            case "skyOpacityTransition":
              RCTMGLStyleFactory.setSkyOpacityTransition(layer, styleValue);
              break;
        }
      }
    }
    public static void setLightLayerStyle(final Light layer, RCTMGLStyle style) {
      List<String> styleKeys = style.getAllStyleKeys();

      if (styleKeys.size() == 0) {
        return;
      }

      for (String styleKey : styleKeys) {
        final RCTMGLStyleValue styleValue = style.getStyleValueForKey(styleKey);

        switch (styleKey) {
            case "anchor":
              RCTMGLStyleFactory.setAnchor(layer, styleValue);
              break;
            case "position":
              RCTMGLStyleFactory.setPosition(layer, styleValue);
              break;
            case "positionTransition":
              RCTMGLStyleFactory.setPositionTransition(layer, styleValue);
              break;
            case "color":
              RCTMGLStyleFactory.setColor(layer, styleValue);
              break;
            case "colorTransition":
              RCTMGLStyleFactory.setColorTransition(layer, styleValue);
              break;
            case "intensity":
              RCTMGLStyleFactory.setIntensity(layer, styleValue);
              break;
            case "intensityTransition":
              RCTMGLStyleFactory.setIntensityTransition(layer, styleValue);
              break;
        }
      }
    }

    public static void setFillSortKey(FillLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.fillSortKey(styleValue.getExpression());
      } else {
          layer.fillSortKey(styleValue.getFloat(VALUE_KEY));
      }
    }

    public static void setVisibility(FillLayer layer, RCTMGLStyleValue styleValue) {
        layer.visibility(Visibility.valueOf(styleValue.getEnumName()));
    }

    public static void setFillAntialias(FillLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.fillAntialias(styleValue.getExpression());
      } else {
          layer.fillAntialias(styleValue.getBoolean(VALUE_KEY));
      }
    }

    public static void setFillOpacity(FillLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.fillOpacity(styleValue.getExpression());
      } else {
          layer.fillOpacity(styleValue.getFloat(VALUE_KEY));
      }
    }


    public static void setFillOpacityTransition(FillLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.fillOpacityTransition(transition);
      }
    }

    public static void setFillColor(FillLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.fillColor(styleValue.getExpression());
      } else {
          layer.fillColor(styleValue.getInt(VALUE_KEY));
      }
    }


    public static void setFillColorTransition(FillLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.fillColorTransition(transition);
      }
    }

    public static void setFillOutlineColor(FillLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.fillOutlineColor(styleValue.getExpression());
      } else {
          layer.fillOutlineColor(styleValue.getInt(VALUE_KEY));
      }
    }


    public static void setFillOutlineColorTransition(FillLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.fillOutlineColorTransition(transition);
      }
    }

    public static void setFillTranslate(FillLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.fillTranslate(styleValue.getExpression());
      } else {
          layer.fillTranslate(styleValue.getFloatArray(VALUE_KEY));
      }
    }


    public static void setFillTranslateTransition(FillLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.fillTranslateTransition(transition);
      }
    }

    public static void setFillTranslateAnchor(FillLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.fillTranslateAnchor(styleValue.getExpression());
      } else {
          layer.fillTranslateAnchor(FillTranslateAnchor.valueOf(styleValue.getEnumName()));
      }
    }

    public static void setFillPattern(FillLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        if (styleValue.isImageStringValue()) {
          layer.fillPattern(styleValue.getImageStringValue());
        } else {
          layer.fillPattern(styleValue.getExpression());
        }
      } else {
        layer.fillPattern(styleValue.getImageURI());
      }
    }


    public static void setFillPatternTransition(FillLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.fillPatternTransition(transition);
      }
    }

    public static void setLineCap(LineLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.lineCap(styleValue.getExpression());
      } else {
          layer.lineCap(LineCap.valueOf(styleValue.getEnumName()));
      }
    }

    public static void setLineJoin(LineLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.lineJoin(styleValue.getExpression());
      } else {
          layer.lineJoin(LineJoin.valueOf(styleValue.getEnumName()));
      }
    }

    public static void setLineMiterLimit(LineLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.lineMiterLimit(styleValue.getExpression());
      } else {
          layer.lineMiterLimit(styleValue.getFloat(VALUE_KEY));
      }
    }

    public static void setLineRoundLimit(LineLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.lineRoundLimit(styleValue.getExpression());
      } else {
          layer.lineRoundLimit(styleValue.getFloat(VALUE_KEY));
      }
    }

    public static void setLineSortKey(LineLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.lineSortKey(styleValue.getExpression());
      } else {
          layer.lineSortKey(styleValue.getFloat(VALUE_KEY));
      }
    }

    public static void setVisibility(LineLayer layer, RCTMGLStyleValue styleValue) {
        layer.visibility(Visibility.valueOf(styleValue.getEnumName()));
    }

    public static void setLineOpacity(LineLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.lineOpacity(styleValue.getExpression());
      } else {
          layer.lineOpacity(styleValue.getFloat(VALUE_KEY));
      }
    }


    public static void setLineOpacityTransition(LineLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.lineOpacityTransition(transition);
      }
    }

    public static void setLineColor(LineLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.lineColor(styleValue.getExpression());
      } else {
          layer.lineColor(styleValue.getInt(VALUE_KEY));
      }
    }


    public static void setLineColorTransition(LineLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.lineColorTransition(transition);
      }
    }

    public static void setLineTranslate(LineLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.lineTranslate(styleValue.getExpression());
      } else {
          layer.lineTranslate(styleValue.getFloatArray(VALUE_KEY));
      }
    }


    public static void setLineTranslateTransition(LineLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.lineTranslateTransition(transition);
      }
    }

    public static void setLineTranslateAnchor(LineLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.lineTranslateAnchor(styleValue.getExpression());
      } else {
          layer.lineTranslateAnchor(LineTranslateAnchor.valueOf(styleValue.getEnumName()));
      }
    }

    public static void setLineWidth(LineLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.lineWidth(styleValue.getExpression());
      } else {
          layer.lineWidth(styleValue.getFloat(VALUE_KEY));
      }
    }


    public static void setLineWidthTransition(LineLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.lineWidthTransition(transition);
      }
    }

    public static void setLineGapWidth(LineLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.lineGapWidth(styleValue.getExpression());
      } else {
          layer.lineGapWidth(styleValue.getFloat(VALUE_KEY));
      }
    }


    public static void setLineGapWidthTransition(LineLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.lineGapWidthTransition(transition);
      }
    }

    public static void setLineOffset(LineLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.lineOffset(styleValue.getExpression());
      } else {
          layer.lineOffset(styleValue.getFloat(VALUE_KEY));
      }
    }


    public static void setLineOffsetTransition(LineLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.lineOffsetTransition(transition);
      }
    }

    public static void setLineBlur(LineLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.lineBlur(styleValue.getExpression());
      } else {
          layer.lineBlur(styleValue.getFloat(VALUE_KEY));
      }
    }


    public static void setLineBlurTransition(LineLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.lineBlurTransition(transition);
      }
    }

    public static void setLineDasharray(LineLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.lineDasharray(styleValue.getExpression());
      } else {
          layer.lineDasharray(styleValue.getFloatArray(VALUE_KEY));
      }
    }


    public static void setLineDasharrayTransition(LineLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.lineDasharrayTransition(transition);
      }
    }

    public static void setLinePattern(LineLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        if (styleValue.isImageStringValue()) {
          layer.linePattern(styleValue.getImageStringValue());
        } else {
          layer.linePattern(styleValue.getExpression());
        }
      } else {
        layer.linePattern(styleValue.getImageURI());
      }
    }


    public static void setLinePatternTransition(LineLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.linePatternTransition(transition);
      }
    }

    public static void setLineGradient(LineLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.lineGradient(styleValue.getExpression());
      } else {
          layer.lineGradient(styleValue.getIntExpression(VALUE_KEY));
      }
    }

    public static void setSymbolPlacement(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.symbolPlacement(styleValue.getExpression());
      } else {
          layer.symbolPlacement(SymbolPlacement.valueOf(styleValue.getEnumName()));
      }
    }

    public static void setSymbolSpacing(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.symbolSpacing(styleValue.getExpression());
      } else {
          layer.symbolSpacing(styleValue.getFloat(VALUE_KEY));
      }
    }

    public static void setSymbolAvoidEdges(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.symbolAvoidEdges(styleValue.getExpression());
      } else {
          layer.symbolAvoidEdges(styleValue.getBoolean(VALUE_KEY));
      }
    }

    public static void setSymbolSortKey(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.symbolSortKey(styleValue.getExpression());
      } else {
          layer.symbolSortKey(styleValue.getFloat(VALUE_KEY));
      }
    }

    public static void setSymbolZOrder(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.symbolZOrder(styleValue.getExpression());
      } else {
          layer.symbolZOrder(SymbolZOrder.valueOf(styleValue.getEnumName()));
      }
    }

    public static void setIconAllowOverlap(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.iconAllowOverlap(styleValue.getExpression());
      } else {
          layer.iconAllowOverlap(styleValue.getBoolean(VALUE_KEY));
      }
    }

    public static void setIconIgnorePlacement(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.iconIgnorePlacement(styleValue.getExpression());
      } else {
          layer.iconIgnorePlacement(styleValue.getBoolean(VALUE_KEY));
      }
    }

    public static void setIconOptional(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.iconOptional(styleValue.getExpression());
      } else {
          layer.iconOptional(styleValue.getBoolean(VALUE_KEY));
      }
    }

    public static void setIconRotationAlignment(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.iconRotationAlignment(styleValue.getExpression());
      } else {
          layer.iconRotationAlignment(IconRotationAlignment.valueOf(styleValue.getEnumName()));
      }
    }

    public static void setIconSize(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.iconSize(styleValue.getExpression());
      } else {
          layer.iconSize(styleValue.getFloat(VALUE_KEY));
      }
    }

    public static void setIconTextFit(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.iconTextFit(styleValue.getExpression());
      } else {
          layer.iconTextFit(IconTextFit.valueOf(styleValue.getEnumName()));
      }
    }

    public static void setIconTextFitPadding(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.iconTextFitPadding(styleValue.getExpression());
      } else {
          layer.iconTextFitPadding(styleValue.getFloatArray(VALUE_KEY));
      }
    }

    public static void setIconImage(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        if (styleValue.isImageStringValue()) {
          layer.iconImage(styleValue.getImageStringValue());
        } else {
          layer.iconImage(styleValue.getExpression());
        }
      } else {
        layer.iconImage(styleValue.getImageURI());
      }
    }

    public static void setIconRotate(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.iconRotate(styleValue.getExpression());
      } else {
          layer.iconRotate(styleValue.getFloat(VALUE_KEY));
      }
    }

    public static void setIconPadding(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.iconPadding(styleValue.getExpression());
      } else {
          layer.iconPadding(styleValue.getFloat(VALUE_KEY));
      }
    }

    public static void setIconKeepUpright(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.iconKeepUpright(styleValue.getExpression());
      } else {
          layer.iconKeepUpright(styleValue.getBoolean(VALUE_KEY));
      }
    }

    public static void setIconOffset(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.iconOffset(styleValue.getExpression());
      } else {
          layer.iconOffset(styleValue.getFloatArray(VALUE_KEY));
      }
    }

    public static void setIconAnchor(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.iconAnchor(styleValue.getExpression());
      } else {
          layer.iconAnchor(IconAnchor.valueOf(styleValue.getEnumName()));
      }
    }

    public static void setIconPitchAlignment(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.iconPitchAlignment(styleValue.getExpression());
      } else {
          layer.iconPitchAlignment(IconPitchAlignment.valueOf(styleValue.getEnumName()));
      }
    }

    public static void setTextPitchAlignment(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.textPitchAlignment(styleValue.getExpression());
      } else {
          layer.textPitchAlignment(TextPitchAlignment.valueOf(styleValue.getEnumName()));
      }
    }

    public static void setTextRotationAlignment(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.textRotationAlignment(styleValue.getExpression());
      } else {
          layer.textRotationAlignment(TextRotationAlignment.valueOf(styleValue.getEnumName()));
      }
    }

    public static void setTextField(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.textField(styleValue.getExpression());
      } else {
          layer.textField(styleValue.getString(VALUE_KEY));
      }
    }

    public static void setTextFont(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.textFont(styleValue.getExpression());
      } else {
          layer.textFont(styleValue.getStringArray(VALUE_KEY));
      }
    }

    public static void setTextSize(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.textSize(styleValue.getExpression());
      } else {
          layer.textSize(styleValue.getFloat(VALUE_KEY));
      }
    }

    public static void setTextMaxWidth(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.textMaxWidth(styleValue.getExpression());
      } else {
          layer.textMaxWidth(styleValue.getFloat(VALUE_KEY));
      }
    }

    public static void setTextLineHeight(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.textLineHeight(styleValue.getExpression());
      } else {
          layer.textLineHeight(styleValue.getFloat(VALUE_KEY));
      }
    }

    public static void setTextLetterSpacing(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.textLetterSpacing(styleValue.getExpression());
      } else {
          layer.textLetterSpacing(styleValue.getFloat(VALUE_KEY));
      }
    }

    public static void setTextJustify(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.textJustify(styleValue.getExpression());
      } else {
          layer.textJustify(TextJustify.valueOf(styleValue.getEnumName()));
      }
    }

    public static void setTextRadialOffset(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.textRadialOffset(styleValue.getExpression());
      } else {
          layer.textRadialOffset(styleValue.getFloat(VALUE_KEY));
      }
    }

    public static void setTextVariableAnchor(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.textVariableAnchor(styleValue.getExpression());
      } else {
          layer.textVariableAnchor(styleValue.getStringArray(VALUE_KEY));
      }
    }

    public static void setTextAnchor(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.textAnchor(styleValue.getExpression());
      } else {
          layer.textAnchor(TextAnchor.valueOf(styleValue.getEnumName()));
      }
    }

    public static void setTextMaxAngle(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.textMaxAngle(styleValue.getExpression());
      } else {
          layer.textMaxAngle(styleValue.getFloat(VALUE_KEY));
      }
    }

    public static void setTextWritingMode(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.textWritingMode(styleValue.getExpression());
      } else {
          layer.textWritingMode(styleValue.getStringArray(VALUE_KEY));
      }
    }

    public static void setTextRotate(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.textRotate(styleValue.getExpression());
      } else {
          layer.textRotate(styleValue.getFloat(VALUE_KEY));
      }
    }

    public static void setTextPadding(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.textPadding(styleValue.getExpression());
      } else {
          layer.textPadding(styleValue.getFloat(VALUE_KEY));
      }
    }

    public static void setTextKeepUpright(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.textKeepUpright(styleValue.getExpression());
      } else {
          layer.textKeepUpright(styleValue.getBoolean(VALUE_KEY));
      }
    }

    public static void setTextTransform(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.textTransform(styleValue.getExpression());
      } else {
          layer.textTransform(TextTransform.valueOf(styleValue.getEnumName()));
      }
    }

    public static void setTextOffset(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.textOffset(styleValue.getExpression());
      } else {
          layer.textOffset(styleValue.getFloatArray(VALUE_KEY));
      }
    }

    public static void setTextAllowOverlap(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.textAllowOverlap(styleValue.getExpression());
      } else {
          layer.textAllowOverlap(styleValue.getBoolean(VALUE_KEY));
      }
    }

    public static void setTextIgnorePlacement(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.textIgnorePlacement(styleValue.getExpression());
      } else {
          layer.textIgnorePlacement(styleValue.getBoolean(VALUE_KEY));
      }
    }

    public static void setTextOptional(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.textOptional(styleValue.getExpression());
      } else {
          layer.textOptional(styleValue.getBoolean(VALUE_KEY));
      }
    }

    public static void setVisibility(SymbolLayer layer, RCTMGLStyleValue styleValue) {
        layer.visibility(Visibility.valueOf(styleValue.getEnumName()));
    }

    public static void setIconOpacity(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.iconOpacity(styleValue.getExpression());
      } else {
          layer.iconOpacity(styleValue.getFloat(VALUE_KEY));
      }
    }


    public static void setIconOpacityTransition(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.iconOpacityTransition(transition);
      }
    }

    public static void setIconColor(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.iconColor(styleValue.getExpression());
      } else {
          layer.iconColor(styleValue.getInt(VALUE_KEY));
      }
    }


    public static void setIconColorTransition(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.iconColorTransition(transition);
      }
    }

    public static void setIconHaloColor(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.iconHaloColor(styleValue.getExpression());
      } else {
          layer.iconHaloColor(styleValue.getInt(VALUE_KEY));
      }
    }


    public static void setIconHaloColorTransition(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.iconHaloColorTransition(transition);
      }
    }

    public static void setIconHaloWidth(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.iconHaloWidth(styleValue.getExpression());
      } else {
          layer.iconHaloWidth(styleValue.getFloat(VALUE_KEY));
      }
    }


    public static void setIconHaloWidthTransition(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.iconHaloWidthTransition(transition);
      }
    }

    public static void setIconHaloBlur(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.iconHaloBlur(styleValue.getExpression());
      } else {
          layer.iconHaloBlur(styleValue.getFloat(VALUE_KEY));
      }
    }


    public static void setIconHaloBlurTransition(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.iconHaloBlurTransition(transition);
      }
    }

    public static void setIconTranslate(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.iconTranslate(styleValue.getExpression());
      } else {
          layer.iconTranslate(styleValue.getFloatArray(VALUE_KEY));
      }
    }


    public static void setIconTranslateTransition(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.iconTranslateTransition(transition);
      }
    }

    public static void setIconTranslateAnchor(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.iconTranslateAnchor(styleValue.getExpression());
      } else {
          layer.iconTranslateAnchor(IconTranslateAnchor.valueOf(styleValue.getEnumName()));
      }
    }

    public static void setTextOpacity(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.textOpacity(styleValue.getExpression());
      } else {
          layer.textOpacity(styleValue.getFloat(VALUE_KEY));
      }
    }


    public static void setTextOpacityTransition(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.textOpacityTransition(transition);
      }
    }

    public static void setTextColor(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.textColor(styleValue.getExpression());
      } else {
          layer.textColor(styleValue.getInt(VALUE_KEY));
      }
    }


    public static void setTextColorTransition(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.textColorTransition(transition);
      }
    }

    public static void setTextHaloColor(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.textHaloColor(styleValue.getExpression());
      } else {
          layer.textHaloColor(styleValue.getInt(VALUE_KEY));
      }
    }


    public static void setTextHaloColorTransition(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.textHaloColorTransition(transition);
      }
    }

    public static void setTextHaloWidth(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.textHaloWidth(styleValue.getExpression());
      } else {
          layer.textHaloWidth(styleValue.getFloat(VALUE_KEY));
      }
    }


    public static void setTextHaloWidthTransition(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.textHaloWidthTransition(transition);
      }
    }

    public static void setTextHaloBlur(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.textHaloBlur(styleValue.getExpression());
      } else {
          layer.textHaloBlur(styleValue.getFloat(VALUE_KEY));
      }
    }


    public static void setTextHaloBlurTransition(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.textHaloBlurTransition(transition);
      }
    }

    public static void setTextTranslate(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.textTranslate(styleValue.getExpression());
      } else {
          layer.textTranslate(styleValue.getFloatArray(VALUE_KEY));
      }
    }


    public static void setTextTranslateTransition(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.textTranslateTransition(transition);
      }
    }

    public static void setTextTranslateAnchor(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.textTranslateAnchor(styleValue.getExpression());
      } else {
          layer.textTranslateAnchor(TextTranslateAnchor.valueOf(styleValue.getEnumName()));
      }
    }

    public static void setCircleSortKey(CircleLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.circleSortKey(styleValue.getExpression());
      } else {
          layer.circleSortKey(styleValue.getFloat(VALUE_KEY));
      }
    }

    public static void setVisibility(CircleLayer layer, RCTMGLStyleValue styleValue) {
        layer.visibility(Visibility.valueOf(styleValue.getEnumName()));
    }

    public static void setCircleRadius(CircleLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.circleRadius(styleValue.getExpression());
      } else {
          layer.circleRadius(styleValue.getFloat(VALUE_KEY));
      }
    }


    public static void setCircleRadiusTransition(CircleLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.circleRadiusTransition(transition);
      }
    }

    public static void setCircleColor(CircleLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.circleColor(styleValue.getExpression());
      } else {
          layer.circleColor(styleValue.getInt(VALUE_KEY));
      }
    }


    public static void setCircleColorTransition(CircleLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.circleColorTransition(transition);
      }
    }

    public static void setCircleBlur(CircleLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.circleBlur(styleValue.getExpression());
      } else {
          layer.circleBlur(styleValue.getFloat(VALUE_KEY));
      }
    }


    public static void setCircleBlurTransition(CircleLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.circleBlurTransition(transition);
      }
    }

    public static void setCircleOpacity(CircleLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.circleOpacity(styleValue.getExpression());
      } else {
          layer.circleOpacity(styleValue.getFloat(VALUE_KEY));
      }
    }


    public static void setCircleOpacityTransition(CircleLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.circleOpacityTransition(transition);
      }
    }

    public static void setCircleTranslate(CircleLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.circleTranslate(styleValue.getExpression());
      } else {
          layer.circleTranslate(styleValue.getFloatArray(VALUE_KEY));
      }
    }


    public static void setCircleTranslateTransition(CircleLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.circleTranslateTransition(transition);
      }
    }

    public static void setCircleTranslateAnchor(CircleLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.circleTranslateAnchor(styleValue.getExpression());
      } else {
          layer.circleTranslateAnchor(CircleTranslateAnchor.valueOf(styleValue.getEnumName()));
      }
    }

    public static void setCirclePitchScale(CircleLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.circlePitchScale(styleValue.getExpression());
      } else {
          layer.circlePitchScale(CirclePitchScale.valueOf(styleValue.getEnumName()));
      }
    }

    public static void setCirclePitchAlignment(CircleLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.circlePitchAlignment(styleValue.getExpression());
      } else {
          layer.circlePitchAlignment(CirclePitchAlignment.valueOf(styleValue.getEnumName()));
      }
    }

    public static void setCircleStrokeWidth(CircleLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.circleStrokeWidth(styleValue.getExpression());
      } else {
          layer.circleStrokeWidth(styleValue.getFloat(VALUE_KEY));
      }
    }


    public static void setCircleStrokeWidthTransition(CircleLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.circleStrokeWidthTransition(transition);
      }
    }

    public static void setCircleStrokeColor(CircleLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.circleStrokeColor(styleValue.getExpression());
      } else {
          layer.circleStrokeColor(styleValue.getInt(VALUE_KEY));
      }
    }


    public static void setCircleStrokeColorTransition(CircleLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.circleStrokeColorTransition(transition);
      }
    }

    public static void setCircleStrokeOpacity(CircleLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.circleStrokeOpacity(styleValue.getExpression());
      } else {
          layer.circleStrokeOpacity(styleValue.getFloat(VALUE_KEY));
      }
    }


    public static void setCircleStrokeOpacityTransition(CircleLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.circleStrokeOpacityTransition(transition);
      }
    }

    public static void setVisibility(HeatmapLayer layer, RCTMGLStyleValue styleValue) {
        layer.visibility(Visibility.valueOf(styleValue.getEnumName()));
    }

    public static void setHeatmapRadius(HeatmapLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.heatmapRadius(styleValue.getExpression());
      } else {
          layer.heatmapRadius(styleValue.getFloat(VALUE_KEY));
      }
    }


    public static void setHeatmapRadiusTransition(HeatmapLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.heatmapRadiusTransition(transition);
      }
    }

    public static void setHeatmapWeight(HeatmapLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.heatmapWeight(styleValue.getExpression());
      } else {
          layer.heatmapWeight(styleValue.getFloat(VALUE_KEY));
      }
    }

    public static void setHeatmapIntensity(HeatmapLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.heatmapIntensity(styleValue.getExpression());
      } else {
          layer.heatmapIntensity(styleValue.getFloat(VALUE_KEY));
      }
    }


    public static void setHeatmapIntensityTransition(HeatmapLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.heatmapIntensityTransition(transition);
      }
    }

    public static void setHeatmapColor(HeatmapLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.heatmapColor(styleValue.getExpression());
      } else {
          layer.heatmapColor(styleValue.getIntExpression(VALUE_KEY));
      }
    }

    public static void setHeatmapOpacity(HeatmapLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.heatmapOpacity(styleValue.getExpression());
      } else {
          layer.heatmapOpacity(styleValue.getFloat(VALUE_KEY));
      }
    }


    public static void setHeatmapOpacityTransition(HeatmapLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.heatmapOpacityTransition(transition);
      }
    }

    public static void setVisibility(FillExtrusionLayer layer, RCTMGLStyleValue styleValue) {
        layer.visibility(Visibility.valueOf(styleValue.getEnumName()));
    }

    public static void setFillExtrusionOpacity(FillExtrusionLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.fillExtrusionOpacity(styleValue.getExpression());
      } else {
          layer.fillExtrusionOpacity(styleValue.getFloat(VALUE_KEY));
      }
    }


    public static void setFillExtrusionOpacityTransition(FillExtrusionLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.fillExtrusionOpacityTransition(transition);
      }
    }

    public static void setFillExtrusionColor(FillExtrusionLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.fillExtrusionColor(styleValue.getExpression());
      } else {
          layer.fillExtrusionColor(styleValue.getInt(VALUE_KEY));
      }
    }


    public static void setFillExtrusionColorTransition(FillExtrusionLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.fillExtrusionColorTransition(transition);
      }
    }

    public static void setFillExtrusionTranslate(FillExtrusionLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.fillExtrusionTranslate(styleValue.getExpression());
      } else {
          layer.fillExtrusionTranslate(styleValue.getFloatArray(VALUE_KEY));
      }
    }


    public static void setFillExtrusionTranslateTransition(FillExtrusionLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.fillExtrusionTranslateTransition(transition);
      }
    }

    public static void setFillExtrusionTranslateAnchor(FillExtrusionLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.fillExtrusionTranslateAnchor(styleValue.getExpression());
      } else {
          layer.fillExtrusionTranslateAnchor(FillExtrusionTranslateAnchor.valueOf(styleValue.getEnumName()));
      }
    }

    public static void setFillExtrusionPattern(FillExtrusionLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        if (styleValue.isImageStringValue()) {
          layer.fillExtrusionPattern(styleValue.getImageStringValue());
        } else {
          layer.fillExtrusionPattern(styleValue.getExpression());
        }
      } else {
        layer.fillExtrusionPattern(styleValue.getImageURI());
      }
    }


    public static void setFillExtrusionPatternTransition(FillExtrusionLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.fillExtrusionPatternTransition(transition);
      }
    }

    public static void setFillExtrusionHeight(FillExtrusionLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.fillExtrusionHeight(styleValue.getExpression());
      } else {
          layer.fillExtrusionHeight(styleValue.getFloat(VALUE_KEY));
      }
    }


    public static void setFillExtrusionHeightTransition(FillExtrusionLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.fillExtrusionHeightTransition(transition);
      }
    }

    public static void setFillExtrusionBase(FillExtrusionLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.fillExtrusionBase(styleValue.getExpression());
      } else {
          layer.fillExtrusionBase(styleValue.getFloat(VALUE_KEY));
      }
    }


    public static void setFillExtrusionBaseTransition(FillExtrusionLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.fillExtrusionBaseTransition(transition);
      }
    }

    public static void setFillExtrusionVerticalGradient(FillExtrusionLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.fillExtrusionVerticalGradient(styleValue.getExpression());
      } else {
          layer.fillExtrusionVerticalGradient(styleValue.getBoolean(VALUE_KEY));
      }
    }

    public static void setVisibility(RasterLayer layer, RCTMGLStyleValue styleValue) {
        layer.visibility(Visibility.valueOf(styleValue.getEnumName()));
    }

    public static void setRasterOpacity(RasterLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.rasterOpacity(styleValue.getExpression());
      } else {
          layer.rasterOpacity(styleValue.getFloat(VALUE_KEY));
      }
    }


    public static void setRasterOpacityTransition(RasterLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.rasterOpacityTransition(transition);
      }
    }

    public static void setRasterHueRotate(RasterLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.rasterHueRotate(styleValue.getExpression());
      } else {
          layer.rasterHueRotate(styleValue.getFloat(VALUE_KEY));
      }
    }


    public static void setRasterHueRotateTransition(RasterLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.rasterHueRotateTransition(transition);
      }
    }

    public static void setRasterBrightnessMin(RasterLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.rasterBrightnessMin(styleValue.getExpression());
      } else {
          layer.rasterBrightnessMin(styleValue.getFloat(VALUE_KEY));
      }
    }


    public static void setRasterBrightnessMinTransition(RasterLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.rasterBrightnessMinTransition(transition);
      }
    }

    public static void setRasterBrightnessMax(RasterLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.rasterBrightnessMax(styleValue.getExpression());
      } else {
          layer.rasterBrightnessMax(styleValue.getFloat(VALUE_KEY));
      }
    }


    public static void setRasterBrightnessMaxTransition(RasterLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.rasterBrightnessMaxTransition(transition);
      }
    }

    public static void setRasterSaturation(RasterLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.rasterSaturation(styleValue.getExpression());
      } else {
          layer.rasterSaturation(styleValue.getFloat(VALUE_KEY));
      }
    }


    public static void setRasterSaturationTransition(RasterLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.rasterSaturationTransition(transition);
      }
    }

    public static void setRasterContrast(RasterLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.rasterContrast(styleValue.getExpression());
      } else {
          layer.rasterContrast(styleValue.getFloat(VALUE_KEY));
      }
    }


    public static void setRasterContrastTransition(RasterLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.rasterContrastTransition(transition);
      }
    }

    public static void setRasterResampling(RasterLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.rasterResampling(styleValue.getExpression());
      } else {
          layer.rasterResampling(RasterResampling.valueOf(styleValue.getEnumName()));
      }
    }

    public static void setRasterFadeDuration(RasterLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.rasterFadeDuration(styleValue.getExpression());
      } else {
          layer.rasterFadeDuration(styleValue.getFloat(VALUE_KEY));
      }
    }

    public static void setVisibility(HillshadeLayer layer, RCTMGLStyleValue styleValue) {
        layer.visibility(Visibility.valueOf(styleValue.getEnumName()));
    }

    public static void setHillshadeIlluminationDirection(HillshadeLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.hillshadeIlluminationDirection(styleValue.getExpression());
      } else {
          layer.hillshadeIlluminationDirection(styleValue.getFloat(VALUE_KEY));
      }
    }

    public static void setHillshadeIlluminationAnchor(HillshadeLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.hillshadeIlluminationAnchor(styleValue.getExpression());
      } else {
          layer.hillshadeIlluminationAnchor(HillshadeIlluminationAnchor.valueOf(styleValue.getEnumName()));
      }
    }

    public static void setHillshadeExaggeration(HillshadeLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.hillshadeExaggeration(styleValue.getExpression());
      } else {
          layer.hillshadeExaggeration(styleValue.getFloat(VALUE_KEY));
      }
    }


    public static void setHillshadeExaggerationTransition(HillshadeLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.hillshadeExaggerationTransition(transition);
      }
    }

    public static void setHillshadeShadowColor(HillshadeLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.hillshadeShadowColor(styleValue.getExpression());
      } else {
          layer.hillshadeShadowColor(styleValue.getInt(VALUE_KEY));
      }
    }


    public static void setHillshadeShadowColorTransition(HillshadeLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.hillshadeShadowColorTransition(transition);
      }
    }

    public static void setHillshadeHighlightColor(HillshadeLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.hillshadeHighlightColor(styleValue.getExpression());
      } else {
          layer.hillshadeHighlightColor(styleValue.getInt(VALUE_KEY));
      }
    }


    public static void setHillshadeHighlightColorTransition(HillshadeLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.hillshadeHighlightColorTransition(transition);
      }
    }

    public static void setHillshadeAccentColor(HillshadeLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.hillshadeAccentColor(styleValue.getExpression());
      } else {
          layer.hillshadeAccentColor(styleValue.getInt(VALUE_KEY));
      }
    }


    public static void setHillshadeAccentColorTransition(HillshadeLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.hillshadeAccentColorTransition(transition);
      }
    }

    public static void setVisibility(BackgroundLayer layer, RCTMGLStyleValue styleValue) {
        layer.visibility(Visibility.valueOf(styleValue.getEnumName()));
    }

    public static void setBackgroundColor(BackgroundLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.backgroundColor(styleValue.getExpression());
      } else {
          layer.backgroundColor(styleValue.getInt(VALUE_KEY));
      }
    }


    public static void setBackgroundColorTransition(BackgroundLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.backgroundColorTransition(transition);
      }
    }

    public static void setBackgroundPattern(BackgroundLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        if (styleValue.isImageStringValue()) {
          layer.backgroundPattern(styleValue.getImageStringValue());
        } else {
          layer.backgroundPattern(styleValue.getExpression());
        }
      } else {
        layer.backgroundPattern(styleValue.getImageURI());
      }
    }


    public static void setBackgroundPatternTransition(BackgroundLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.backgroundPatternTransition(transition);
      }
    }

    public static void setBackgroundOpacity(BackgroundLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.backgroundOpacity(styleValue.getExpression());
      } else {
          layer.backgroundOpacity(styleValue.getFloat(VALUE_KEY));
      }
    }


    public static void setBackgroundOpacityTransition(BackgroundLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.backgroundOpacityTransition(transition);
      }
    }

    public static void setVisibility(SkyLayer layer, RCTMGLStyleValue styleValue) {
        layer.visibility(Visibility.valueOf(styleValue.getEnumName()));
    }

    public static void setSkyType(SkyLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.skyType(styleValue.getExpression());
      } else {
          layer.skyType(SkyType.valueOf(styleValue.getEnumName()));
      }
    }

    public static void setSkyAtmosphereSun(SkyLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.skyAtmosphereSun(styleValue.getExpression());
      } else {
          layer.skyAtmosphereSun(styleValue.getFloatArray(VALUE_KEY));
      }
    }

    public static void setSkyAtmosphereSunIntensity(SkyLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.skyAtmosphereSunIntensity(styleValue.getExpression());
      } else {
          layer.skyAtmosphereSunIntensity(styleValue.getFloat(VALUE_KEY));
      }
    }

    public static void setSkyGradientCenter(SkyLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.skyGradientCenter(styleValue.getExpression());
      } else {
          layer.skyGradientCenter(styleValue.getFloatArray(VALUE_KEY));
      }
    }

    public static void setSkyGradientRadius(SkyLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.skyGradientRadius(styleValue.getExpression());
      } else {
          layer.skyGradientRadius(styleValue.getFloat(VALUE_KEY));
      }
    }

    public static void setSkyGradient(SkyLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.skyGradient(styleValue.getExpression());
      } else {
          layer.skyGradient(styleValue.getIntExpression(VALUE_KEY));
      }
    }

    public static void setSkyAtmosphereHaloColor(SkyLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.skyAtmosphereHaloColor(styleValue.getExpression());
      } else {
          layer.skyAtmosphereHaloColor(styleValue.getInt(VALUE_KEY));
      }
    }

    public static void setSkyAtmosphereColor(SkyLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.skyAtmosphereColor(styleValue.getExpression());
      } else {
          layer.skyAtmosphereColor(styleValue.getInt(VALUE_KEY));
      }
    }

    public static void setSkyOpacity(SkyLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.skyOpacity(styleValue.getExpression());
      } else {
          layer.skyOpacity(styleValue.getFloat(VALUE_KEY));
      }
    }


    public static void setSkyOpacityTransition(SkyLayer layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.skyOpacityTransition(transition);
      }
    }

    public static void setAnchor(Light layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.anchor(styleValue.getExpression());
      } else {
          layer.anchor(Anchor.valueOf(styleValue.getEnumName()));
      }
    }

    public static void setPosition(Light layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.position(styleValue.getExpression());
      } else {
          layer.position(styleValue.getLightPosition());
      }
    }


    public static void setPositionTransition(Light layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.positionTransition(transition);
      }
    }

    public static void setColor(Light layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.color(styleValue.getExpression());
      } else {
          layer.color(styleValue.getInt(VALUE_KEY));
      }
    }


    public static void setColorTransition(Light layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.colorTransition(transition);
      }
    }

    public static void setIntensity(Light layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isExpression()) {
        layer.intensity(styleValue.getExpression());
      } else {
          layer.intensity(styleValue.getFloat(VALUE_KEY));
      }
    }


    public static void setIntensityTransition(Light layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.intensityTransition(transition);
      }
    }

}
