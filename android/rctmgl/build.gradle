def defaultMapboxMapsImpl = "maplibre"

def safeExtGet(prop, fallback) {
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

// expo plugin
if (rootProject.ext.has('expoRNMapboxMapsImpl')) {
    rootProject.ext.set('RNMapboxMapsImpl', rootProject.ext.get('expoRNMapboxMapsImpl'))
}

buildscript {
  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${rootProject.ext.has('kotlinVersion') ? rootProject.ext.get('kotlinVersion') : '1.6.21'}"
  }
}

apply plugin: 'com.android.library'

if (safeExtGet("RNMapboxMapsImpl", defaultMapboxMapsImpl) == "mapbox") {
  apply plugin: 'kotlin-android'
}

android {
    if (safeExtGet("RNMapboxMapsImpl", defaultMapboxMapsImpl) == "maplibre") {
        sourceSets {
            main {
                java.srcDirs = ['src/main/java-mapboxgl/common','src/main/java-mapboxgl/maplibre']
            }
        }
    }
    else if (safeExtGet("RNMapboxMapsImpl", defaultMapboxMapsImpl) == "mapbox-gl") {
        sourceSets {
            main {
                java.srcDirs = ['src/main/java-mapboxgl/common','src/main/java-mapboxgl/mapbox']
            }
        }
    }
    else if (safeExtGet("RNMapboxMapsImpl", defaultMapboxMapsImpl) == "mapbox") {
        sourceSets {
            main {
                java.srcDirs = ['src/main/java-v10']
            }
        }

        packagingOptions {
            pickFirst 'lib/x86/libc++_shared.so'
            pickFirst 'lib/x86_64/libc++_shared.so'
            pickFirst 'lib/arm64-v8a/libc++_shared.so'
            pickFirst 'lib/armeabi-v7a/libc++_shared.so'
        }
    }
    else {
        msg = "RNMapboxMapsImpl should be one of: mapbox, mapbox-gl, maplibre got: ${safeExtGet("mapboxV10", defaultMapboxMapsImpl)}"
        logger.error(msg)
        throw new GradleException(msg)
    }

    compileSdkVersion safeExtGet("compileSdkVersion", 28)
    buildToolsVersion safeExtGet("buildToolsVersion", '28.0.3')

    defaultConfig {
        minSdkVersion safeExtGet('minSdkVersion', 16)
        targetSdkVersion safeExtGet('targetSdkVersion', 26)
        versionCode 1
        versionName "1.0"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

def customizableDependencies(name, defaultDependencies) {
    if (rootProject.ext.has(name)) {
        def libs = rootProject.ext.get(name)
        if (libs instanceof CharSequence) {
            libs.split(';').each {
                implementation it
            }
        } else {
            libs.delegate = defaultDependencies.owner.delegate
            libs.call()
        }
    } else {
        defaultDependencies.delegate = defaultDependencies.owner.delegate
        defaultDependencies.call()
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // React Native
    implementation "com.facebook.react:react-native:+"

    // Mapbox SDK
    customizableDependencies('RNMapboxMapsLibs') {
        if (safeExtGet("RNMapboxMapsImpl", defaultMapboxMapsImpl) == "maplibre") {
            implementation ("org.maplibre.gl:android-sdk:9.5.2")
            implementation ("org.maplibre.gl:android-sdk-turf:5.9.0")

            implementation ("org.maplibre.gl:android-plugin-localization-v9:1.0.0")
            implementation ("org.maplibre.gl:android-plugin-annotation-v9:1.0.0")
            implementation ("org.maplibre.gl:android-plugin-markerview-v9:1.0.0")
        }
        else if (safeExtGet("RNMapboxMapsImpl", defaultMapboxMapsImpl) == "mapbox-gl") {
            implementation 'com.mapbox.mapboxsdk:mapbox-sdk-services:5.1.0'
            implementation 'com.mapbox.mapboxsdk:mapbox-android-sdk:9.1.0'
            implementation 'com.mapbox.mapboxsdk:mapbox-android-telemetry:6.1.0'
            implementation 'com.mapbox.mapboxsdk:mapbox-android-plugin-annotation-v9:0.8.0'

                // plugins
            implementation 'com.mapbox.mapboxsdk:mapbox-android-gestures:0.6.0'
            implementation 'com.mapbox.mapboxsdk:mapbox-android-plugin-localization-v9:0.12.0'
            implementation 'com.mapbox.mapboxsdk:mapbox-android-plugin-markerview-v9:0.4.0'
            implementation 'com.mapbox.mapboxsdk:mapbox-sdk-turf:5.1.0'
        }
        else if (safeExtGet("RNMapboxMapsImpl", defaultMapboxMapsImpl) == "mapbox") {
            implementation 'com.mapbox.maps:android:10.5.0'
            implementation 'com.mapbox.mapboxsdk:mapbox-sdk-turf:5.8.0'
        }
    }

    // Dependencies
    customizableDependencies('RNMapboxMapsSupportLibs') {
        implementation "com.android.support:support-vector-drawable:28.0.0"
        implementation "com.android.support:support-annotations:28.0.0"
        implementation "com.android.support:appcompat-v7:28.0.0"
    }
    customizableDependencies('RNMapboxMapsOkHTTPLibs') {
        implementation "com.squareup.okhttp3:okhttp:4.9.0"
        implementation "com.squareup.okhttp3:okhttp-urlconnection:4.9.0"
    }
}
