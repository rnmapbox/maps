{
  "Annotation": {
    "description": "",
    "displayName": "Annotation",
    "methods": [
      {
        "name": "onPress",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "optional": false,
            "type": {
              "name": "OnPressEvent"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "symbolStyle",
        "docblock": null,
        "modifiers": [
          "get"
        ],
        "params": [],
        "returns": {
          "type": {
            "name": "union",
            "raw": "SymbolLayerStyle | undefined",
            "elements": [
              {
                "name": "SymbolLayerStyle"
              },
              {
                "name": "undefined"
              }
            ]
          }
        }
      }
    ],
    "props": [
      {
        "name": "id",
        "required": true,
        "type": "string",
        "default": "none",
        "description": "FIX ME NO DESCRIPTION"
      },
      {
        "name": "animated",
        "required": false,
        "type": "boolean",
        "default": "false",
        "description": "FIX ME NO DESCRIPTION"
      },
      {
        "name": "animationDuration",
        "required": false,
        "type": "number",
        "default": "1000",
        "description": "FIX ME NO DESCRIPTION"
      },
      {
        "name": "animationEasingFunction",
        "required": false,
        "type": {
          "name": "func",
          "funcSignature": "(x:number) => number"
        },
        "default": "Easing.linear",
        "description": "FIX ME NO DESCRIPTION\n*signature:*`(x:number) => number`"
      },
      {
        "name": "coordinates",
        "required": true,
        "type": "Array",
        "default": "none",
        "description": "FIX ME NO DESCRIPTION"
      },
      {
        "name": "onPress",
        "required": false,
        "type": {
          "name": "func",
          "funcSignature": "(event:OnPressEvent) => void"
        },
        "default": "none",
        "description": "FIX ME NO DESCRIPTION\n*signature:*`(event:OnPressEvent) => void`"
      },
      {
        "name": "children",
        "required": true,
        "type": "ReactElement \\| ReactElement[]",
        "default": "none",
        "description": "FIX ME NO DESCRIPTION"
      },
      {
        "name": "style",
        "required": false,
        "type": "object",
        "default": "none",
        "description": "FIX ME NO DESCRIPTION"
      },
      {
        "name": "icon",
        "required": false,
        "type": "string \\| number \\| object",
        "default": "none",
        "description": "FIX ME NO DESCRIPTION"
      }
    ],
    "fileNameWithExt": "Annotation.tsx",
    "relPath": "src/components/Annotation.tsx",
    "name": "Annotation"
  },
  "Atmosphere": {
    "description": "",
    "displayName": "Atmosphere",
    "methods": [],
    "props": [
      {
        "name": "style",
        "required": true,
        "type": "AtmosphereLayerStyleProps",
        "default": "none",
        "description": "FIX ME NO DESCRIPTION"
      }
    ],
    "fileNameWithExt": "Atmosphere.tsx",
    "relPath": "src/components/Atmosphere.tsx",
    "name": "Atmosphere",
    "mbx": {
      "name": "atmosphere"
    },
    "styles": [
      {
        "name": "range",
        "type": "array<number>",
        "values": [],
        "minimum": -20,
        "maximum": 20,
        "default": [
          0.5,
          10
        ],
        "description": "The start and end distance range in which fog fades from fully transparent to fully opaque. The distance to the point at the center of the map is defined as zero, so that negative range values are closer to the camera, and positive values are farther away.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "measure-light"
          ],
          "relaxZoomRestriction": true
        },
        "transition": true,
        "mbx": {
          "fullName": "range",
          "name": "range",
          "namespace": null
        }
      },
      {
        "name": "color",
        "type": "color",
        "values": [],
        "default": "#ffffff",
        "description": "The color of the atmosphere region immediately below the horizon and within the `range` and above the horizon and within `horizonBlend`. Using opacity is recommended only for smoothly transitioning fog on/off as anything less than 100% opacity results in more tiles loaded and drawn.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "measure-light"
          ],
          "relaxZoomRestriction": true
        },
        "transition": true,
        "mbx": {
          "fullName": "color",
          "name": "color",
          "namespace": null
        }
      },
      {
        "name": "highColor",
        "type": "color",
        "values": [],
        "default": "#245cdf",
        "description": "The color of the atmosphere region above the horizon, `highColor` extends further above the horizon than the `color` property and its spread can be controlled with `horizonBlend`. The opacity can be set to `0` to remove the high atmosphere color contribution.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "measure-light"
          ],
          "relaxZoomRestriction": true
        },
        "transition": true,
        "mbx": {
          "fullName": "high-color",
          "name": "high-color",
          "namespace": null
        }
      },
      {
        "name": "spaceColor",
        "type": "color",
        "values": [],
        "default": [
          "interpolate",
          [
            "linear"
          ],
          [
            "zoom"
          ],
          4,
          "#010b19",
          7,
          "#367ab9"
        ],
        "description": "The color of the region above the horizon and after the end of the `horizonBlend` contribution. The opacity can be set to `0` to have a transparent background.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "measure-light"
          ],
          "relaxZoomRestriction": true
        },
        "transition": true,
        "mbx": {
          "fullName": "space-color",
          "name": "space-color",
          "namespace": null
        }
      },
      {
        "name": "horizonBlend",
        "type": "number",
        "values": [],
        "minimum": 0,
        "maximum": 1,
        "default": [
          "interpolate",
          [
            "linear"
          ],
          [
            "zoom"
          ],
          4,
          0.2,
          7,
          0.1
        ],
        "description": "Horizon blend applies a smooth fade from the color of the atmosphere to the color of space. A value of zero leaves a sharp transition from atmosphere to space. Increasing the value blends the color of atmosphere into increasingly high angles of the sky.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "measure-light"
          ],
          "relaxZoomRestriction": true
        },
        "transition": true,
        "mbx": {
          "fullName": "horizon-blend",
          "name": "horizon-blend",
          "namespace": null
        }
      },
      {
        "name": "starIntensity",
        "type": "number",
        "values": [],
        "minimum": 0,
        "maximum": 1,
        "default": [
          "interpolate",
          [
            "linear"
          ],
          [
            "zoom"
          ],
          5,
          0.35,
          6,
          0
        ],
        "description": "A value controlling the star intensity where `0` will show no stars and `1` will show stars at their maximum intensity.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "measure-light"
          ],
          "relaxZoomRestriction": true
        },
        "transition": true,
        "mbx": {
          "fullName": "star-intensity",
          "name": "star-intensity",
          "namespace": null
        }
      }
    ]
  },
  "BackgroundLayer": {
    "description": "",
    "displayName": "BackgroundLayer",
    "methods": [],
    "props": [
      {
        "name": "id",
        "required": true,
        "type": "string",
        "default": "none",
        "description": "A string that uniquely identifies the layer in the style to which it is added."
      },
      {
        "name": "existing",
        "required": false,
        "type": "boolean",
        "default": "none",
        "description": "The id refers to en existing layer in the style. Does not create a new layer."
      },
      {
        "name": "sourceID",
        "required": false,
        "type": "string",
        "default": "MapboxGL.StyleSource.DefaultSourceID",
        "description": "The source from which to obtain the data to style.\nIf the source has not yet been added to the current style, the behavior is undefined.\nInferred from parent source only if the layer is a direct child to it."
      },
      {
        "name": "sourceLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Identifier of the layer within the source identified by the sourceID property from which the receiver obtains the data to style."
      },
      {
        "name": "aboveLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Inserts a layer above aboveLayerID."
      },
      {
        "name": "belowLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Inserts a layer below belowLayerID"
      },
      {
        "name": "layerIndex",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "Inserts a layer at a specified index"
      },
      {
        "name": "filter",
        "required": false,
        "type": "FilterExpression",
        "default": "none",
        "description": "Filter only the features in the source layer that satisfy a condition that you define"
      },
      {
        "name": "minZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "The minimum zoom level at which the layer gets parsed and appears."
      },
      {
        "name": "maxZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "The maximum zoom level at which the layer gets parsed and appears."
      },
      {
        "name": "style",
        "required": false,
        "type": "BackgroundLayerStyleProps",
        "default": "none",
        "description": "Customizable style attributes"
      }
    ],
    "fileNameWithExt": "BackgroundLayer.tsx",
    "relPath": "src/components/BackgroundLayer.tsx",
    "name": "BackgroundLayer",
    "mbx": {
      "name": "background"
    },
    "styles": [
      {
        "name": "visibility",
        "type": "enum",
        "values": [
          {
            "value": "visible",
            "doc": "The layer is shown."
          },
          {
            "value": "none",
            "doc": "The layer is not shown."
          }
        ],
        "default": "visible",
        "description": "Whether this layer is displayed.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false
        },
        "mbx": {
          "fullName": "layout-background-visibility",
          "name": "visibility",
          "namespace": "layout"
        }
      },
      {
        "name": "backgroundColor",
        "type": "color",
        "values": [],
        "default": "#000000",
        "description": "The color with which the background will be drawn.",
        "requires": [],
        "disabledBy": [
          "backgroundPattern"
        ],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-background-background-color",
          "name": "background-color",
          "namespace": "paint"
        }
      },
      {
        "name": "backgroundPattern",
        "type": "resolvedImage",
        "values": [],
        "description": "Name of image in sprite to use for drawing an image background. For seamless patterns, image width and height must be a factor of two (2, 4, 8, ..., 512). Note that zoomDependent expressions will be evaluated only at integer zoom levels.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom"
          ]
        },
        "transition": false,
        "mbx": {
          "fullName": "paint-background-background-pattern",
          "name": "background-pattern",
          "namespace": "paint"
        }
      },
      {
        "name": "backgroundOpacity",
        "type": "number",
        "values": [],
        "minimum": 0,
        "maximum": 1,
        "default": 1,
        "description": "The opacity at which the background will be drawn.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-background-background-opacity",
          "name": "background-opacity",
          "namespace": "paint"
        }
      }
    ]
  },
  "Callout": {
    "description": "Callout that displays information about a selected annotation near the annotation.",
    "displayName": "Callout",
    "methods": [],
    "props": [
      {
        "name": "title",
        "required": true,
        "type": "string",
        "default": "none",
        "description": "String that gets displayed in the default callout."
      },
      {
        "name": "style",
        "required": false,
        "type": "ViewStyle",
        "default": "none",
        "description": "Style property for the Animated.View wrapper, apply animations to this"
      },
      {
        "name": "containerStyle",
        "required": false,
        "type": "ViewStyle",
        "default": "none",
        "description": "Style property for the native RNMBXCallout container, set at your own risk."
      },
      {
        "name": "contentStyle",
        "required": false,
        "type": "ViewStyle",
        "default": "none",
        "description": "Style property for the content bubble."
      },
      {
        "name": "tipStyle",
        "required": false,
        "type": "ViewStyle",
        "default": "none",
        "description": "Style property for the triangle tip under the content."
      },
      {
        "name": "textStyle",
        "required": false,
        "type": "ViewStyle",
        "default": "none",
        "description": "Style property for the title in the content bubble."
      }
    ],
    "fileNameWithExt": "Callout.tsx",
    "relPath": "src/components/Callout.tsx",
    "name": "Callout"
  },
  "Camera": {
    "description": "Controls the perspective from which the user sees the map.\n\nTo use imperative methods, pass in a ref object:\n\n```tsx\nconst camera = useRef&lt;Camera&gt;(null);\n\nuseEffect(() => {\n  camera.current?.setCamera({\n    centerCoordinate: [lon, lat],\n  });\n}, []);\n\nreturn (\n  <Camera ref={camera} />\n);\n```",
    "displayName": "Camera",
    "methods": [
      {
        "name": "setCamera",
        "docblock": "Sets any camera properties, with default fallbacks if unspecified.\n\n@example\ncamera.current?.setCamera({\n  centerCoordinate: [lon, lat],\n});\n\n@param {CameraStop | CameraStops} config",
        "modifiers": [],
        "params": [],
        "returns": null,
        "description": "Sets any camera properties, with default fallbacks if unspecified.",
        "examples": [
          "\ncamera.current?.setCamera({\n  centerCoordinate: [lon, lat],\n});\n\n"
        ]
      },
      {
        "name": "fitBounds",
        "docblock": "Set the camera position to enclose the provided bounds, with optional\npadding and duration.\n\n@example\ncamera.fitBounds([lon, lat], [lon, lat]);\ncamera.fitBounds([lon, lat], [lon, lat], [20, 0], 1000);\n\n@param {Position} ne Northeast coordinate of bounding box\n@param {Position} sw Southwest coordinate of bounding box\n@param {number | number[]} paddingConfig The viewport padding, specified as a number (all sides equal), a 2-item array ([vertical, horizontal]), or a 4-item array ([top, right, bottom, left])\n@param {number} animationDuration The transition duration",
        "modifiers": [],
        "params": [],
        "returns": null,
        "description": "Set the camera position to enclose the provided bounds, with optional\npadding and duration.",
        "examples": [
          "\ncamera.fitBounds([lon, lat], [lon, lat]);\ncamera.fitBounds([lon, lat], [lon, lat], [20, 0], 1000);\n\n"
        ]
      },
      {
        "name": "flyTo",
        "docblock": "Sets the camera to center around the provided coordinate using a realistic 'travel'\nanimation, with optional duration.\n\n@example\ncamera.flyTo([lon, lat]);\ncamera.flyTo([lon, lat], 12000);\n\n @param {Position} centerCoordinate The coordinate to center in the view\n @param {number} animationDuration The transition duration",
        "modifiers": [],
        "params": [],
        "returns": null,
        "description": "Sets the camera to center around the provided coordinate using a realistic 'travel'\nanimation, with optional duration.",
        "examples": [
          "\ncamera.flyTo([lon, lat]);\ncamera.flyTo([lon, lat], 12000);\n\n "
        ]
      },
      {
        "name": "moveTo",
        "docblock": "Sets the camera to center around the provided coordinate, with optional duration.\n\n@example\ncamera.moveTo([lon, lat], 200);\ncamera.moveTo([lon, lat]);\n\n @param {Position} centerCoordinate The coordinate to center in the view\n @param {number} animationDuration The transition duration",
        "modifiers": [],
        "params": [],
        "returns": null,
        "description": "Sets the camera to center around the provided coordinate, with optional duration.",
        "examples": [
          "\ncamera.moveTo([lon, lat], 200);\ncamera.moveTo([lon, lat]);\n\n "
        ]
      },
      {
        "name": "zoomTo",
        "docblock": "Zooms the camera to the provided level, with optional duration.\n\n@example\ncamera.zoomTo(16);\ncamera.zoomTo(16, 100);\n\n@param {number} zoomLevel The target zoom\n@param {number} animationDuration The transition duration",
        "modifiers": [],
        "params": [],
        "returns": null,
        "description": "Zooms the camera to the provided level, with optional duration.",
        "examples": [
          "\ncamera.zoomTo(16);\ncamera.zoomTo(16, 100);\n\n"
        ]
      }
    ],
    "props": [
      {
        "name": "type",
        "required": false,
        "type": "literal",
        "default": "none",
        "description": "Allows static check of the data type. For internal use only."
      },
      {
        "name": "centerCoordinate",
        "required": false,
        "type": "Position",
        "default": "none",
        "description": "The location on which the map should center."
      },
      {
        "name": "bounds",
        "required": false,
        "type": "intersection",
        "default": "none",
        "description": "The corners of a box around which the map should bound. Contains padding props for backwards\ncompatibility; the root `padding` prop should be used instead."
      },
      {
        "name": "heading",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "The heading (orientation) of the map."
      },
      {
        "name": "pitch",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "The pitch of the map."
      },
      {
        "name": "zoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "The zoom level of the map."
      },
      {
        "name": "padding",
        "required": false,
        "type": {
          "name": "shape",
          "value": [
            {
              "name": "paddingLeft",
              "required": true,
              "type": "number",
              "default": "none",
              "description": "Left padding in points"
            },
            {
              "name": "paddingRight",
              "required": true,
              "type": "number",
              "default": "none",
              "description": "Right padding in points"
            },
            {
              "name": "paddingTop",
              "required": true,
              "type": "number",
              "default": "none",
              "description": "Top padding in points"
            },
            {
              "name": "paddingBottom",
              "required": true,
              "type": "number",
              "default": "none",
              "description": "Bottom padding in points"
            }
          ]
        },
        "default": "none",
        "description": "The viewport padding in points."
      },
      {
        "name": "animationDuration",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "The duration the map takes to animate to a new configuration."
      },
      {
        "name": "animationMode",
        "required": false,
        "type": "\\| 'flyTo'\n\\| 'easeTo'\n\\| 'linearTo'\n\\| 'moveTo'\n\\| 'none'",
        "default": "none",
        "description": "The easing or path the camera uses to animate to a new configuration."
      },
      {
        "name": "followUserLocation",
        "required": false,
        "type": "boolean",
        "default": "none",
        "description": "Whether the map orientation follows the user location."
      },
      {
        "name": "followUserMode",
        "required": false,
        "type": "UserTrackingMode",
        "default": "none",
        "description": "The mode used to track the user location on the map."
      },
      {
        "name": "followZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "The zoom level used when following the user location."
      },
      {
        "name": "followPitch",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "The pitch used when following the user location."
      },
      {
        "name": "followHeading",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "The heading used when following the user location."
      },
      {
        "name": "followPadding",
        "required": false,
        "type": "Partial",
        "default": "none",
        "description": "The padding used to position the user location when following."
      },
      {
        "name": "minZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "The lowest allowed zoom level."
      },
      {
        "name": "maxZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "The highest allowed zoom level."
      },
      {
        "name": "maxBounds",
        "required": false,
        "type": {
          "name": "shape",
          "value": [
            {
              "name": "ne",
              "required": true,
              "type": "Position",
              "default": "none",
              "description": "FIX ME NO DESCRIPTION"
            },
            {
              "name": "sw",
              "required": true,
              "type": "Position",
              "default": "none",
              "description": "FIX ME NO DESCRIPTION"
            }
          ]
        },
        "default": "none",
        "description": "The corners of a box defining the limits of where the camera can pan or zoom."
      },
      {
        "name": "defaultSettings",
        "required": false,
        "type": {
          "name": "shape",
          "value": [
            {
              "name": "type",
              "required": false,
              "type": "literal",
              "default": "none",
              "description": "Allows static check of the data type. For internal use only."
            },
            {
              "name": "centerCoordinate",
              "required": false,
              "type": "Position",
              "default": "none",
              "description": "The location on which the map should center."
            },
            {
              "name": "bounds",
              "required": false,
              "type": "intersection",
              "default": "none",
              "description": "The corners of a box around which the map should bound. Contains padding props for backwards\ncompatibility; the root `padding` prop should be used instead."
            },
            {
              "name": "heading",
              "required": false,
              "type": "number",
              "default": "none",
              "description": "The heading (orientation) of the map."
            },
            {
              "name": "pitch",
              "required": false,
              "type": "number",
              "default": "none",
              "description": "The pitch of the map."
            },
            {
              "name": "zoomLevel",
              "required": false,
              "type": "number",
              "default": "none",
              "description": "The zoom level of the map."
            },
            {
              "name": "padding",
              "required": false,
              "type": "signature",
              "default": "none",
              "description": "The viewport padding in points."
            },
            {
              "name": "animationDuration",
              "required": false,
              "type": "number",
              "default": "none",
              "description": "The duration the map takes to animate to a new configuration."
            },
            {
              "name": "animationMode",
              "required": false,
              "type": "union",
              "default": "none",
              "description": "The easing or path the camera uses to animate to a new configuration."
            }
          ]
        },
        "default": "none",
        "description": "The configuration that the camera falls back on, if no other values are specified."
      },
      {
        "name": "allowUpdates",
        "required": false,
        "type": "boolean",
        "default": "none",
        "description": "Whether the camera should send any configuration to the native module. Prevents unnecessary tile\nfetching and improves performance when the map is not visible. Defaults to `true`."
      },
      {
        "name": "triggerKey",
        "required": false,
        "type": "string \\| number",
        "default": "none",
        "description": "Any arbitrary primitive value that, when changed, causes the camera to retry moving to its target\nconfiguration. (Not yet implemented.)"
      },
      {
        "name": "onUserTrackingModeChange",
        "required": false,
        "type": {
          "name": "func",
          "funcSignature": "(event:MapboxGLEvent) => void"
        },
        "default": "none",
        "description": "Executes when user tracking mode changes.\n**DEPRECATED** use Viewport#onStatusChanged instead.\n*signature:*`(event:MapboxGLEvent) => void`"
      }
    ],
    "fileNameWithExt": "Camera.tsx",
    "relPath": "src/components/Camera.tsx",
    "name": "Camera"
  },
  "CircleLayer": {
    "description": "CircleLayer is a style layer that renders one or more filled circles on the map.",
    "displayName": "CircleLayer",
    "methods": [],
    "props": [
      {
        "name": "id",
        "required": true,
        "type": "string",
        "default": "none",
        "description": "A string that uniquely identifies the source in the style to which it is added."
      },
      {
        "name": "existing",
        "required": false,
        "type": "boolean",
        "default": "none",
        "description": "The id refers to en existing layer in the style. Does not create a new layer."
      },
      {
        "name": "sourceID",
        "required": false,
        "type": "string",
        "default": "Mapbox.StyleSource.DefaultSourceID",
        "description": "The source from which to obtain the data to style.\nIf the source has not yet been added to the current style, the behavior is undefined.\nInferred from parent source only if the layer is a direct child to it."
      },
      {
        "name": "sourceLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Identifier of the layer within the source identified by the sourceID property from which the receiver obtains the data to style."
      },
      {
        "name": "aboveLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Inserts a layer above aboveLayerID."
      },
      {
        "name": "belowLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Inserts a layer below belowLayerID"
      },
      {
        "name": "layerIndex",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "Inserts a layer at a specified index"
      },
      {
        "name": "filter",
        "required": false,
        "type": "FilterExpression",
        "default": "none",
        "description": "Filter only the features in the source layer that satisfy a condition that you define"
      },
      {
        "name": "minZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "The minimum zoom level at which the layer gets parsed and appears."
      },
      {
        "name": "maxZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "The maximum zoom level at which the layer gets parsed and appears."
      },
      {
        "name": "slot",
        "required": false,
        "type": "'bottom' \\| 'middle' \\| 'top'",
        "default": "none",
        "description": "The slot this layer is assigned to. If specified, and a slot with that name exists, it will be placed at that position in the layer order.\n\nv11 only"
      },
      {
        "name": "style",
        "required": false,
        "type": "CircleLayerStyleProps",
        "default": "none",
        "description": "Customizable style attributes"
      }
    ],
    "fileNameWithExt": "CircleLayer.tsx",
    "relPath": "src/components/CircleLayer.tsx",
    "name": "CircleLayer",
    "mbx": {
      "name": "circle"
    },
    "styles": [
      {
        "name": "circleSortKey",
        "type": "number",
        "values": [],
        "description": "Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom",
            "feature"
          ]
        },
        "mbx": {
          "fullName": "layout-circle-circle-sort-key",
          "name": "circle-sort-key",
          "namespace": "layout"
        }
      },
      {
        "name": "visibility",
        "type": "enum",
        "values": [
          {
            "value": "visible",
            "doc": "The layer is shown."
          },
          {
            "value": "none",
            "doc": "The layer is not shown."
          }
        ],
        "default": "visible",
        "description": "Whether this layer is displayed.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false
        },
        "mbx": {
          "fullName": "layout-circle-visibility",
          "name": "visibility",
          "namespace": "layout"
        }
      },
      {
        "name": "circleRadius",
        "type": "number",
        "values": [],
        "minimum": 0,
        "units": "pixels",
        "default": 5,
        "description": "Circle radius.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature",
            "feature-state",
            "measure-light"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-circle-circle-radius",
          "name": "circle-radius",
          "namespace": "paint"
        }
      },
      {
        "name": "circleColor",
        "type": "color",
        "values": [],
        "default": "#000000",
        "description": "The fill color of the circle.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature",
            "feature-state",
            "measure-light"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-circle-circle-color",
          "name": "circle-color",
          "namespace": "paint"
        }
      },
      {
        "name": "circleBlur",
        "type": "number",
        "values": [],
        "default": 0,
        "description": "Amount to blur the circle. 1 blurs the circle such that only the centerpoint is full opacity.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature",
            "feature-state",
            "measure-light"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-circle-circle-blur",
          "name": "circle-blur",
          "namespace": "paint"
        }
      },
      {
        "name": "circleOpacity",
        "type": "number",
        "values": [],
        "minimum": 0,
        "maximum": 1,
        "default": 1,
        "description": "The opacity at which the circle will be drawn.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature",
            "feature-state",
            "measure-light"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-circle-circle-opacity",
          "name": "circle-opacity",
          "namespace": "paint"
        }
      },
      {
        "name": "circleTranslate",
        "type": "array<number>",
        "values": [],
        "units": "pixels",
        "default": [
          0,
          0
        ],
        "description": "The geometry's offset. Values are [x, y] where negatives indicate left and up, respectively.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-circle-circle-translate",
          "name": "circle-translate",
          "namespace": "paint"
        }
      },
      {
        "name": "circleTranslateAnchor",
        "type": "enum",
        "values": [
          {
            "value": "map",
            "doc": "The circle is translated relative to the map."
          },
          {
            "value": "viewport",
            "doc": "The circle is translated relative to the viewport."
          }
        ],
        "default": "map",
        "description": "Controls the frame of reference for `circleTranslate`.",
        "requires": [
          "circleTranslate"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom"
          ]
        },
        "mbx": {
          "fullName": "paint-circle-circle-translate-anchor",
          "name": "circle-translate-anchor",
          "namespace": "paint"
        }
      },
      {
        "name": "circlePitchScale",
        "type": "enum",
        "values": [
          {
            "value": "map",
            "doc": "Circles are scaled according to their apparent distance to the camera."
          },
          {
            "value": "viewport",
            "doc": "Circles are not scaled."
          }
        ],
        "default": "map",
        "description": "Controls the scaling behavior of the circle when the map is pitched.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom"
          ]
        },
        "mbx": {
          "fullName": "paint-circle-circle-pitch-scale",
          "name": "circle-pitch-scale",
          "namespace": "paint"
        }
      },
      {
        "name": "circlePitchAlignment",
        "type": "enum",
        "values": [
          {
            "value": "map",
            "doc": "The circle is aligned to the plane of the map."
          },
          {
            "value": "viewport",
            "doc": "The circle is aligned to the plane of the viewport."
          }
        ],
        "default": "viewport",
        "description": "Orientation of circle when map is pitched.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom"
          ]
        },
        "mbx": {
          "fullName": "paint-circle-circle-pitch-alignment",
          "name": "circle-pitch-alignment",
          "namespace": "paint"
        }
      },
      {
        "name": "circleStrokeWidth",
        "type": "number",
        "values": [],
        "minimum": 0,
        "units": "pixels",
        "default": 0,
        "description": "The width of the circle's stroke. Strokes are placed outside of the `circleRadius`.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature",
            "feature-state",
            "measure-light"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-circle-circle-stroke-width",
          "name": "circle-stroke-width",
          "namespace": "paint"
        }
      },
      {
        "name": "circleStrokeColor",
        "type": "color",
        "values": [],
        "default": "#000000",
        "description": "The stroke color of the circle.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature",
            "feature-state",
            "measure-light"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-circle-circle-stroke-color",
          "name": "circle-stroke-color",
          "namespace": "paint"
        }
      },
      {
        "name": "circleStrokeOpacity",
        "type": "number",
        "values": [],
        "minimum": 0,
        "maximum": 1,
        "default": 1,
        "description": "The opacity of the circle's stroke.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature",
            "feature-state",
            "measure-light"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-circle-circle-stroke-opacity",
          "name": "circle-stroke-opacity",
          "namespace": "paint"
        }
      }
    ]
  },
  "CustomLocationProvider": {
    "description": "",
    "displayName": "CustomLocationProvider",
    "methods": [],
    "props": [
      {
        "name": "coordinate",
        "required": false,
        "type": "Position",
        "default": "none",
        "description": "longitude and latitude to use for the custom location provider that gets applied to the NativeUserLocation"
      },
      {
        "name": "heading",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "heading/bearing to use for custom location provider that gets applied to the NativeUserLocation"
      }
    ],
    "fileNameWithExt": "CustomLocationProvider.tsx",
    "relPath": "src/components/CustomLocationProvider.tsx",
    "name": "CustomLocationProvider"
  },
  "FillExtrusionLayer": {
    "description": "FillExtrusionLayer is a style layer that renders one or more 3D extruded polygons on the map.",
    "displayName": "FillExtrusionLayer",
    "methods": [],
    "props": [
      {
        "name": "id",
        "required": true,
        "type": "string",
        "default": "none",
        "description": "A string that uniquely identifies the layer in the style to which it is added."
      },
      {
        "name": "existing",
        "required": false,
        "type": "boolean",
        "default": "none",
        "description": "The id refers to en existing layer in the style. Does not create a new layer."
      },
      {
        "name": "sourceID",
        "required": false,
        "type": "string",
        "default": "MapboxGL.StyleSource.DefaultSourceID",
        "description": "The source from which to obtain the data to style.\nIf the source has not yet been added to the current style, the behavior is undefined.\nInferred from parent source only if the layer is a direct child to it."
      },
      {
        "name": "sourceLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Identifier of the layer within the source identified by the sourceID property from which the receiver obtains the data to style."
      },
      {
        "name": "aboveLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Inserts a layer above aboveLayerID."
      },
      {
        "name": "belowLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Inserts a layer below belowLayerID"
      },
      {
        "name": "layerIndex",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "Inserts a layer at a specified index"
      },
      {
        "name": "filter",
        "required": false,
        "type": "FilterExpression",
        "default": "none",
        "description": "Filter only the features in the source layer that satisfy a condition that you define"
      },
      {
        "name": "minZoomLevel",
        "required": true,
        "type": "number",
        "default": "none",
        "description": "The minimum zoom level at which the layer gets parsed and appears."
      },
      {
        "name": "maxZoomLevel",
        "required": true,
        "type": "number",
        "default": "none",
        "description": "The maximum zoom level at which the layer gets parsed and appears."
      },
      {
        "name": "style",
        "required": false,
        "type": "FillExtrusionLayerStyleProps",
        "default": "none",
        "description": "Customizable style attributes"
      }
    ],
    "fileNameWithExt": "FillExtrusionLayer.tsx",
    "relPath": "src/components/FillExtrusionLayer.tsx",
    "name": "FillExtrusionLayer",
    "mbx": {
      "name": "fill-extrusion"
    },
    "styles": [
      {
        "name": "visibility",
        "type": "enum",
        "values": [
          {
            "value": "visible",
            "doc": "The layer is shown."
          },
          {
            "value": "none",
            "doc": "The layer is not shown."
          }
        ],
        "default": "visible",
        "description": "Whether this layer is displayed.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false
        },
        "mbx": {
          "fullName": "layout-fill-extrusion-visibility",
          "name": "visibility",
          "namespace": "layout"
        }
      },
      {
        "name": "fillExtrusionOpacity",
        "type": "number",
        "values": [],
        "minimum": 0,
        "maximum": 1,
        "default": 1,
        "description": "The opacity of the entire fill extrusion layer. This is rendered on a perLayer, not perFeature, basis, and dataDriven styling is not available.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-fill-extrusion-fill-extrusion-opacity",
          "name": "fill-extrusion-opacity",
          "namespace": "paint"
        }
      },
      {
        "name": "fillExtrusionColor",
        "type": "color",
        "values": [],
        "default": "#000000",
        "description": "The base color of the extruded fill. The extrusion's surfaces will be shaded differently based on this color in combination with the root `light` settings. If this color is specified as `rgba` with an alpha component, the alpha component will be ignored; use `fillExtrusionOpacity` to set layer opacity.",
        "requires": [],
        "disabledBy": [
          "fillExtrusionPattern"
        ],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature",
            "feature-state",
            "measure-light"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-fill-extrusion-fill-extrusion-color",
          "name": "fill-extrusion-color",
          "namespace": "paint"
        }
      },
      {
        "name": "fillExtrusionTranslate",
        "type": "array<number>",
        "values": [],
        "units": "pixels",
        "default": [
          0,
          0
        ],
        "description": "The geometry's offset. Values are [x, y] where negatives indicate left and up (on the flat plane), respectively.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-fill-extrusion-fill-extrusion-translate",
          "name": "fill-extrusion-translate",
          "namespace": "paint"
        }
      },
      {
        "name": "fillExtrusionTranslateAnchor",
        "type": "enum",
        "values": [
          {
            "value": "map",
            "doc": "The fill extrusion is translated relative to the map."
          },
          {
            "value": "viewport",
            "doc": "The fill extrusion is translated relative to the viewport."
          }
        ],
        "default": "map",
        "description": "Controls the frame of reference for `fillExtrusionTranslate`.",
        "requires": [
          "fillExtrusionTranslate"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom"
          ]
        },
        "mbx": {
          "fullName": "paint-fill-extrusion-fill-extrusion-translate-anchor",
          "name": "fill-extrusion-translate-anchor",
          "namespace": "paint"
        }
      },
      {
        "name": "fillExtrusionPattern",
        "type": "resolvedImage",
        "values": [],
        "description": "Name of image in sprite to use for drawing images on extruded fills. For seamless patterns, image width and height must be a factor of two (2, 4, 8, ..., 512). Note that zoomDependent expressions will be evaluated only at integer zoom levels.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom",
            "feature"
          ]
        },
        "transition": false,
        "mbx": {
          "fullName": "paint-fill-extrusion-fill-extrusion-pattern",
          "name": "fill-extrusion-pattern",
          "namespace": "paint"
        }
      },
      {
        "name": "fillExtrusionHeight",
        "type": "number",
        "values": [],
        "minimum": 0,
        "units": "meters",
        "default": 0,
        "description": "The height with which to extrude this layer.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature",
            "feature-state"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-fill-extrusion-fill-extrusion-height",
          "name": "fill-extrusion-height",
          "namespace": "paint"
        }
      },
      {
        "name": "fillExtrusionBase",
        "type": "number",
        "values": [],
        "minimum": 0,
        "units": "meters",
        "default": 0,
        "description": "The height with which to extrude the base of this layer. Must be less than or equal to `fillExtrusionHeight`.",
        "requires": [
          "fillExtrusionHeight"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature",
            "feature-state"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-fill-extrusion-fill-extrusion-base",
          "name": "fill-extrusion-base",
          "namespace": "paint"
        }
      },
      {
        "name": "fillExtrusionVerticalGradient",
        "type": "boolean",
        "values": [],
        "default": true,
        "description": "Whether to apply a vertical gradient to the sides of a fillExtrusion layer. If true, sides will be shaded slightly darker farther down.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom"
          ]
        },
        "transition": false,
        "mbx": {
          "fullName": "paint-fill-extrusion-fill-extrusion-vertical-gradient",
          "name": "fill-extrusion-vertical-gradient",
          "namespace": "paint"
        }
      },
      {
        "name": "fillExtrusionRoundedRoof",
        "type": "boolean",
        "values": [],
        "default": true,
        "description": "Indicates whether top edges should be rounded when fillExtrusionEdgeRadius has a value greater than 0. If false, rounded edges are only applied to the sides. Default is true.",
        "requires": [
          "fillExtrusionEdgeRadius"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom"
          ]
        },
        "transition": false,
        "mbx": {
          "fullName": "paint-fill-extrusion-fill-extrusion-rounded-roof",
          "name": "fill-extrusion-rounded-roof",
          "namespace": "paint"
        }
      }
    ]
  },
  "FillLayer": {
    "description": "FillLayer is a style layer that renders one or more filled (and optionally stroked) polygons on the map.",
    "displayName": "FillLayer",
    "methods": [],
    "props": [
      {
        "name": "id",
        "required": true,
        "type": "string",
        "default": "none",
        "description": "A string that uniquely identifies the source in the style to which it is added."
      },
      {
        "name": "existing",
        "required": false,
        "type": "boolean",
        "default": "none",
        "description": "The id refers to en existing layer in the style. Does not create a new layer."
      },
      {
        "name": "sourceID",
        "required": false,
        "type": "string",
        "default": "Mapbox.StyleSource.DefaultSourceID",
        "description": "The source from which to obtain the data to style.\nIf the source has not yet been added to the current style, the behavior is undefined.\nInferred from parent source only if the layer is a direct child to it."
      },
      {
        "name": "sourceLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Identifier of the layer within the source identified by the sourceID property from which the receiver obtains the data to style."
      },
      {
        "name": "aboveLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Inserts a layer above aboveLayerID."
      },
      {
        "name": "belowLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Inserts a layer below belowLayerID"
      },
      {
        "name": "layerIndex",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "Inserts a layer at a specified index"
      },
      {
        "name": "filter",
        "required": false,
        "type": "FilterExpression",
        "default": "none",
        "description": "Filter only the features in the source layer that satisfy a condition that you define"
      },
      {
        "name": "minZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "The minimum zoom level at which the layer gets parsed and appears."
      },
      {
        "name": "maxZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "The maximum zoom level at which the layer gets parsed and appears."
      },
      {
        "name": "slot",
        "required": false,
        "type": "'bottom' \\| 'middle' \\| 'top'",
        "default": "none",
        "description": "The slot this layer is assigned to. If specified, and a slot with that name exists, it will be placed at that position in the layer order.\n\nv11 only"
      },
      {
        "name": "style",
        "required": false,
        "type": "FillLayerStyleProps",
        "default": "none",
        "description": "Customizable style attributes"
      }
    ],
    "fileNameWithExt": "FillLayer.tsx",
    "relPath": "src/components/FillLayer.tsx",
    "name": "FillLayer",
    "mbx": {
      "name": "fill"
    },
    "styles": [
      {
        "name": "fillSortKey",
        "type": "number",
        "values": [],
        "description": "Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom",
            "feature"
          ]
        },
        "mbx": {
          "fullName": "layout-fill-fill-sort-key",
          "name": "fill-sort-key",
          "namespace": "layout"
        }
      },
      {
        "name": "visibility",
        "type": "enum",
        "values": [
          {
            "value": "visible",
            "doc": "The layer is shown."
          },
          {
            "value": "none",
            "doc": "The layer is not shown."
          }
        ],
        "default": "visible",
        "description": "Whether this layer is displayed.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false
        },
        "mbx": {
          "fullName": "layout-fill-visibility",
          "name": "visibility",
          "namespace": "layout"
        }
      },
      {
        "name": "fillAntialias",
        "type": "boolean",
        "values": [],
        "default": true,
        "description": "Whether or not the fill should be antialiased.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom"
          ]
        },
        "mbx": {
          "fullName": "paint-fill-fill-antialias",
          "name": "fill-antialias",
          "namespace": "paint"
        }
      },
      {
        "name": "fillOpacity",
        "type": "number",
        "values": [],
        "minimum": 0,
        "maximum": 1,
        "default": 1,
        "description": "The opacity of the entire fill layer. In contrast to the `fillColor`, this value will also affect the 1px stroke around the fill, if the stroke is used.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature",
            "feature-state",
            "measure-light"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-fill-fill-opacity",
          "name": "fill-opacity",
          "namespace": "paint"
        }
      },
      {
        "name": "fillColor",
        "type": "color",
        "values": [],
        "default": "#000000",
        "description": "The color of the filled part of this layer. This color can be specified as `rgba` with an alpha component and the color's opacity will not affect the opacity of the 1px stroke, if it is used.",
        "requires": [],
        "disabledBy": [
          "fillPattern"
        ],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature",
            "feature-state",
            "measure-light"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-fill-fill-color",
          "name": "fill-color",
          "namespace": "paint"
        }
      },
      {
        "name": "fillOutlineColor",
        "type": "color",
        "values": [],
        "description": "The outline color of the fill. Matches the value of `fillColor` if unspecified.",
        "requires": [],
        "disabledBy": [
          "fillPattern"
        ],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature",
            "feature-state",
            "measure-light"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-fill-fill-outline-color",
          "name": "fill-outline-color",
          "namespace": "paint"
        }
      },
      {
        "name": "fillTranslate",
        "type": "array<number>",
        "values": [],
        "units": "pixels",
        "default": [
          0,
          0
        ],
        "description": "The geometry's offset. Values are [x, y] where negatives indicate left and up, respectively.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-fill-fill-translate",
          "name": "fill-translate",
          "namespace": "paint"
        }
      },
      {
        "name": "fillTranslateAnchor",
        "type": "enum",
        "values": [
          {
            "value": "map",
            "doc": "The fill is translated relative to the map."
          },
          {
            "value": "viewport",
            "doc": "The fill is translated relative to the viewport."
          }
        ],
        "default": "map",
        "description": "Controls the frame of reference for `fillTranslate`.",
        "requires": [
          "fillTranslate"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom"
          ]
        },
        "mbx": {
          "fullName": "paint-fill-fill-translate-anchor",
          "name": "fill-translate-anchor",
          "namespace": "paint"
        }
      },
      {
        "name": "fillPattern",
        "type": "resolvedImage",
        "values": [],
        "description": "Name of image in sprite to use for drawing image fills. For seamless patterns, image width and height must be a factor of two (2, 4, 8, ..., 512). Note that zoomDependent expressions will be evaluated only at integer zoom levels.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom",
            "feature"
          ]
        },
        "transition": false,
        "mbx": {
          "fullName": "paint-fill-fill-pattern",
          "name": "fill-pattern",
          "namespace": "paint"
        }
      }
    ]
  },
  "HeadingIndicator": {
    "description": "",
    "displayName": "HeadingIndicator",
    "methods": [],
    "props": [
      {
        "name": "heading",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "FIX ME NO DESCRIPTION"
      }
    ],
    "fileNameWithExt": "HeadingIndicator.tsx",
    "relPath": "src/components/HeadingIndicator.tsx",
    "name": "HeadingIndicator"
  },
  "HeatmapLayer": {
    "description": "HeatmapLayer is a style layer that renders one or more filled circles on the map.",
    "displayName": "HeatmapLayer",
    "methods": [],
    "props": [
      {
        "name": "id",
        "required": true,
        "type": "string",
        "default": "none",
        "description": "A string that uniquely identifies the source in the style to which it is added."
      },
      {
        "name": "existing",
        "required": false,
        "type": "boolean",
        "default": "none",
        "description": "The id refers to en existing layer in the style. Does not create a new layer."
      },
      {
        "name": "sourceID",
        "required": false,
        "type": "string",
        "default": "Mapbox.StyleSource.DefaultSourceID",
        "description": "The source from which to obtain the data to style.\nIf the source has not yet been added to the current style, the behavior is undefined.\nInferred from parent source only if the layer is a direct child to it."
      },
      {
        "name": "sourceLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Identifier of the layer within the source identified by the sourceID property from which the receiver obtains the data to style."
      },
      {
        "name": "aboveLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Inserts a layer above aboveLayerID."
      },
      {
        "name": "belowLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Inserts a layer below belowLayerID"
      },
      {
        "name": "layerIndex",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "Inserts a layer at a specified index"
      },
      {
        "name": "filter",
        "required": false,
        "type": "FilterExpression",
        "default": "none",
        "description": "Filter only the features in the source layer that satisfy a condition that you define"
      },
      {
        "name": "minZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "The minimum zoom level at which the layer gets parsed and appears."
      },
      {
        "name": "maxZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "The maximum zoom level at which the layer gets parsed and appears."
      },
      {
        "name": "slot",
        "required": false,
        "type": "'bottom' \\| 'middle' \\| 'top'",
        "default": "none",
        "description": "The slot this layer is assigned to. If specified, and a slot with that name exists, it will be placed at that position in the layer order.\n\nv11 only"
      },
      {
        "name": "style",
        "required": false,
        "type": "HeatmapLayerStyleProps",
        "default": "none",
        "description": "Customizable style attributes"
      }
    ],
    "fileNameWithExt": "HeatmapLayer.tsx",
    "relPath": "src/components/HeatmapLayer.tsx",
    "name": "HeatmapLayer",
    "mbx": {
      "name": "heatmap"
    },
    "styles": [
      {
        "name": "visibility",
        "type": "enum",
        "values": [
          {
            "value": "visible",
            "doc": "The layer is shown."
          },
          {
            "value": "none",
            "doc": "The layer is not shown."
          }
        ],
        "default": "visible",
        "description": "Whether this layer is displayed.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false
        },
        "mbx": {
          "fullName": "layout-heatmap-visibility",
          "name": "visibility",
          "namespace": "layout"
        }
      },
      {
        "name": "heatmapRadius",
        "type": "number",
        "values": [],
        "minimum": 1,
        "units": "pixels",
        "default": 30,
        "description": "Radius of influence of one heatmap point in pixels. Increasing the value makes the heatmap smoother, but less detailed. `queryRenderedFeatures` on heatmap layers will return points within this radius.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature",
            "feature-state",
            "measure-light"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-heatmap-heatmap-radius",
          "name": "heatmap-radius",
          "namespace": "paint"
        }
      },
      {
        "name": "heatmapWeight",
        "type": "number",
        "values": [],
        "minimum": 0,
        "default": 1,
        "description": "A measure of how much an individual point contributes to the heatmap. A value of 10 would be equivalent to having 10 points of weight 1 in the same spot. Especially useful when combined with clustering.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature",
            "feature-state",
            "measure-light"
          ]
        },
        "transition": false,
        "mbx": {
          "fullName": "paint-heatmap-heatmap-weight",
          "name": "heatmap-weight",
          "namespace": "paint"
        }
      },
      {
        "name": "heatmapIntensity",
        "type": "number",
        "values": [],
        "minimum": 0,
        "default": 1,
        "description": "Similar to `heatmapWeight` but controls the intensity of the heatmap globally. Primarily used for adjusting the heatmap based on zoom level.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-heatmap-heatmap-intensity",
          "name": "heatmap-intensity",
          "namespace": "paint"
        }
      },
      {
        "name": "heatmapColor",
        "type": "color",
        "values": [],
        "default": [
          "interpolate",
          [
            "linear"
          ],
          [
            "heatmap-density"
          ],
          0,
          "rgba(0, 0, 255, 0)",
          0.1,
          "royalblue",
          0.3,
          "cyan",
          0.5,
          "lime",
          0.7,
          "yellow",
          1,
          "red"
        ],
        "description": "Defines the color of each pixel based on its density value in a heatmap. Should be an expression that uses `[\"heatmapDensity\"]` as input.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "heatmap-density"
          ]
        },
        "transition": false,
        "mbx": {
          "fullName": "paint-heatmap-heatmap-color",
          "name": "heatmap-color",
          "namespace": "paint"
        }
      },
      {
        "name": "heatmapOpacity",
        "type": "number",
        "values": [],
        "minimum": 0,
        "maximum": 1,
        "default": 1,
        "description": "The global opacity at which the heatmap layer will be drawn.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-heatmap-heatmap-opacity",
          "name": "heatmap-opacity",
          "namespace": "paint"
        }
      }
    ]
  },
  "Image": {
    "description": "",
    "displayName": "Image",
    "methods": [
      {
        "name": "refresh",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": [
      {
        "name": "name",
        "required": true,
        "type": "string",
        "default": "none",
        "description": "ID of the image"
      },
      {
        "name": "sdf",
        "required": false,
        "type": "boolean",
        "default": "none",
        "description": "Make image an sdf optional - see [SDF icons](https://docs.mapbox.com/help/troubleshooting/using-recolorable-images-in-mapbox-maps/)"
      },
      {
        "name": "stretchX",
        "required": false,
        "type": "Array",
        "default": "none",
        "description": "An array of two-element arrays, consisting of two numbers that represent, the from position and the to position of areas that can be stretched horizontally."
      },
      {
        "name": "stretchY",
        "required": false,
        "type": "Array",
        "default": "none",
        "description": "An array of two-element arrays, consisting of two numbers that represent, the from position and the to position of areas that can be stretched vertically."
      },
      {
        "name": "content",
        "required": false,
        "type": "tuple",
        "default": "none",
        "description": "An array of four numbers, with the first two specifying the left, top\ncorner, and the last two specifying the right, bottom corner. If present, and if the\nicon uses icon-text-fit, the symbol's text will be fit inside the content box."
      },
      {
        "name": "scale",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "Scale factor for the image."
      },
      {
        "name": "children",
        "required": true,
        "type": "ReactElement",
        "default": "none",
        "description": "Single react native view rendering the image"
      }
    ],
    "fileNameWithExt": "Image.tsx",
    "relPath": "src/components/Image.tsx",
    "name": "Image"
  },
  "ImageSource": {
    "description": "ImageSource is a content source that is used for a georeferenced raster image to be shown on the map.\nThe georeferenced image scales and rotates as the user zooms and rotates the map",
    "displayName": "ImageSource",
    "methods": [],
    "props": [
      {
        "name": "id",
        "required": true,
        "type": "string",
        "default": "none",
        "description": "A string that uniquely identifies the source."
      },
      {
        "name": "existing",
        "required": false,
        "type": "boolean",
        "default": "none",
        "description": "The id refers to en existing source in the style. Does not create a new source."
      },
      {
        "name": "url",
        "required": false,
        "type": "number \\| string",
        "default": "none",
        "description": "An HTTP(S) URL, absolute file URL, or local file URL to the source image.\nGifs are currently not supported."
      },
      {
        "name": "coordinates",
        "required": false,
        "type": "tuple",
        "default": "none",
        "description": "The top left, top right, bottom right, and bottom left coordinates for the image."
      },
      {
        "name": "children",
        "required": false,
        "type": "React.ReactElement \\| React.ReactElement[]",
        "default": "none",
        "description": "FIX ME NO DESCRIPTION"
      }
    ],
    "fileNameWithExt": "ImageSource.tsx",
    "relPath": "src/components/ImageSource.tsx",
    "name": "ImageSource"
  },
  "Images": {
    "description": "Images defines the images used in Symbol etc. layers.",
    "displayName": "Images",
    "methods": [],
    "props": [
      {
        "name": "images",
        "required": false,
        "type": {
          "name": "shape",
          "value": [
            {
              "name": {
                "name": "string"
              },
              "required": true,
              "type": "union",
              "default": "none",
              "description": "FIX ME NO DESCRIPTION"
            }
          ]
        },
        "default": "none",
        "description": "Specifies the external images in key-value pairs required for the shape source.\nKeys are names - see iconImage expressions, values can be either urls-s objects\nwith format `{uri: 'http://...'}` or `require('image.png')` or `import 'image.png'`"
      },
      {
        "name": "nativeAssetImages",
        "required": false,
        "type": "Array",
        "default": "none",
        "description": "If you have an asset under Image.xcassets on iOS and the drawables directory on android\nyou can specify an array of string names with assets as the key `['pin']`.\nAdditionally object with keys sdf, and strechX, strechY is supported for [SDF icons](https://docs.mapbox.com/help/troubleshooting/using-recolorable-images-in-mapbox-maps/)"
      },
      {
        "name": "onImageMissing",
        "required": false,
        "type": {
          "name": "func",
          "funcSignature": "(imageKey:string) => void"
        },
        "default": "none",
        "description": "Gets called when a Layer is trying to render an image whose key is not present in\nany of the `Images` component of the Map.\n*signature:*`(imageKey:string) => void`"
      },
      {
        "name": "children",
        "required": false,
        "type": "ReactElement<T> \\| Array<TypedReactNode<T>> \\| never",
        "default": "none",
        "description": "FIX ME NO DESCRIPTION"
      }
    ],
    "fileNameWithExt": "Images.tsx",
    "relPath": "src/components/Images.tsx",
    "name": "Images"
  },
  "Light": {
    "description": "Light represents the light source for extruded geometries",
    "methods": [],
    "props": [
      {
        "name": "style",
        "required": true,
        "type": "LightLayerStyleProps",
        "default": "none",
        "description": "Customizable style attributes"
      }
    ],
    "fileNameWithExt": "Light.tsx",
    "relPath": "src/components/Light.tsx",
    "name": "Light",
    "mbx": {
      "name": "light"
    },
    "styles": [
      {
        "name": "anchor",
        "type": "enum",
        "values": [
          {
            "value": "map",
            "doc": "The position of the light source is aligned to the rotation of the map."
          },
          {
            "value": "viewport",
            "doc": "The position of the light source is aligned to the rotation of the viewport."
          }
        ],
        "default": "viewport",
        "description": "Whether extruded geometries are lit relative to the map or viewport.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom"
          ]
        },
        "transition": false,
        "mbx": {
          "fullName": "anchor",
          "name": "anchor",
          "namespace": null
        }
      },
      {
        "name": "position",
        "type": "array<number>",
        "values": [],
        "default": [
          1.15,
          210,
          30
        ],
        "description": "Position of the light source relative to lit (extruded) geometries, in [r radial coordinate, a azimuthal angle, p polar angle] where r indicates the distance from the center of the base of an object to its light, a indicates the position of the light relative to 0° (0° when `light.anchor` is set to `viewport` corresponds to the top of the viewport, or 0° when `light.anchor` is set to `map` corresponds to due north, and degrees proceed clockwise), and p indicates the height of the light (from 0°, directly above, to 180°, directly below).",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "position",
          "name": "position",
          "namespace": null
        }
      },
      {
        "name": "color",
        "type": "color",
        "values": [],
        "default": "#ffffff",
        "description": "Color tint for lighting extruded geometries.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "color",
          "name": "color",
          "namespace": null
        }
      },
      {
        "name": "intensity",
        "type": "number",
        "values": [],
        "minimum": 0,
        "maximum": 1,
        "default": 0.5,
        "description": "Intensity of lighting (on a scale from 0 to 1). Higher numbers will present as more extreme contrast.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "intensity",
          "name": "intensity",
          "namespace": null
        }
      }
    ]
  },
  "LineLayer": {
    "description": "LineLayer is a style layer that renders one or more stroked polylines on the map.",
    "displayName": "LineLayer",
    "methods": [],
    "props": [
      {
        "name": "id",
        "required": true,
        "type": "string",
        "default": "none",
        "description": "A string that uniquely identifies the source in the style to which it is added."
      },
      {
        "name": "existing",
        "required": false,
        "type": "boolean",
        "default": "none",
        "description": "The id refers to en existing layer in the style. Does not create a new layer."
      },
      {
        "name": "sourceID",
        "required": false,
        "type": "string",
        "default": "Mapbox.StyleSource.DefaultSourceID",
        "description": "The source from which to obtain the data to style.\nIf the source has not yet been added to the current style, the behavior is undefined.\nInferred from parent source only if the layer is a direct child to it."
      },
      {
        "name": "sourceLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Identifier of the layer within the source identified by the sourceID property from which the receiver obtains the data to style."
      },
      {
        "name": "aboveLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Inserts a layer above aboveLayerID."
      },
      {
        "name": "belowLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Inserts a layer below belowLayerID"
      },
      {
        "name": "layerIndex",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "Inserts a layer at a specified index"
      },
      {
        "name": "filter",
        "required": false,
        "type": "FilterExpression",
        "default": "none",
        "description": "Filter only the features in the source layer that satisfy a condition that you define"
      },
      {
        "name": "minZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "The minimum zoom level at which the layer gets parsed and appears."
      },
      {
        "name": "maxZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "The maximum zoom level at which the layer gets parsed and appears."
      },
      {
        "name": "slot",
        "required": false,
        "type": "'bottom' \\| 'middle' \\| 'top'",
        "default": "none",
        "description": "The slot this layer is assigned to. If specified, and a slot with that name exists, it will be placed at that position in the layer order.\n\nv11 only"
      },
      {
        "name": "style",
        "required": false,
        "type": "LineLayerStyleProps",
        "default": "none",
        "description": "Customizable style attributes"
      }
    ],
    "fileNameWithExt": "LineLayer.tsx",
    "relPath": "src/components/LineLayer.tsx",
    "name": "LineLayer",
    "mbx": {
      "name": "line"
    },
    "styles": [
      {
        "name": "lineCap",
        "type": "enum",
        "values": [
          {
            "value": "butt",
            "doc": "A cap with a squared-off end which is drawn to the exact endpoint of the line."
          },
          {
            "value": "round",
            "doc": "A cap with a rounded end which is drawn beyond the endpoint of the line at a radius of one-half of the line's width and centered on the endpoint of the line."
          },
          {
            "value": "square",
            "doc": "A cap with a squared-off end which is drawn beyond the endpoint of the line at a distance of one-half of the line's width."
          }
        ],
        "default": "butt",
        "description": "The display of line endings.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom",
            "feature"
          ]
        },
        "mbx": {
          "fullName": "layout-line-line-cap",
          "name": "line-cap",
          "namespace": "layout"
        }
      },
      {
        "name": "lineJoin",
        "type": "enum",
        "values": [
          {
            "value": "bevel",
            "doc": "A join with a squared-off end which is drawn beyond the endpoint of the line at a distance of one-half of the line's width."
          },
          {
            "value": "round",
            "doc": "A join with a rounded end which is drawn beyond the endpoint of the line at a radius of one-half of the line's width and centered on the endpoint of the line."
          },
          {
            "value": "miter",
            "doc": "A join with a sharp, angled corner which is drawn with the outer sides beyond the endpoint of the path until they meet."
          }
        ],
        "default": "miter",
        "description": "The display of lines when joining.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [
          "camera"
        ],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom",
            "feature"
          ]
        },
        "mbx": {
          "fullName": "layout-line-line-join",
          "name": "line-join",
          "namespace": "layout"
        }
      },
      {
        "name": "lineMiterLimit",
        "type": "number",
        "values": [],
        "default": 2,
        "description": "Used to automatically convert miter joins to bevel joins for sharp angles.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom"
          ]
        },
        "mbx": {
          "fullName": "layout-line-line-miter-limit",
          "name": "line-miter-limit",
          "namespace": "layout"
        }
      },
      {
        "name": "lineRoundLimit",
        "type": "number",
        "values": [],
        "default": 1.05,
        "description": "Used to automatically convert round joins to miter joins for shallow angles.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom"
          ]
        },
        "mbx": {
          "fullName": "layout-line-line-round-limit",
          "name": "line-round-limit",
          "namespace": "layout"
        }
      },
      {
        "name": "lineSortKey",
        "type": "number",
        "values": [],
        "description": "Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom",
            "feature"
          ]
        },
        "mbx": {
          "fullName": "layout-line-line-sort-key",
          "name": "line-sort-key",
          "namespace": "layout"
        }
      },
      {
        "name": "visibility",
        "type": "enum",
        "values": [
          {
            "value": "visible",
            "doc": "The layer is shown."
          },
          {
            "value": "none",
            "doc": "The layer is not shown."
          }
        ],
        "default": "visible",
        "description": "Whether this layer is displayed.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false
        },
        "mbx": {
          "fullName": "layout-line-visibility",
          "name": "visibility",
          "namespace": "layout"
        }
      },
      {
        "name": "lineOpacity",
        "type": "number",
        "values": [],
        "minimum": 0,
        "maximum": 1,
        "default": 1,
        "description": "The opacity at which the line will be drawn.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature",
            "feature-state",
            "measure-light"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-line-line-opacity",
          "name": "line-opacity",
          "namespace": "paint"
        }
      },
      {
        "name": "lineColor",
        "type": "color",
        "values": [],
        "default": "#000000",
        "description": "The color with which the line will be drawn.",
        "requires": [],
        "disabledBy": [
          "linePattern"
        ],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature",
            "feature-state",
            "measure-light"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-line-line-color",
          "name": "line-color",
          "namespace": "paint"
        }
      },
      {
        "name": "lineTranslate",
        "type": "array<number>",
        "values": [],
        "units": "pixels",
        "default": [
          0,
          0
        ],
        "description": "The geometry's offset. Values are [x, y] where negatives indicate left and up, respectively.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-line-line-translate",
          "name": "line-translate",
          "namespace": "paint"
        }
      },
      {
        "name": "lineTranslateAnchor",
        "type": "enum",
        "values": [
          {
            "value": "map",
            "doc": "The line is translated relative to the map."
          },
          {
            "value": "viewport",
            "doc": "The line is translated relative to the viewport."
          }
        ],
        "default": "map",
        "description": "Controls the frame of reference for `lineTranslate`.",
        "requires": [
          "lineTranslate"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom"
          ]
        },
        "mbx": {
          "fullName": "paint-line-line-translate-anchor",
          "name": "line-translate-anchor",
          "namespace": "paint"
        }
      },
      {
        "name": "lineWidth",
        "type": "number",
        "values": [],
        "minimum": 0,
        "units": "pixels",
        "default": 1,
        "description": "Stroke thickness.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [
          "camera"
        ],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature",
            "feature-state",
            "measure-light"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-line-line-width",
          "name": "line-width",
          "namespace": "paint"
        }
      },
      {
        "name": "lineGapWidth",
        "type": "number",
        "values": [],
        "minimum": 0,
        "units": "pixels",
        "default": 0,
        "description": "Draws a line casing outside of a line's actual path. Value indicates the width of the inner gap.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature",
            "feature-state",
            "measure-light"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-line-line-gap-width",
          "name": "line-gap-width",
          "namespace": "paint"
        }
      },
      {
        "name": "lineOffset",
        "type": "number",
        "values": [],
        "units": "pixels",
        "default": 0,
        "description": "The line's offset. For linear features, a positive value offsets the line to the right, relative to the direction of the line, and a negative value to the left. For polygon features, a positive value results in an inset, and a negative value results in an outset.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature",
            "feature-state",
            "measure-light"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-line-line-offset",
          "name": "line-offset",
          "namespace": "paint"
        }
      },
      {
        "name": "lineBlur",
        "type": "number",
        "values": [],
        "minimum": 0,
        "units": "pixels",
        "default": 0,
        "description": "Blur applied to the line, in pixels.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature",
            "feature-state",
            "measure-light"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-line-line-blur",
          "name": "line-blur",
          "namespace": "paint"
        }
      },
      {
        "name": "lineDasharray",
        "type": "array<number>",
        "values": [],
        "minimum": 0,
        "units": "line widths",
        "description": "Specifies the lengths of the alternating dashes and gaps that form the dash pattern. The lengths are later scaled by the line width. To convert a dash length to pixels, multiply the length by the current line width. Note that GeoJSON sources with `lineMetrics: true` specified won't render dashed lines to the expected scale. Also note that zoomDependent expressions will be evaluated only at integer zoom levels.",
        "requires": [],
        "disabledBy": [
          "linePattern"
        ],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom",
            "feature"
          ]
        },
        "transition": false,
        "mbx": {
          "fullName": "paint-line-line-dasharray",
          "name": "line-dasharray",
          "namespace": "paint"
        }
      },
      {
        "name": "linePattern",
        "type": "resolvedImage",
        "values": [],
        "description": "Name of image in sprite to use for drawing image lines. For seamless patterns, image width must be a factor of two (2, 4, 8, ..., 512). Note that zoomDependent expressions will be evaluated only at integer zoom levels.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom",
            "feature"
          ]
        },
        "transition": false,
        "mbx": {
          "fullName": "paint-line-line-pattern",
          "name": "line-pattern",
          "namespace": "paint"
        }
      },
      {
        "name": "lineGradient",
        "type": "color",
        "values": [],
        "description": "A gradient used to color a line feature at various distances along its length. Defined using a `step` or `interpolate` expression which outputs a color for each corresponding `lineProgress` input value. `lineProgress` is a percentage of the line feature's total length as measured on the webmercator projected coordinate plane (a `number` between `0` and `1`). Can only be used with GeoJSON sources that specify `\"lineMetrics\": true`.",
        "requires": [],
        "disabledBy": [
          "linePattern"
        ],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "line-progress"
          ]
        },
        "transition": false,
        "mbx": {
          "fullName": "paint-line-line-gradient",
          "name": "line-gradient",
          "namespace": "paint"
        }
      },
      {
        "name": "lineTrimOffset",
        "type": "array<number>",
        "values": [],
        "minimum": [
          0,
          0
        ],
        "maximum": [
          1,
          1
        ],
        "default": [
          0,
          0
        ],
        "description": "The line part between [trimStart, trimEnd] will be marked as transparent to make a route vanishing effect. The line trimOff offset is based on the whole line range [0.0, 1.0].",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "transition": false,
        "mbx": {
          "fullName": "paint-line-line-trim-offset",
          "name": "line-trim-offset",
          "namespace": "paint"
        }
      }
    ]
  },
  "LocationPuck": {
    "description": "Renders a puck on the map that shows the device's current location.",
    "displayName": "LocationPuck",
    "methods": [],
    "props": [
      {
        "name": "androidRenderMode",
        "required": false,
        "type": "'normal' \\| 'compass' \\| 'gps'",
        "default": "none",
        "description": "Android render mode.\n\n - normal: just a circle\n - compass: triangle with heading\n - gps: large arrow\n\n@deprecated use `puckBearing` for source and `bearingImage` for image\n@platform android"
      },
      {
        "name": "puckBearing",
        "required": false,
        "type": "'heading' \\| 'course'",
        "default": "none",
        "description": "The bearing of the puck.\n\n - heading: Orients the puck to match the direction in which the device is facing.\n - course: Orients the puck to match the direction in which the device is moving."
      },
      {
        "name": "puckBearingEnabled",
        "required": false,
        "type": "boolean",
        "default": "none",
        "description": "Whether the puck rotates to track the bearing source."
      },
      {
        "name": "iosShowsUserHeadingIndicator",
        "required": false,
        "type": "boolean",
        "default": "none",
        "description": "iOS only. A Boolean value indicating whether the user location annotation may display a permanent heading indicator.\n\n@platform ios\n@deprecated use `puckBearingEnabled={true} puckBrearing=\"heading\"` instead"
      },
      {
        "name": "topImage",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "The name of image to use as the top layer for the location indicator. Images component should define this image."
      },
      {
        "name": "bearingImage",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "The name of image to use as the middle layer for the location indicator. Images component should define this image."
      },
      {
        "name": "shadowImage",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "The name of image to use as the background for the location indicator. Images component should define this image."
      },
      {
        "name": "scale",
        "required": false,
        "type": "T \\| Expression",
        "default": "none",
        "description": "The size of the images, as a scale factor applied to the size of the specified image. Supports expressions based on zoom.\n\n@example\n[\"interpolate\",[\"linear\"], [\"zoom\"], 10.0, 1.0, 20.0, 4.0]]\n@example\n2.0"
      },
      {
        "name": "pulsing",
        "required": false,
        "type": "\\| {\n    /**\n     * Flag determining whether the pulsing circle animation.\n     */\n    isEnabled?: boolean;\n\n    /**\n     * The color of the pulsing circle.\n     */\n    color?: number \\| ColorValue;\n\n    /**\n     * Circle radius configuration for the pulsing circle animation.\n     *  - accuracy:  Pulsing circle animates with the `horizontalAccuracy` form the latest puck location.\n     *  - number: Pulsing circle should animate with the constant radius.\n     */\n    radius?: 'accuracy' \\| number;\n  }\n\\| 'default'",
        "default": "none",
        "description": "The configration parameters for sonar-like pulsing circle animation shown around the 2D puck."
      },
      {
        "name": "visible",
        "required": false,
        "type": "boolean",
        "default": "none",
        "description": "Whether location icon is visible, defaults to true"
      }
    ],
    "fileNameWithExt": "LocationPuck.tsx",
    "relPath": "src/components/LocationPuck.tsx",
    "name": "LocationPuck"
  },
  "MapView": {
    "description": "MapView backed by Mapbox Native GL",
    "displayName": "MapView",
    "methods": [
      {
        "name": "getPointInView",
        "docblock": "Converts a geographic coordinate to a point in the given view’s coordinate system.\n\n@example\nconst pointInView = await this._map.getPointInView([-37.817070, 144.949901]);\n\n@param {Array<number>} coordinate - A point expressed in the map view's coordinate system.\n@return {Array}",
        "modifiers": [
          "async"
        ],
        "params": [
          {
            "name": "coordinate",
            "description": "A point expressed in the map view's coordinate system.",
            "type": {
              "name": "Position"
            },
            "optional": false
          }
        ],
        "returns": {
          "type": {
            "name": "Promise",
            "elements": [
              {
                "name": "Position"
              }
            ],
            "raw": "Promise<Position>"
          }
        },
        "description": "Converts a geographic coordinate to a point in the given view’s coordinate system.",
        "examples": [
          "\nconst pointInView = await this._map.getPointInView([-37.817070, 144.949901]);\n\n"
        ]
      },
      {
        "name": "getCoordinateFromView",
        "docblock": "Converts a point in the given view’s coordinate system to a geographic coordinate.\n\n@example\nconst coordinate = await this._map.getCoordinateFromView([100, 100]);\n\n@param {Array<number>} point - A point expressed in the given view’s coordinate system.\n@return {Array}",
        "modifiers": [
          "async"
        ],
        "params": [
          {
            "name": "point",
            "description": "A point expressed in the given view’s coordinate system.",
            "type": {
              "name": "Position"
            },
            "optional": false
          }
        ],
        "returns": {
          "type": {
            "name": "Promise",
            "elements": [
              {
                "name": "Position"
              }
            ],
            "raw": "Promise<Position>"
          }
        },
        "description": "Converts a point in the given view’s coordinate system to a geographic coordinate.",
        "examples": [
          "\nconst coordinate = await this._map.getCoordinateFromView([100, 100]);\n\n"
        ]
      },
      {
        "name": "getVisibleBounds",
        "docblock": "The coordinate bounds (ne, sw) visible in the user’s viewport.\n\n@example\nconst visibleBounds = await this._map.getVisibleBounds();\n\n@return {Array}",
        "modifiers": [
          "async"
        ],
        "params": [],
        "returns": {
          "type": {
            "name": "Promise",
            "elements": [
              {
                "name": "tuple",
                "raw": "[Position, Position]",
                "elements": [
                  {
                    "name": "Position"
                  },
                  {
                    "name": "Position"
                  }
                ]
              }
            ],
            "raw": "Promise<[Position, Position]>"
          }
        },
        "description": "The coordinate bounds (ne, sw) visible in the user’s viewport.",
        "examples": [
          "\nconst visibleBounds = await this._map.getVisibleBounds();\n\n"
        ]
      },
      {
        "name": "queryRenderedFeaturesAtPoint",
        "docblock": "Returns an array of rendered map features that intersect with a given point.\n\n@example\nthis._map.queryRenderedFeaturesAtPoint([30, 40], ['==', 'type', 'Point'], ['id1', 'id2'])\n\n@param  {Array<Number>} coordinate - A point expressed in the map view’s coordinate system.\n@param  {Array=} filter - A set of strings that correspond to the names of layers defined in the current style. Only the features contained in these layers are included in the returned array.\n@param  {Array=} layerIDs - A array of layer id's to filter the features by\n@return {FeatureCollection}",
        "modifiers": [
          "async"
        ],
        "params": [
          {
            "name": "coordinate",
            "description": "A point expressed in the map view’s coordinate system.",
            "type": {
              "name": "Position"
            },
            "optional": false
          },
          {
            "name": "filter",
            "description": "A set of strings that correspond to the names of layers defined in the current style. Only the features contained in these layers are included in the returned array.",
            "type": {
              "name": "Array"
            },
            "optional": true
          },
          {
            "name": "layerIDs",
            "description": "A array of layer id's to filter the features by",
            "type": {
              "name": "Array"
            },
            "optional": true
          }
        ],
        "returns": {
          "type": {
            "name": "Promise",
            "elements": [
              {
                "name": "union",
                "raw": "GeoJSON.FeatureCollection | undefined",
                "elements": [
                  {
                    "name": "GeoJSON.FeatureCollection"
                  },
                  {
                    "name": "undefined"
                  }
                ]
              }
            ],
            "raw": "Promise<GeoJSON.FeatureCollection | undefined>"
          }
        },
        "description": "Returns an array of rendered map features that intersect with a given point.",
        "examples": [
          "\nthis._map.queryRenderedFeaturesAtPoint([30, 40], ['==', 'type', 'Point'], ['id1', 'id2'])\n\n"
        ]
      },
      {
        "name": "queryRenderedFeaturesInRect",
        "docblock": "Returns an array of rendered map features that intersect with the given rectangle,\nrestricted to the given style layers and filtered by the given predicate. In v10,\npassing an empty array will query the entire visible bounds of the map.\n\n@example\nthis._map.queryRenderedFeaturesInRect([30, 40, 20, 10], ['==', 'type', 'Point'], ['id1', 'id2'])\n\n@param  {Array<Number>} bbox - A rectangle expressed in the map view’s coordinate system. For v10, this can be an empty array to query the visible map area.\n@param  {Array=} filter - A set of strings that correspond to the names of layers defined in the current style. Only the features contained in these layers are included in the returned array.\n@param  {Array=} layerIDs -  A array of layer id's to filter the features by\n@return {FeatureCollection}",
        "modifiers": [
          "async"
        ],
        "params": [
          {
            "name": "bbox",
            "description": "A rectangle expressed in the map view’s coordinate system. For v10, this can be an empty array to query the visible map area.",
            "type": {
              "name": "BBox \\| []"
            },
            "optional": false
          },
          {
            "name": "filter",
            "description": "A set of strings that correspond to the names of layers defined in the current style. Only the features contained in these layers are included in the returned array.",
            "type": {
              "name": "Array"
            },
            "optional": true
          },
          {
            "name": "layerIDs",
            "description": " A array of layer id's to filter the features by",
            "type": {
              "name": "Array"
            },
            "optional": true
          }
        ],
        "returns": {
          "type": {
            "name": "Promise",
            "elements": [
              {
                "name": "union",
                "raw": "GeoJSON.FeatureCollection | undefined",
                "elements": [
                  {
                    "name": "GeoJSON.FeatureCollection"
                  },
                  {
                    "name": "undefined"
                  }
                ]
              }
            ],
            "raw": "Promise<GeoJSON.FeatureCollection | undefined>"
          }
        },
        "description": "Returns an array of rendered map features that intersect with the given rectangle,\nrestricted to the given style layers and filtered by the given predicate. In v10,\npassing an empty array will query the entire visible bounds of the map.",
        "examples": [
          "\nthis._map.queryRenderedFeaturesInRect([30, 40, 20, 10], ['==', 'type', 'Point'], ['id1', 'id2'])\n\n"
        ]
      },
      {
        "name": "querySourceFeatures",
        "docblock": "Returns an array of GeoJSON Feature objects representing features within the specified vector tile or GeoJSON source that satisfy the query parameters.\n\n@example\nthis._map.querySourceFeatures('your-source-id', [], ['your-source-layer'])\n\n@param  {String} sourceId - Style source identifier used to query for source features.\n@param  {Array=} filter - A filter to limit query results.\n@param  {Array=} sourceLayerIDs - The name of the source layers to query. For vector tile sources, this parameter is required. For GeoJSON sources, it is ignored.\n@return {FeatureCollection}",
        "modifiers": [
          "async"
        ],
        "params": [
          {
            "name": "sourceId",
            "description": "Style source identifier used to query for source features.",
            "type": {
              "name": "string"
            },
            "optional": false
          },
          {
            "name": "filter",
            "description": "A filter to limit query results.",
            "type": {
              "name": "Array"
            },
            "optional": true
          },
          {
            "name": "sourceLayerIDs",
            "description": "The name of the source layers to query. For vector tile sources, this parameter is required. For GeoJSON sources, it is ignored.",
            "type": {
              "name": "Array"
            },
            "optional": true
          }
        ],
        "returns": {
          "type": {
            "name": "Promise",
            "elements": [
              {
                "name": "GeoJSON.FeatureCollection"
              }
            ],
            "raw": "Promise<GeoJSON.FeatureCollection>"
          }
        },
        "description": "Returns an array of GeoJSON Feature objects representing features within the specified vector tile or GeoJSON source that satisfy the query parameters.",
        "examples": [
          "\nthis._map.querySourceFeatures('your-source-id', [], ['your-source-layer'])\n\n"
        ]
      },
      {
        "name": "setCamera",
        "docblock": "Map camera will perform updates based on provided config. Deprecated use Camera#setCamera.\n@deprecated use Camera#setCamera",
        "modifiers": [],
        "params": [],
        "returns": null,
        "description": "Map camera will perform updates based on provided config. Deprecated use Camera#setCamera.",
        "examples": []
      },
      {
        "name": "takeSnap",
        "docblock": "Takes snapshot of map with current tiles and returns a URI to the image\n@param  {Boolean} writeToDisk If true will create a temp file, otherwise it is in base64\n@return {String}",
        "modifiers": [
          "async"
        ],
        "params": [
          {
            "name": "writeToDisk",
            "description": "If true will create a temp file, otherwise it is in base64",
            "type": {
              "name": "Boolean"
            },
            "optional": true
          }
        ],
        "returns": {
          "type": {
            "name": "Promise",
            "elements": [
              {
                "name": "string"
              }
            ],
            "raw": "Promise<string>"
          }
        },
        "description": "Takes snapshot of map with current tiles and returns a URI to the image",
        "examples": []
      },
      {
        "name": "getZoom",
        "docblock": "Returns the current zoom of the map view.\n\n@example\nconst zoom = await this._map.getZoom();\n\n@return {Number}",
        "modifiers": [
          "async"
        ],
        "params": [],
        "returns": {
          "type": {
            "name": "Promise",
            "elements": [
              {
                "name": "number"
              }
            ],
            "raw": "Promise<number>"
          }
        },
        "description": "Returns the current zoom of the map view.",
        "examples": [
          "\nconst zoom = await this._map.getZoom();\n\n"
        ]
      },
      {
        "name": "getCenter",
        "docblock": "Returns the map's geographical centerpoint\n\n@example\nconst center = await this._map.getCenter();\n\n@return {Array<Number>} Coordinates",
        "modifiers": [
          "async"
        ],
        "params": [],
        "returns": {
          "description": "Coordinates",
          "type": {
            "name": "Promise",
            "elements": [
              {
                "name": "Position"
              }
            ],
            "raw": "Promise<Position>"
          }
        },
        "description": "Returns the map's geographical centerpoint",
        "examples": [
          "\nconst center = await this._map.getCenter();\n\n"
        ]
      },
      {
        "name": "clearData",
        "docblock": "Clears temporary map data from the data path defined in the given resource\noptions. Useful to reduce the disk usage or in case the disk cache contains\ninvalid data.\n\nv10 only",
        "modifiers": [
          "async"
        ],
        "params": [],
        "returns": {
          "type": {
            "name": "Promise",
            "elements": [
              {
                "name": "void"
              }
            ],
            "raw": "Promise<void>"
          }
        },
        "description": "Clears temporary map data from the data path defined in the given resource\noptions. Useful to reduce the disk usage or in case the disk cache contains\ninvalid data.\n\nv10 only",
        "examples": []
      },
      {
        "name": "queryTerrainElevation",
        "docblock": "Queries the currently loaded data for elevation at a geographical location.\nThe elevation is returned in meters relative to mean sea-level.\nReturns null if terrain is disabled or if terrain data for the location hasn't been loaded yet.\n\n@param {Array<Number>} coordinate - the coordinates to query elevation at\n@return {Number}",
        "modifiers": [
          "async"
        ],
        "params": [
          {
            "name": "coordinate",
            "description": "the coordinates to query elevation at",
            "type": {
              "name": "Position"
            },
            "optional": false
          }
        ],
        "returns": {
          "type": {
            "name": "Promise",
            "elements": [
              {
                "name": "number"
              }
            ],
            "raw": "Promise<number>"
          }
        },
        "description": "Queries the currently loaded data for elevation at a geographical location.\nThe elevation is returned in meters relative to mean sea-level.\nReturns null if terrain is disabled or if terrain data for the location hasn't been loaded yet.",
        "examples": []
      },
      {
        "name": "setSourceVisibility",
        "docblock": "Sets the visibility of all the layers referencing the specified `sourceLayerId` and/or `sourceId`\n\n@example\nawait this._map.setSourceVisibility(false, 'composite', 'building')\n\n@param {boolean} visible - Visibility of the layers\n@param {String} sourceId - Identifier of the target source (e.g. 'composite')\n@param {String=} sourceLayerId - Identifier of the target source-layer (e.g. 'building')",
        "modifiers": [],
        "params": [
          {
            "name": "visible",
            "description": "Visibility of the layers",
            "type": {
              "name": "boolean"
            },
            "optional": false
          },
          {
            "name": "sourceId",
            "description": "Identifier of the target source (e.g. 'composite')",
            "type": {
              "name": "string"
            },
            "optional": false
          },
          {
            "name": "sourceLayerId",
            "description": "Identifier of the target source-layer (e.g. 'building')",
            "type": {
              "name": "String"
            },
            "optional": true
          }
        ],
        "returns": null,
        "description": "Sets the visibility of all the layers referencing the specified `sourceLayerId` and/or `sourceId`",
        "examples": [
          "\nawait this._map.setSourceVisibility(false, 'composite', 'building')\n\n"
        ]
      }
    ],
    "props": [
      {
        "name": "contentInset",
        "required": false,
        "type": "number \\| number[]",
        "default": "none",
        "description": "The distance from the edges of the map view’s frame to the edges of the map view’s logical viewport.\n@deprecated use Camera `padding` instead"
      },
      {
        "name": "projection",
        "required": false,
        "type": "'mercator' \\| 'globe'",
        "default": "none",
        "description": "The projection used when rendering the map"
      },
      {
        "name": "styleURL",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Style URL for map - notice, if non is set it _will_ default to `Mapbox.StyleURL.Street`"
      },
      {
        "name": "styleJSON",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "StyleJSON for map - according to TileJSON specs: https://github.com/mapbox/tilejson-spec"
      },
      {
        "name": "preferredFramesPerSecond",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "iOS: The preferred frame rate at which the map view is rendered.\nThe default value for this property is MGLMapViewPreferredFramesPerSecondDefault,\nwhich will adaptively set the preferred frame rate based on the capability of\nthe user’s device to maintain a smooth experience. This property can be set to arbitrary integer values.\n\nAndroid: The maximum frame rate at which the map view is rendered, but it can't exceed the ability of device hardware.\nThis property can be set to arbitrary integer values."
      },
      {
        "name": "zoomEnabled",
        "required": false,
        "type": "boolean",
        "default": "none",
        "description": "Enable/Disable zoom on the map"
      },
      {
        "name": "scrollEnabled",
        "required": false,
        "type": "boolean",
        "default": "true",
        "description": "Enable/Disable scroll on the map"
      },
      {
        "name": "pitchEnabled",
        "required": false,
        "type": "boolean",
        "default": "true",
        "description": "Enable/Disable pitch on map"
      },
      {
        "name": "rotateEnabled",
        "required": false,
        "type": "boolean",
        "default": "true",
        "description": "Enable/Disable rotation on map"
      },
      {
        "name": "attributionEnabled",
        "required": false,
        "type": "boolean",
        "default": "true",
        "description": "The Mapbox terms of service, which governs the use of Mapbox-hosted vector tiles and styles,\n[requires](https://www.mapbox.com/help/how-attribution-works/) these copyright notices to accompany any map that features Mapbox-designed styles, OpenStreetMap data, or other Mapbox data such as satellite or terrain data.\nIf that applies to this map view, do not hide this view or remove any notices from it.\n\nYou are additionally [required](https://www.mapbox.com/help/how-mobile-apps-work/#telemetry) to provide users with the option to disable anonymous usage and location sharing (telemetry).\nIf this view is hidden, you must implement this setting elsewhere in your app. See our website for [Android](https://www.mapbox.com/android-docs/map-sdk/overview/#telemetry-opt-out) and [iOS](https://www.mapbox.com/ios-sdk/#telemetry_opt_out) for implementation details.\n\nEnable/Disable attribution on map. For iOS you need to add MGLMapboxMetricsEnabledSettingShownInApp=YES\nto your Info.plist"
      },
      {
        "name": "attributionPosition",
        "required": false,
        "type": "OrnamentPositonProp",
        "default": "none",
        "description": "Adds attribution offset, e.g. `{top: 8, left: 8}` will put attribution button in top-left corner of the map. By default on Android, the attribution with information icon (i) will be on the bottom left, while on iOS the mapbox logo will be on bottom left with information icon (i) on bottom right. Read more about mapbox attribution [here](https://docs.mapbox.com/help/getting-started/attribution/)"
      },
      {
        "name": "tintColor",
        "required": false,
        "type": "string \\| number[]",
        "default": "none",
        "description": "MapView's tintColor"
      },
      {
        "name": "logoEnabled",
        "required": false,
        "type": "boolean",
        "default": "true",
        "description": "Enable/Disable the logo on the map."
      },
      {
        "name": "logoPosition",
        "required": false,
        "type": "OrnamentPositonProp",
        "default": "none",
        "description": "Adds logo offset, e.g. `{top: 8, left: 8}` will put the logo in top-left corner of the map"
      },
      {
        "name": "compassEnabled",
        "required": false,
        "type": "boolean",
        "default": "false",
        "description": "Enable/Disable the compass from appearing on the map"
      },
      {
        "name": "compassFadeWhenNorth",
        "required": false,
        "type": "boolean",
        "default": "false",
        "description": "[`mapbox` (v10) implementation only] Enable/Disable if the compass should fade out when the map is pointing north"
      },
      {
        "name": "compassPosition",
        "required": false,
        "type": "OrnamentPositonProp",
        "default": "none",
        "description": "[`mapbox` (v10) implementation only] Adds compass offset, e.g. `{top: 8, left: 8}` will put the compass in top-left corner of the map"
      },
      {
        "name": "compassViewPosition",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "Change corner of map the compass starts at. 0: TopLeft, 1: TopRight, 2: BottomLeft, 3: BottomRight"
      },
      {
        "name": "compassViewMargins",
        "required": false,
        "type": {
          "name": "shape",
          "value": [
            {
              "name": "x",
              "required": true,
              "type": "number",
              "default": "none",
              "description": "FIX ME NO DESCRIPTION"
            },
            {
              "name": "y",
              "required": true,
              "type": "number",
              "default": "none",
              "description": "FIX ME NO DESCRIPTION"
            }
          ]
        },
        "default": "none",
        "description": "Add margins to the compass with x and y values"
      },
      {
        "name": "compassImage",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "[iOS, `mapbox` (v10) implementation only] A string referencing an image key. Requires an `Images` component."
      },
      {
        "name": "scaleBarEnabled",
        "required": false,
        "type": "boolean",
        "default": "true",
        "description": "[`mapbox` (v10) implementation only] Enable/Disable the scale bar from appearing on the map"
      },
      {
        "name": "scaleBarPosition",
        "required": false,
        "type": "OrnamentPositonProp",
        "default": "none",
        "description": "[`mapbox` (v10) implementation only] Adds scale bar offset, e.g. `{top: 8, left: 8}` will put the scale bar in top-left corner of the map"
      },
      {
        "name": "surfaceView",
        "required": false,
        "type": "boolean",
        "default": "RNMBXModule.MapboxV10 ? true : false",
        "description": "[Android only] Enable/Disable use of GLSurfaceView instead of TextureView."
      },
      {
        "name": "requestDisallowInterceptTouchEvent",
        "required": false,
        "type": "boolean",
        "default": "false",
        "description": "[Android only] Experimental, call requestDisallowInterceptTouchEvent on parent with onTochEvent, this allows touch interaction to work\nwhen embedded into a scroll view"
      },
      {
        "name": "localizeLabels",
        "required": false,
        "type": "\\| {\n    /** locale code like `es` or `current` for the device's current locale */\n    locale: string;\n    /** layer id to localize. If not specified, all layers will be localized */\n    layerIds?: string[];\n  }\n\\| true",
        "default": "none",
        "description": "[`mapbox` (v10) implementation only]\nSet map's label locale, e.g. `{ \"locale\": \"es\" }` will localize labels to Spanish, `{ \"locale\": \"current\" }` will localize labels to system locale."
      },
      {
        "name": "gestureSettings",
        "required": false,
        "type": {
          "name": "shape",
          "value": [
            {
              "name": "doubleTapToZoomInEnabled",
              "required": false,
              "type": "boolean",
              "default": "none",
              "description": "Whether double tapping the map with one touch results in a zoom-in animation."
            },
            {
              "name": "doubleTouchToZoomOutEnabled",
              "required": false,
              "type": "boolean",
              "default": "none",
              "description": "Whether single tapping the map with two touches results in a zoom-out animation."
            },
            {
              "name": "pinchPanEnabled",
              "required": false,
              "type": "boolean",
              "default": "none",
              "description": "Whether pan/scroll is enabled for the pinch gesture."
            },
            {
              "name": "pinchZoomEnabled",
              "required": false,
              "type": "boolean",
              "default": "none",
              "description": "Whether zoom is enabled for the pinch gesture."
            },
            {
              "name": "pinchZoomDecelerationEnabled",
              "required": false,
              "type": "boolean",
              "default": "none",
              "description": "Whether a deceleration animation following a pinch-zoom gesture is enabled. True by default.\n(Android only)"
            },
            {
              "name": "pitchEnabled",
              "required": false,
              "type": "boolean",
              "default": "none",
              "description": "Whether the pitch gesture is enabled."
            },
            {
              "name": "quickZoomEnabled",
              "required": false,
              "type": "boolean",
              "default": "none",
              "description": "Whether the quick zoom gesture is enabled."
            },
            {
              "name": "rotateEnabled",
              "required": false,
              "type": "boolean",
              "default": "none",
              "description": "Whether the rotate gesture is enabled."
            },
            {
              "name": "rotateDecelerationEnabled",
              "required": false,
              "type": "boolean",
              "default": "none",
              "description": "Whether a deceleration animation following a rotate gesture is enabled. True by default.\n(Android only)"
            },
            {
              "name": "panEnabled",
              "required": false,
              "type": "boolean",
              "default": "none",
              "description": "Whether the single-touch pan/scroll gesture is enabled."
            },
            {
              "name": "panDecelerationFactor",
              "required": false,
              "type": "number",
              "default": "none",
              "description": "A constant factor that determines how quickly pan deceleration animations happen. Multiplied with the velocity vector once per millisecond during deceleration animations.\n\nOn iOS Defaults to UIScrollView.DecelerationRate.normal.rawValue\nOn android set to 0 to disable deceleration, and non zero to enabled it."
            },
            {
              "name": "simultaneousRotateAndPinchZoomEnabled",
              "required": false,
              "type": "boolean",
              "default": "none",
              "description": "Whether rotation is enabled for the pinch zoom gesture."
            },
            {
              "name": "zoomAnimationAmount",
              "required": false,
              "type": "number",
              "default": "none",
              "description": "The amount by which the zoom level increases or decreases during a double-tap-to-zoom-in or double-touch-to-zoom-out gesture. 1.0 by default. Must be positive.\n(Android only)"
            }
          ]
        },
        "default": "none",
        "description": "Gesture configuration allows to control the user touch interaction."
      },
      {
        "name": "onPress",
        "required": false,
        "type": {
          "name": "func",
          "funcSignature": "(feature:GeoJSON.Feature) => void"
        },
        "default": "none",
        "description": "Map press listener, gets called when a user presses the map\n*signature:*`(feature:GeoJSON.Feature) => void`"
      },
      {
        "name": "onLongPress",
        "required": false,
        "type": {
          "name": "func",
          "funcSignature": "(feature:GeoJSON.Feature) => void"
        },
        "default": "none",
        "description": "Map long press listener, gets called when a user long presses the map\n*signature:*`(feature:GeoJSON.Feature) => void`"
      },
      {
        "name": "onRegionWillChange",
        "required": false,
        "type": {
          "name": "func",
          "funcSignature": "(feature:GeoJSON.Feature) => void"
        },
        "default": "none",
        "description": "<v10 only\n\nThis event is triggered whenever the currently displayed map region is about to change.\n\n- `feature`: `PointFeature`  - The geojson point feature at the camera center, properties contains zoomLevel, visibleBounds\n*signature:*`(feature:GeoJSON.Feature) => void`"
      },
      {
        "name": "onRegionIsChanging",
        "required": false,
        "type": {
          "name": "func",
          "funcSignature": "(feature:GeoJSON.Feature) => void"
        },
        "default": "none",
        "description": "This event is triggered whenever the currently displayed map region is changing.\n\n- `feature`: `PointFeature`  - The geojson point feature at the camera center, properties contains zoomLevel, visibleBounds\n*signature:*`(feature:GeoJSON.Feature) => void`"
      },
      {
        "name": "onRegionDidChange",
        "required": false,
        "type": {
          "name": "func",
          "funcSignature": "(feature:GeoJSON.Feature) => void"
        },
        "default": "none",
        "description": "This event is triggered whenever the currently displayed map region finished changing.\n\n- `feature`: `PointFeature`  - The geojson point feature at the camera center, properties contains zoomLevel, visibleBounds\n*signature:*`(feature:GeoJSON.Feature) => void`"
      },
      {
        "name": "onCameraChanged",
        "required": false,
        "type": {
          "name": "func",
          "funcSignature": "(state:{properties: {center: GeoJSON.Position, bounds: {ne: GeoJSON.Position, sw: GeoJSON.Position}, zoom: number, heading: number, pitch: number}, gestures: {isGestureActive: boolean}, timestamp: number}) => void"
        },
        "default": "none",
        "description": "v10 only, replaces onRegionIsChanging\n*signature:*`(state:{properties: {center: GeoJSON.Position, bounds: {ne: GeoJSON.Position, sw: GeoJSON.Position}, zoom: number, heading: number, pitch: number}, gestures: {isGestureActive: boolean}, timestamp: number}) => void`"
      },
      {
        "name": "onMapIdle",
        "required": false,
        "type": {
          "name": "func",
          "funcSignature": "(state:{properties: {center: GeoJSON.Position, bounds: {ne: GeoJSON.Position, sw: GeoJSON.Position}, zoom: number, heading: number, pitch: number}, gestures: {isGestureActive: boolean}, timestamp: number}) => void"
        },
        "default": "none",
        "description": "v10 only, replaces onRegionDidChange\n*signature:*`(state:{properties: {center: GeoJSON.Position, bounds: {ne: GeoJSON.Position, sw: GeoJSON.Position}, zoom: number, heading: number, pitch: number}, gestures: {isGestureActive: boolean}, timestamp: number}) => void`"
      },
      {
        "name": "onWillStartLoadingMap",
        "required": false,
        "type": {
          "name": "func",
          "funcSignature": "() => void"
        },
        "default": "none",
        "description": "This event is triggered when the map is about to start loading a new map style.\n*signature:*`() => void`"
      },
      {
        "name": "onDidFinishLoadingMap",
        "required": false,
        "type": {
          "name": "func",
          "funcSignature": "() => void"
        },
        "default": "none",
        "description": "This is triggered when the map has successfully loaded a new map style.\n*signature:*`() => void`"
      },
      {
        "name": "onDidFailLoadingMap",
        "required": false,
        "type": {
          "name": "func",
          "funcSignature": "() => void"
        },
        "default": "none",
        "description": "This event is triggered when the map has failed to load a new map style. On v10 it's deprecated and replaced by onMapLoadingError\n**DEPRECATED** use onMapLoadingError\n*signature:*`() => void`"
      },
      {
        "name": "onMapLoadingError",
        "required": false,
        "type": {
          "name": "func",
          "funcSignature": "() => void"
        },
        "default": "none",
        "description": "This event is tiggered when there is an error during map load. V10 only, replaces onDidFailLoadingMap, might be called multiple times and not exclusive with onDidFinishLoadingMap.\n*signature:*`() => void`"
      },
      {
        "name": "onWillStartRenderingFrame",
        "required": false,
        "type": {
          "name": "func",
          "funcSignature": "() => void"
        },
        "default": "none",
        "description": "This event is triggered when the map will start rendering a frame.\n*signature:*`() => void`"
      },
      {
        "name": "onDidFinishRenderingFrame",
        "required": false,
        "type": {
          "name": "func",
          "funcSignature": "() => void"
        },
        "default": "none",
        "description": "This event is triggered when the map finished rendering a frame.\n*signature:*`() => void`"
      },
      {
        "name": "onDidFinishRenderingFrameFully",
        "required": false,
        "type": {
          "name": "func",
          "funcSignature": "() => void"
        },
        "default": "none",
        "description": "This event is triggered when the map fully finished rendering a frame.\n*signature:*`() => void`"
      },
      {
        "name": "onWillStartRenderingMap",
        "required": false,
        "type": {
          "name": "func",
          "funcSignature": "() => void"
        },
        "default": "none",
        "description": "This event is triggered when the map will start rendering the map.\n*signature:*`() => void`"
      },
      {
        "name": "onDidFinishRenderingMap",
        "required": false,
        "type": {
          "name": "func",
          "funcSignature": "() => void"
        },
        "default": "none",
        "description": "This event is triggered when the map finished rendering the map.\n*signature:*`() => void`"
      },
      {
        "name": "onDidFinishRenderingMapFully",
        "required": false,
        "type": {
          "name": "func",
          "funcSignature": "() => void"
        },
        "default": "none",
        "description": "This event is triggered when the map fully finished rendering the map.\n*signature:*`() => void`"
      },
      {
        "name": "onUserLocationUpdate",
        "required": false,
        "type": {
          "name": "func",
          "funcSignature": "(feature:Location) => void"
        },
        "default": "none",
        "description": "This event is triggered when the user location is updated.\n*signature:*`(feature:Location) => void`"
      },
      {
        "name": "onDidFinishLoadingStyle",
        "required": false,
        "type": {
          "name": "func",
          "funcSignature": "() => void"
        },
        "default": "none",
        "description": "This event is triggered when a style has finished loading.\n*signature:*`() => void`"
      },
      {
        "name": "regionWillChangeDebounceTime",
        "required": false,
        "type": "number",
        "default": "10",
        "description": "The emitted frequency of regionwillchange events"
      },
      {
        "name": "regionDidChangeDebounceTime",
        "required": false,
        "type": "number",
        "default": "500",
        "description": "The emitted frequency of regiondidchange events"
      },
      {
        "name": "deselectAnnotationOnTap",
        "required": false,
        "type": "boolean",
        "default": "none",
        "description": "Set to true to deselect any selected annotation when the map is tapped. If set to true you will not receive\nthe onPress event for the taps that deselect the annotation. Default is false."
      }
    ],
    "fileNameWithExt": "MapView.tsx",
    "relPath": "src/components/MapView.tsx",
    "name": "MapView"
  },
  "MarkerView": {
    "description": "MarkerView represents an interactive React Native marker on the map.\n\nIf you have static views, consider using PointAnnotation or SymbolLayer to display\nan image, as they'll offer much better performance. Mapbox suggests using this\ncomponent for a maximum of around 100 views displayed at one time.\n\nThis is implemented with view annotations on [Android](https://docs.mapbox.com/android/maps/guides/annotations/view-annotations/)\nand [iOS](https://docs.mapbox.com/ios/maps/guides/annotations/view-annotations).\n\nThis component has no dedicated `onPress` method. Instead, you should handle gestures\nwith the React views passed in as `children`.",
    "displayName": "MarkerView",
    "methods": [],
    "props": [
      {
        "name": "coordinate",
        "required": true,
        "type": "Position",
        "default": "none",
        "description": "The center point (specified as a map coordinate) of the marker."
      },
      {
        "name": "anchor",
        "required": false,
        "type": {
          "name": "shape",
          "value": [
            {
              "name": "x",
              "required": true,
              "type": "number",
              "default": "none",
              "description": "FIX ME NO DESCRIPTION"
            },
            {
              "name": "y",
              "required": true,
              "type": "number",
              "default": "none",
              "description": "FIX ME NO DESCRIPTION"
            }
          ]
        },
        "default": "{ x: 0.5, y: 0.5 }",
        "description": "Any coordinate between (0, 0) and (1, 1), where (0, 0) is the top-left corner of\nthe view, and (1, 1) is the bottom-right corner. Defaults to the center at (0.5, 0.5)."
      },
      {
        "name": "allowOverlap",
        "required": false,
        "type": "boolean",
        "default": "false",
        "description": "@v10\n\nWhether or not nearby markers on the map should all be displayed. If false, adjacent\nmarkers will 'collapse' and only one will be shown. Defaults to false."
      },
      {
        "name": "allowOverlapWithPuck",
        "required": false,
        "type": "boolean",
        "default": "false",
        "description": "Whether or not nearby markers on the map should be hidden if close to a\nUserLocation puck. Defaults to false."
      },
      {
        "name": "isSelected",
        "required": false,
        "type": "boolean",
        "default": "false",
        "description": "FIX ME NO DESCRIPTION"
      },
      {
        "name": "children",
        "required": true,
        "type": "ReactReactElement",
        "default": "none",
        "description": "One or more valid React Native views."
      }
    ],
    "fileNameWithExt": "MarkerView.tsx",
    "relPath": "src/components/MarkerView.tsx",
    "name": "MarkerView"
  },
  "ModelLayer": {
    "description": "ModelLayer is a style layer that renders one or more stroked polylines on the map.",
    "displayName": "ModelLayer",
    "methods": [],
    "props": [
      {
        "name": "id",
        "required": true,
        "type": "string",
        "default": "none",
        "description": "A string that uniquely identifies the source in the style to which it is added."
      },
      {
        "name": "existing",
        "required": false,
        "type": "boolean",
        "default": "none",
        "description": "The id refers to en existing layer in the style. Does not create a new layer."
      },
      {
        "name": "sourceID",
        "required": false,
        "type": "string",
        "default": "Mapbox.StyleSource.DefaultSourceID",
        "description": "The source from which to obtain the data to style.\nIf the source has not yet been added to the current style, the behavior is undefined.\nInferred from parent source only if the layer is a direct child to it."
      },
      {
        "name": "sourceLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Identifier of the layer within the source identified by the sourceID property from which the receiver obtains the data to style."
      },
      {
        "name": "aboveLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Inserts a layer above aboveLayerID."
      },
      {
        "name": "belowLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Inserts a layer below belowLayerID"
      },
      {
        "name": "layerIndex",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "Inserts a layer at a specified index"
      },
      {
        "name": "filter",
        "required": false,
        "type": "FilterExpression",
        "default": "none",
        "description": "Filter only the features in the source layer that satisfy a condition that you define"
      },
      {
        "name": "minZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "The minimum zoom level at which the layer gets parsed and appears."
      },
      {
        "name": "maxZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "The maximum zoom level at which the layer gets parsed and appears."
      },
      {
        "name": "slot",
        "required": false,
        "type": "'bottom' \\| 'middle' \\| 'top'",
        "default": "none",
        "description": "The slot this layer is assigned to. If specified, and a slot with that name exists, it will be placed at that position in the layer order.\n\nv11 only"
      },
      {
        "name": "style",
        "required": false,
        "type": "ModelLayerStyleProps",
        "default": "none",
        "description": "Customizable style attributes"
      }
    ],
    "fileNameWithExt": "ModelLayer.tsx",
    "relPath": "src/components/ModelLayer.tsx",
    "name": "ModelLayer",
    "mbx": {
      "name": "model"
    },
    "styles": []
  },
  "Models": {
    "description": "Name of 3D model assets to be used in the map",
    "displayName": "Models",
    "methods": [],
    "props": [
      {
        "name": "models",
        "required": true,
        "type": {
          "name": "shape",
          "value": [
            {
              "name": {
                "name": "string"
              },
              "required": true,
              "type": "union",
              "default": "none",
              "description": "FIX ME NO DESCRIPTION"
            }
          ]
        },
        "default": "none",
        "description": "pair odf model name to gltf and gbl file path/url, or asset id."
      }
    ],
    "fileNameWithExt": "Models.tsx",
    "relPath": "src/components/Models.tsx",
    "name": "Models"
  },
  "PointAnnotation": {
    "description": "PointAnnotation represents a one-dimensional shape located at a single geographical coordinate.\n\nConsider using ShapeSource and SymbolLayer instead, if you have many points and static images,\nthey'll offer much better performance.\n\nIf you need interactive views please use MarkerView because PointAnnotation will render children onto a bitmap.\nAlso disable any kind of animations like `fadeDuration` of `Image`.\nOtherwise, the bitmap might be rendered at an unknown state of the animation.",
    "displayName": "PointAnnotation",
    "methods": [
      {
        "name": "refresh",
        "docblock": "On v10 and pre v10 android point annotation is rendered offscreen with a canvas into an image.\nTo rerender the image from the current state of the view call refresh.\nCall this for example from Image#onLoad.",
        "modifiers": [],
        "params": [],
        "returns": null,
        "description": "On v10 and pre v10 android point annotation is rendered offscreen with a canvas into an image.\nTo rerender the image from the current state of the view call refresh.\nCall this for example from Image#onLoad.",
        "examples": []
      }
    ],
    "props": [
      {
        "name": "id",
        "required": true,
        "type": "string",
        "default": "none",
        "description": "A string that uniquely identifies the annotation"
      },
      {
        "name": "title",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "The string containing the annotation’s title. Note this is required to be set if you want to see a callout appear on iOS."
      },
      {
        "name": "snippet",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "The string containing the annotation’s snippet(subtitle). Not displayed in the default callout."
      },
      {
        "name": "selected",
        "required": false,
        "type": "boolean",
        "default": "none",
        "description": "Manually selects/deselects annotation"
      },
      {
        "name": "draggable",
        "required": false,
        "type": "boolean",
        "default": "false",
        "description": "Enable or disable dragging. Defaults to false."
      },
      {
        "name": "coordinate",
        "required": true,
        "type": "Position",
        "default": "none",
        "description": "The center point (specified as a map coordinate) of the annotation."
      },
      {
        "name": "anchor",
        "required": false,
        "type": {
          "name": "shape",
          "value": [
            {
              "name": "x",
              "required": true,
              "type": "number",
              "default": "none",
              "description": "See anchor"
            },
            {
              "name": "y",
              "required": true,
              "type": "number",
              "default": "none",
              "description": "See anchor"
            }
          ]
        },
        "default": "{ x: 0.5, y: 0.5 }",
        "description": "Specifies the anchor being set on a particular point of the annotation.\nThe anchor point is specified in the continuous space [0.0, 1.0] x [0.0, 1.0],\nwhere (0, 0) is the top-left corner of the image, and (1, 1) is the bottom-right corner.\nNote this is only for custom annotations not the default pin view.\nDefaults to the center of the view."
      },
      {
        "name": "onSelected",
        "required": false,
        "type": {
          "name": "func",
          "funcSignature": "(payload:Feature) => void"
        },
        "default": "none",
        "description": "This callback is fired once this annotation is selected. Returns a Feature as the first param.\n*signature:*`(payload:Feature) => void`"
      },
      {
        "name": "onDeselected",
        "required": false,
        "type": {
          "name": "func",
          "funcSignature": "(payload:Feature) => void"
        },
        "default": "none",
        "description": "This callback is fired once this annotation is deselected.\n*signature:*`(payload:Feature) => void`"
      },
      {
        "name": "onDragStart",
        "required": false,
        "type": {
          "name": "func",
          "funcSignature": "(payload:Feature) => void"
        },
        "default": "none",
        "description": "This callback is fired once this annotation has started being dragged.\n*signature:*`(payload:Feature) => void`"
      },
      {
        "name": "onDragEnd",
        "required": false,
        "type": {
          "name": "func",
          "funcSignature": "(payload:Feature) => void"
        },
        "default": "none",
        "description": "This callback is fired once this annotation has stopped being dragged.\n*signature:*`(payload:Feature) => void`"
      },
      {
        "name": "onDrag",
        "required": false,
        "type": {
          "name": "func",
          "funcSignature": "(payload:Feature) => void"
        },
        "default": "none",
        "description": "This callback is fired while this annotation is being dragged.\n*signature:*`(payload:Feature) => void`"
      },
      {
        "name": "children",
        "required": true,
        "type": "React.ReactElement \\| [React.ReactElement, React.ReactElement]",
        "default": "none",
        "description": "Expects one child, and an optional callout can be added as well"
      },
      {
        "name": "style",
        "required": false,
        "type": "ViewProps['style']",
        "default": "none",
        "description": "FIX ME NO DESCRIPTION"
      }
    ],
    "fileNameWithExt": "PointAnnotation.tsx",
    "relPath": "src/components/PointAnnotation.tsx",
    "name": "PointAnnotation"
  },
  "RasterDemSource": {
    "description": "",
    "displayName": "RasterDemSource",
    "methods": [],
    "props": [
      {
        "name": "id",
        "required": false,
        "type": "string",
        "default": "MapboxGL.StyleSource.DefaultSourceID",
        "description": "A string that uniquely identifies the source."
      },
      {
        "name": "existing",
        "required": false,
        "type": "boolean",
        "default": "none",
        "description": "The id refers to en existing source in the style. Does not create a new source."
      },
      {
        "name": "url",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "A URL to a TileJSON configuration file describing the source’s contents and other metadata."
      },
      {
        "name": "tileUrlTemplates",
        "required": false,
        "type": "Array",
        "default": "none",
        "description": "An array of tile URL templates. If multiple endpoints are specified, clients may use any combination of endpoints.\nExample: https://example.com/raster-tiles/{z}/{x}/{y}.png"
      },
      {
        "name": "minZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "An unsigned integer that specifies the minimum zoom level at which to display tiles from the source.\nThe value should be between 0 and 22, inclusive, and less than\nmaxZoomLevel, if specified. The default value for this option is 0."
      },
      {
        "name": "maxZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "An unsigned integer that specifies the maximum zoom level at which to display tiles from the source.\nThe value should be between 0 and 22, inclusive, and less than\nminZoomLevel, if specified. The default value for this option is 22."
      },
      {
        "name": "tileSize",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "Size of the map tiles.\nMapbox urls default to 256, all others default to 512."
      },
      {
        "name": "children",
        "required": false,
        "type": "React.ReactElement \\| React.ReactElement[]",
        "default": "none",
        "description": "FIX ME NO DESCRIPTION"
      }
    ],
    "fileNameWithExt": "RasterDemSource.tsx",
    "relPath": "src/components/RasterDemSource.tsx",
    "name": "RasterDemSource"
  },
  "RasterLayer": {
    "description": "",
    "displayName": "RasterLayer",
    "methods": [],
    "props": [
      {
        "name": "id",
        "required": true,
        "type": "string",
        "default": "none",
        "description": "A string that uniquely identifies the source in the style to which it is added."
      },
      {
        "name": "existing",
        "required": false,
        "type": "boolean",
        "default": "none",
        "description": "The id refers to en existing layer in the style. Does not create a new layer."
      },
      {
        "name": "sourceID",
        "required": false,
        "type": "string",
        "default": "Mapbox.StyleSource.DefaultSourceID",
        "description": "The source from which to obtain the data to style.\nIf the source has not yet been added to the current style, the behavior is undefined.\nInferred from parent source only if the layer is a direct child to it."
      },
      {
        "name": "sourceLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Identifier of the layer within the source identified by the sourceID property from which the receiver obtains the data to style."
      },
      {
        "name": "aboveLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Inserts a layer above aboveLayerID."
      },
      {
        "name": "belowLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Inserts a layer below belowLayerID"
      },
      {
        "name": "layerIndex",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "Inserts a layer at a specified index"
      },
      {
        "name": "filter",
        "required": false,
        "type": "FilterExpression",
        "default": "none",
        "description": "Filter only the features in the source layer that satisfy a condition that you define"
      },
      {
        "name": "minZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "The minimum zoom level at which the layer gets parsed and appears."
      },
      {
        "name": "maxZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "The maximum zoom level at which the layer gets parsed and appears."
      },
      {
        "name": "slot",
        "required": false,
        "type": "'bottom' \\| 'middle' \\| 'top'",
        "default": "none",
        "description": "The slot this layer is assigned to. If specified, and a slot with that name exists, it will be placed at that position in the layer order.\n\nv11 only"
      },
      {
        "name": "style",
        "required": true,
        "type": "RasterLayerStyleProps",
        "default": "none",
        "description": "Customizable style attributes"
      }
    ],
    "fileNameWithExt": "RasterLayer.tsx",
    "relPath": "src/components/RasterLayer.tsx",
    "name": "RasterLayer",
    "mbx": {
      "name": "raster"
    },
    "styles": [
      {
        "name": "visibility",
        "type": "enum",
        "values": [
          {
            "value": "visible",
            "doc": "The layer is shown."
          },
          {
            "value": "none",
            "doc": "The layer is not shown."
          }
        ],
        "default": "visible",
        "description": "Whether this layer is displayed.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false
        },
        "mbx": {
          "fullName": "layout-raster-visibility",
          "name": "visibility",
          "namespace": "layout"
        }
      },
      {
        "name": "rasterOpacity",
        "type": "number",
        "values": [],
        "minimum": 0,
        "maximum": 1,
        "default": 1,
        "description": "The opacity at which the image will be drawn.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-raster-raster-opacity",
          "name": "raster-opacity",
          "namespace": "paint"
        }
      },
      {
        "name": "rasterHueRotate",
        "type": "number",
        "values": [],
        "units": "degrees",
        "default": 0,
        "description": "Rotates hues around the color wheel.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-raster-raster-hue-rotate",
          "name": "raster-hue-rotate",
          "namespace": "paint"
        }
      },
      {
        "name": "rasterBrightnessMin",
        "type": "number",
        "values": [],
        "minimum": 0,
        "maximum": 1,
        "default": 0,
        "description": "Increase or reduce the brightness of the image. The value is the minimum brightness.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-raster-raster-brightness-min",
          "name": "raster-brightness-min",
          "namespace": "paint"
        }
      },
      {
        "name": "rasterBrightnessMax",
        "type": "number",
        "values": [],
        "minimum": 0,
        "maximum": 1,
        "default": 1,
        "description": "Increase or reduce the brightness of the image. The value is the maximum brightness.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-raster-raster-brightness-max",
          "name": "raster-brightness-max",
          "namespace": "paint"
        }
      },
      {
        "name": "rasterSaturation",
        "type": "number",
        "values": [],
        "minimum": -1,
        "maximum": 1,
        "default": 0,
        "description": "Increase or reduce the saturation of the image.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-raster-raster-saturation",
          "name": "raster-saturation",
          "namespace": "paint"
        }
      },
      {
        "name": "rasterContrast",
        "type": "number",
        "values": [],
        "minimum": -1,
        "maximum": 1,
        "default": 0,
        "description": "Increase or reduce the contrast of the image.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-raster-raster-contrast",
          "name": "raster-contrast",
          "namespace": "paint"
        }
      },
      {
        "name": "rasterResampling",
        "type": "enum",
        "values": [
          {
            "value": "linear",
            "doc": "(Bi)linear filtering interpolates pixel values using the weighted average of the four closest original source pixels creating a smooth but blurry look when overscaled"
          },
          {
            "value": "nearest",
            "doc": "Nearest neighbor filtering interpolates pixel values using the nearest original source pixel creating a sharp but pixelated look when overscaled"
          }
        ],
        "default": "linear",
        "description": "The resampling/interpolation method to use for overscaling, also known as texture magnification filter",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom"
          ]
        },
        "mbx": {
          "fullName": "paint-raster-raster-resampling",
          "name": "raster-resampling",
          "namespace": "paint"
        }
      },
      {
        "name": "rasterFadeDuration",
        "type": "number",
        "values": [],
        "minimum": 0,
        "units": "milliseconds",
        "default": 300,
        "description": "Fade duration when a new tile is added.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom"
          ]
        },
        "transition": false,
        "mbx": {
          "fullName": "paint-raster-raster-fade-duration",
          "name": "raster-fade-duration",
          "namespace": "paint"
        }
      }
    ]
  },
  "RasterSource": {
    "description": "RasterSource is a map content source that supplies raster image tiles to be shown on the map.\nThe location of and metadata about the tiles are defined either by an option dictionary\nor by an external file that conforms to the TileJSON specification.",
    "displayName": "RasterSource",
    "methods": [],
    "props": [
      {
        "name": "id",
        "required": false,
        "type": "string",
        "default": "MapboxGL.StyleSource.DefaultSourceID",
        "description": "A string that uniquely identifies the source."
      },
      {
        "name": "existing",
        "required": false,
        "type": "boolean",
        "default": "none",
        "description": "The id refers to en existing source in the style. Does not create a new source."
      },
      {
        "name": "url",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "A URL to a TileJSON configuration file describing the source’s contents and other metadata."
      },
      {
        "name": "tileUrlTemplates",
        "required": false,
        "type": "Array",
        "default": "none",
        "description": "An array of tile URL templates. If multiple endpoints are specified, clients may use any combination of endpoints.\nExample: https://example.com/raster-tiles/{z}/{x}/{y}.png"
      },
      {
        "name": "minZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "An unsigned integer that specifies the minimum zoom level at which to display tiles from the source.\nThe value should be between 0 and 22, inclusive, and less than\nmaxZoomLevel, if specified. The default value for this option is 0."
      },
      {
        "name": "maxZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "An unsigned integer that specifies the maximum zoom level at which to display tiles from the source.\nThe value should be between 0 and 22, inclusive, and less than\nminZoomLevel, if specified. The default value for this option is 22."
      },
      {
        "name": "tileSize",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "Size of the map tiles.\nMapbox urls default to 256, all others default to 512."
      },
      {
        "name": "tms",
        "required": false,
        "type": "boolean",
        "default": "none",
        "description": "Influences the y direction of the tile coordinates. (tms inverts y axis)"
      },
      {
        "name": "attribution",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "An HTML or literal text string defining the buttons to be displayed in an action sheet when the\nsource is part of a map view’s style and the map view’s attribution button is pressed."
      },
      {
        "name": "children",
        "required": false,
        "type": "React.ReactElement \\| React.ReactElement[]",
        "default": "none",
        "description": "FIX ME NO DESCRIPTION"
      }
    ],
    "fileNameWithExt": "RasterSource.tsx",
    "relPath": "src/components/RasterSource.tsx",
    "name": "RasterSource"
  },
  "ShapeSource": {
    "description": "ShapeSource is a map content source that supplies vector shapes to be shown on the map.\nThe shape may be an url or a GeoJSON object",
    "displayName": "ShapeSource",
    "methods": [
      {
        "name": "getClusterExpansionZoom",
        "docblock": "Returns the zoom needed to expand the cluster.\n\n@example\nconst zoom = await shapeSource.getClusterExpansionZoom(clusterId);\n\n@param  {Feature} feature - The feature cluster to expand.\n@return {number}",
        "modifiers": [
          "async"
        ],
        "params": [
          {
            "name": "feature",
            "description": "The feature cluster to expand.",
            "type": {
              "name": "string \\| GeoJSON.Feature"
            },
            "optional": false
          }
        ],
        "returns": {
          "type": {
            "name": "Promise",
            "elements": [
              {
                "name": "number"
              }
            ],
            "raw": "Promise<number>"
          }
        },
        "description": "Returns the zoom needed to expand the cluster.",
        "examples": [
          "\nconst zoom = await shapeSource.getClusterExpansionZoom(clusterId);\n\n"
        ]
      },
      {
        "name": "getClusterLeaves",
        "docblock": "Returns the FeatureCollection from the cluster.\n\n@example\nconst collection = await shapeSource.getClusterLeaves(clusterId, limit, offset);\n\n@param  {GeoJSON.Feature} feature - The feature cluster to expand.\n@param  {number} limit - The number of points to return.\n@param  {number} offset - The amount of points to skip (for pagination).\n@return {FeatureCollection}",
        "modifiers": [
          "async"
        ],
        "params": [
          {
            "name": "feature",
            "description": "The feature cluster to expand.",
            "type": {
              "name": "number \\| GeoJSON.Feature"
            },
            "optional": false
          },
          {
            "name": "limit",
            "description": "The number of points to return.",
            "type": {
              "name": "number"
            },
            "optional": false
          },
          {
            "name": "offset",
            "description": "The amount of points to skip (for pagination).",
            "type": {
              "name": "number"
            },
            "optional": false
          }
        ],
        "returns": {
          "type": {
            "name": "FeatureCollection"
          }
        },
        "description": "Returns the FeatureCollection from the cluster.",
        "examples": [
          "\nconst collection = await shapeSource.getClusterLeaves(clusterId, limit, offset);\n\n"
        ]
      },
      {
        "name": "getClusterChildren",
        "docblock": "Returns the FeatureCollection from the cluster (on the next zoom level).\n\n@example\nconst collection = await shapeSource.getClusterChildren(clusterId);\n\n@param  {GeoJSON.Feature} feature - The feature cluster to expand.\n@return {FeatureCollection}",
        "modifiers": [
          "async"
        ],
        "params": [
          {
            "name": "feature",
            "description": "The feature cluster to expand.",
            "type": {
              "name": "number \\| GeoJSON.Feature"
            },
            "optional": false
          }
        ],
        "returns": {
          "type": {
            "name": "FeatureCollection"
          }
        },
        "description": "Returns the FeatureCollection from the cluster (on the next zoom level).",
        "examples": [
          "\nconst collection = await shapeSource.getClusterChildren(clusterId);\n\n"
        ]
      },
      {
        "name": "onPress",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "optional": false,
            "type": {
              "name": "NativeSyntheticEvent"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": [
      {
        "name": "id",
        "required": false,
        "type": "string",
        "default": "MapboxGL.StyleSource.DefaultSourceID",
        "description": "A string that uniquely identifies the source."
      },
      {
        "name": "existing",
        "required": false,
        "type": "boolean",
        "default": "none",
        "description": "The id refers to en existing source in the style. Does not create a new source."
      },
      {
        "name": "url",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "An HTTP(S) URL, absolute file URL, or local file URL relative to the current application’s resource bundle."
      },
      {
        "name": "shape",
        "required": false,
        "type": "\\| GeoJSON.GeometryCollection\n\\| GeoJSON.Feature\n\\| GeoJSON.FeatureCollection\n\\| GeoJSON.Geometry\n\\| ShapeAnimatorInterface",
        "default": "none",
        "description": "The contents of the source. A shape can represent a GeoJSON geometry, a feature, or a feature collection."
      },
      {
        "name": "cluster",
        "required": false,
        "type": "boolean",
        "default": "none",
        "description": "Enables clustering on the source for point shapes."
      },
      {
        "name": "clusterRadius",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "Specifies the radius of each cluster if clustering is enabled.\nA value of 512 produces a radius equal to the width of a tile.\nThe default value is 50."
      },
      {
        "name": "clusterMaxZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "Specifies the maximum zoom level at which to cluster points if clustering is enabled.\nDefaults to one zoom level less than the value of maxZoomLevel so that, at the maximum zoom level,\nthe shapes are not clustered."
      },
      {
        "name": "clusterProperties",
        "required": false,
        "type": "object",
        "default": "none",
        "description": "[`mapbox-gl` (v8) implementation only]\nSpecifies custom properties on the generated clusters if clustering\nis enabled, aggregating values from clustered points.\n\nHas the form `{ \"property_name\": [operator, map_expression]}`, where\n `operator` is a custom reduce expression that references a special `[\"accumulated\"]` value -\n  it accumulates the property value from clusters/points the cluster contains\n `map_expression` produces the value of a single point\n\nExample: `{ \"resultingSum\": [[\"+\", [\"accumulated\"], [\"get\", \"resultingSum\"]], [\"get\", \"scalerank\"]] }`"
      },
      {
        "name": "maxZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "Specifies the maximum zoom level at which to create vector tiles.\nA greater value produces greater detail at high zoom levels.\nThe default value is 18."
      },
      {
        "name": "buffer",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "Specifies the size of the tile buffer on each side.\nA value of 0 produces no buffer. A value of 512 produces a buffer as wide as the tile itself.\nLarger values produce fewer rendering artifacts near tile edges and slower performance.\nThe default value is 128."
      },
      {
        "name": "tolerance",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "Specifies the Douglas-Peucker simplification tolerance.\nA greater value produces simpler geometries and improves performance.\nThe default value is 0.375."
      },
      {
        "name": "lineMetrics",
        "required": false,
        "type": "boolean",
        "default": "none",
        "description": "Whether to calculate line distance metrics.\nThis is required for line layers that specify lineGradient values.\nThe default value is false."
      },
      {
        "name": "onPress",
        "required": false,
        "type": {
          "name": "func",
          "funcSignature": "(event:OnPressEvent) => void"
        },
        "default": "none",
        "description": "Source press listener, gets called when a user presses one of the children layers only\nif that layer has a higher z-index than another source layers\n\n- `event`: `Object` \n- `event.features`: `Object[]`  - the geojson features that have hit by the press (might be multiple)\n- `event.coordinates`: `Object`  - the coordinates of the click\n- `event.point`: `Object`  - the point of the click\n@return void\n*signature:*`(event:OnPressEvent) => void`"
      },
      {
        "name": "hitbox",
        "required": false,
        "type": {
          "name": "shape",
          "value": [
            {
              "name": "width",
              "required": true,
              "type": "number",
              "default": "none",
              "description": "`width` of hitbox"
            },
            {
              "name": "height",
              "required": true,
              "type": "number",
              "default": "none",
              "description": "`height` of hitbox"
            }
          ]
        },
        "default": "none",
        "description": "Overrides the default touch hitbox(44x44 pixels) for the source layers"
      },
      {
        "name": "children",
        "required": false,
        "type": "React.ReactElement \\| React.ReactElement[]",
        "default": "none",
        "description": "FIX ME NO DESCRIPTION"
      }
    ],
    "fileNameWithExt": "ShapeSource.tsx",
    "relPath": "src/components/ShapeSource.tsx",
    "name": "ShapeSource"
  },
  "SkyLayer": {
    "description": "SkyLayer is a spherical dome around the map that is always rendered behind all other layers",
    "displayName": "SkyLayer",
    "methods": [],
    "props": [
      {
        "name": "id",
        "required": true,
        "type": "string",
        "default": "none",
        "description": "A string that uniquely identifies the source in the style to which it is added."
      },
      {
        "name": "existing",
        "required": false,
        "type": "boolean",
        "default": "none",
        "description": "The id refers to en existing layer in the style. Does not create a new layer."
      },
      {
        "name": "sourceID",
        "required": false,
        "type": "string",
        "default": "Mapbox.StyleSource.DefaultSourceID",
        "description": "The source from which to obtain the data to style.\nIf the source has not yet been added to the current style, the behavior is undefined."
      },
      {
        "name": "aboveLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Inserts a layer above aboveLayerID."
      },
      {
        "name": "belowLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Inserts a layer below belowLayerID"
      },
      {
        "name": "layerIndex",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "Inserts a layer at a specified index"
      },
      {
        "name": "filter",
        "required": false,
        "type": "FilterExpression",
        "default": "none",
        "description": "Filter only the features in the source layer that satisfy a condition that you define"
      },
      {
        "name": "style",
        "required": false,
        "type": "SkyLayerStyleProps",
        "default": "none",
        "description": "Customizable style attributes"
      }
    ],
    "fileNameWithExt": "SkyLayer.tsx",
    "relPath": "src/components/SkyLayer.tsx",
    "name": "SkyLayer",
    "mbx": {
      "name": "sky"
    },
    "styles": [
      {
        "name": "visibility",
        "type": "enum",
        "values": [
          {
            "value": "visible",
            "doc": "The layer is shown."
          },
          {
            "value": "none",
            "doc": "The layer is not shown."
          }
        ],
        "default": "visible",
        "description": "Whether this layer is displayed.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false
        },
        "mbx": {
          "fullName": "layout-sky-visibility",
          "name": "visibility",
          "namespace": "layout"
        }
      },
      {
        "name": "skyType",
        "type": "enum",
        "values": [
          {
            "value": "gradient",
            "doc": "Renders the sky with a gradient that can be configured with `sky-gradient-radius` and `sky-gradient`."
          },
          {
            "value": "atmosphere",
            "doc": "Renders the sky with a simulated atmospheric scattering algorithm, the sun direction can be attached to the light position or explicitly set through `sky-atmosphere-sun`."
          }
        ],
        "default": "atmosphere",
        "description": "The type of the sky",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom"
          ]
        },
        "mbx": {
          "fullName": "paint-sky-sky-type",
          "name": "sky-type",
          "namespace": "paint"
        }
      },
      {
        "name": "skyAtmosphereSun",
        "type": "array<number>",
        "values": [],
        "minimum": [
          0,
          0
        ],
        "maximum": [
          360,
          180
        ],
        "units": "degrees",
        "description": "Position of the sun center [a azimuthal angle, p polar angle]. The azimuthal angle indicates the position of the sun relative to 0° north, where degrees proceed clockwise. The polar angle indicates the height of the sun, where 0° is directly above, at zenith, and 90° at the horizon. When this property is ommitted, the sun center is directly inherited from the light position.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom"
          ]
        },
        "transition": false,
        "mbx": {
          "fullName": "paint-sky-sky-atmosphere-sun",
          "name": "sky-atmosphere-sun",
          "namespace": "paint"
        }
      },
      {
        "name": "skyAtmosphereSunIntensity",
        "type": "number",
        "values": [],
        "minimum": 0,
        "maximum": 100,
        "default": 10,
        "description": "Intensity of the sun as a light source in the atmosphere (on a scale from 0 to a 100). Setting higher values will brighten up the sky.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "transition": false,
        "mbx": {
          "fullName": "paint-sky-sky-atmosphere-sun-intensity",
          "name": "sky-atmosphere-sun-intensity",
          "namespace": "paint"
        }
      },
      {
        "name": "skyGradientCenter",
        "type": "array<number>",
        "values": [],
        "minimum": [
          0,
          0
        ],
        "maximum": [
          360,
          180
        ],
        "units": "degrees",
        "default": [
          0,
          0
        ],
        "description": "Position of the gradient center [a azimuthal angle, p polar angle]. The azimuthal angle indicates the position of the gradient center relative to 0° north, where degrees proceed clockwise. The polar angle indicates the height of the gradient center, where 0° is directly above, at zenith, and 90° at the horizon.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom"
          ]
        },
        "transition": false,
        "mbx": {
          "fullName": "paint-sky-sky-gradient-center",
          "name": "sky-gradient-center",
          "namespace": "paint"
        }
      },
      {
        "name": "skyGradientRadius",
        "type": "number",
        "values": [],
        "minimum": 0,
        "maximum": 180,
        "default": 90,
        "description": "The angular distance (measured in degrees) from `skyGradientCenter` up to which the gradient extends. A value of 180 causes the gradient to wrap around to the opposite direction from `skyGradientCenter`.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom"
          ]
        },
        "transition": false,
        "mbx": {
          "fullName": "paint-sky-sky-gradient-radius",
          "name": "sky-gradient-radius",
          "namespace": "paint"
        }
      },
      {
        "name": "skyGradient",
        "type": "color",
        "values": [],
        "default": [
          "interpolate",
          [
            "linear"
          ],
          [
            "sky-radial-progress"
          ],
          0.8,
          "#87ceeb",
          1,
          "white"
        ],
        "description": "Defines a radial color gradient with which to color the sky. The color values can be interpolated with an expression using `skyRadialProgress`. The range [0, 1] for the interpolant covers a radial distance (in degrees) of [0, `skyGradientRadius`] centered at the position specified by `skyGradientCenter`.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "sky-radial-progress"
          ]
        },
        "transition": false,
        "mbx": {
          "fullName": "paint-sky-sky-gradient",
          "name": "sky-gradient",
          "namespace": "paint"
        }
      },
      {
        "name": "skyAtmosphereHaloColor",
        "type": "color",
        "values": [],
        "default": "white",
        "description": "A color applied to the atmosphere sun halo. The alpha channel describes how strongly the sun halo is represented in an atmosphere sky layer.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "transition": false,
        "mbx": {
          "fullName": "paint-sky-sky-atmosphere-halo-color",
          "name": "sky-atmosphere-halo-color",
          "namespace": "paint"
        }
      },
      {
        "name": "skyAtmosphereColor",
        "type": "color",
        "values": [],
        "default": "white",
        "description": "A color used to tweak the main atmospheric scattering coefficients. Using white applies the default coefficients giving the natural blue color to the atmosphere. This color affects how heavily the corresponding wavelength is represented during scattering. The alpha channel describes the density of the atmosphere, with 1 maximum density and 0 no density.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "transition": false,
        "mbx": {
          "fullName": "paint-sky-sky-atmosphere-color",
          "name": "sky-atmosphere-color",
          "namespace": "paint"
        }
      },
      {
        "name": "skyOpacity",
        "type": "number",
        "values": [],
        "minimum": 0,
        "maximum": 1,
        "default": 1,
        "description": "The opacity of the entire sky layer.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-sky-sky-opacity",
          "name": "sky-opacity",
          "namespace": "paint"
        }
      }
    ]
  },
  "Style": {
    "description": "Style is a component that automatically adds sources / layers to the map using Mapbox GL Style Spec.\nOnly [`sources`](https://docs.mapbox.com/mapbox-gl-js/style-spec/sources) & [`layers`](https://docs.mapbox.com/mapbox-gl-js/style-spec/layers/) are supported.\nOther fields such as `sprites`, `glyphs` etc. will be ignored. Not all layer / source attributes from the style spec are supported, in general the supported attributes will be mentioned under https://github.com/rnmapbox/maps/tree/main/docs.",
    "displayName": "Style",
    "methods": [],
    "props": [
      {
        "name": "json",
        "required": true,
        "type": "MapboxJSON \\| URL",
        "default": "none",
        "description": "A JSON object conforming to the schema described in the Mapbox Style Specification , or a URL to such JSON."
      }
    ],
    "fileNameWithExt": "Style.tsx",
    "relPath": "src/components/Style.tsx",
    "name": "Style"
  },
  "StyleImport": {
    "description": "Use StyleImport to set configuration options on the new standard style. **V11 only.**\n\nSee https://github.com/mapbox/mapbox-maps-ios/blob/main/Sources/MapboxMaps/Documentation.docc/Migrate%20to%20v11.md#21-the-mapbox-standard-style",
    "methods": [],
    "props": [
      {
        "name": "id",
        "required": true,
        "type": "string",
        "default": "none",
        "description": "id of the style import (eg. basemap)"
      },
      {
        "name": "existing",
        "required": true,
        "type": "boolean",
        "default": "none",
        "description": "existing is now always required as true"
      },
      {
        "name": "config",
        "required": true,
        "type": {
          "name": "shape",
          "value": [
            {
              "name": {
                "name": "string"
              },
              "required": true,
              "type": "string",
              "default": "none",
              "description": "FIX ME NO DESCRIPTION"
            }
          ]
        },
        "default": "none",
        "description": "config is a dictionary of configuration options for the style import.\n\nSee https://github.com/mapbox/mapbox-maps-ios/blob/main/Sources/MapboxMaps/Documentation.docc/Migrate%20to%20v11.md#21-the-mapbox-standard-style"
      }
    ],
    "fileNameWithExt": "StyleImport.tsx",
    "relPath": "src/components/StyleImport.tsx",
    "name": "StyleImport"
  },
  "SymbolLayer": {
    "description": "SymbolLayer is a style layer that renders icon and text labels at points or along lines on the map.",
    "displayName": "SymbolLayer",
    "methods": [],
    "props": [
      {
        "name": "id",
        "required": true,
        "type": "string",
        "default": "none",
        "description": "A string that uniquely identifies the source in the style to which it is added."
      },
      {
        "name": "existing",
        "required": false,
        "type": "boolean",
        "default": "none",
        "description": "The id refers to en existing layer in the style. Does not create a new layer."
      },
      {
        "name": "sourceID",
        "required": false,
        "type": "string",
        "default": "Mapbox.StyleSource.DefaultSourceID",
        "description": "The source from which to obtain the data to style.\nIf the source has not yet been added to the current style, the behavior is undefined.\nInferred from parent source only if the layer is a direct child to it."
      },
      {
        "name": "sourceLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Identifier of the layer within the source identified by the sourceID property from which the receiver obtains the data to style."
      },
      {
        "name": "aboveLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Inserts a layer above aboveLayerID."
      },
      {
        "name": "belowLayerID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Inserts a layer below belowLayerID"
      },
      {
        "name": "layerIndex",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "Inserts a layer at a specified index"
      },
      {
        "name": "filter",
        "required": false,
        "type": "FilterExpression",
        "default": "none",
        "description": "Filter only the features in the source layer that satisfy a condition that you define"
      },
      {
        "name": "minZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "The minimum zoom level at which the layer gets parsed and appears."
      },
      {
        "name": "maxZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "The maximum zoom level at which the layer gets parsed and appears."
      },
      {
        "name": "slot",
        "required": false,
        "type": "'bottom' \\| 'middle' \\| 'top'",
        "default": "none",
        "description": "The slot this layer is assigned to. If specified, and a slot with that name exists, it will be placed at that position in the layer order.\n\nv11 only"
      },
      {
        "name": "style",
        "required": true,
        "type": "SymbolLayerStyleProps",
        "default": "none",
        "description": "Customizable style attributes"
      },
      {
        "name": "children",
        "required": false,
        "type": "JSX.Element \\| JSX.Element[]",
        "default": "none",
        "description": "@deprecated passed children used to create an image with id of symbol in style and also set the iconImageName property accordingly.\nThis is now deprecated, use Image component instead."
      }
    ],
    "fileNameWithExt": "SymbolLayer.tsx",
    "relPath": "src/components/SymbolLayer.tsx",
    "name": "SymbolLayer",
    "mbx": {
      "name": "symbol"
    },
    "styles": [
      {
        "name": "symbolPlacement",
        "type": "enum",
        "values": [
          {
            "value": "point",
            "doc": "The label is placed at the point where the geometry is located."
          },
          {
            "value": "line",
            "doc": "The label is placed along the line of the geometry. Can only be used on `LineString` and `Polygon` geometries."
          },
          {
            "value": "line-center",
            "doc": "The label is placed at the center of the line of the geometry. Can only be used on `LineString` and `Polygon` geometries. Note that a single feature in a vector tile may contain multiple line geometries."
          }
        ],
        "default": "point",
        "description": "Label placement relative to its geometry.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-symbol-placement",
          "name": "symbol-placement",
          "namespace": "layout"
        }
      },
      {
        "name": "symbolSpacing",
        "type": "number",
        "values": [],
        "minimum": 1,
        "units": "pixels",
        "default": 250,
        "description": "Distance between two symbol anchors.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-symbol-spacing",
          "name": "symbol-spacing",
          "namespace": "layout"
        }
      },
      {
        "name": "symbolAvoidEdges",
        "type": "boolean",
        "values": [],
        "default": false,
        "description": "If true, the symbols will not cross tile edges to avoid mutual collisions. Recommended in layers that don't have enough padding in the vector tile to prevent collisions, or if it is a point symbol layer placed after a line symbol layer. When using a client that supports global collision detection, like Mapbox GL JS version 0.42.0 or greater, enabling this property is not needed to prevent clipped labels at tile boundaries.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-symbol-avoid-edges",
          "name": "symbol-avoid-edges",
          "namespace": "layout"
        }
      },
      {
        "name": "symbolSortKey",
        "type": "number",
        "values": [],
        "description": "Sorts features in ascending order based on this value. Features with lower sort keys are drawn and placed first. When `iconAllowOverlap` or `textAllowOverlap` is `false`, features with a lower sort key will have priority during placement. When `iconAllowOverlap` or `textAllowOverlap` is set to `true`, features with a higher sort key will overlap over features with a lower sort key.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom",
            "feature"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-symbol-sort-key",
          "name": "symbol-sort-key",
          "namespace": "layout"
        }
      },
      {
        "name": "symbolZOrder",
        "type": "enum",
        "values": [
          {
            "value": "auto",
            "doc": "Sorts symbols by `symbol-sort-key` if set. Otherwise, sorts symbols by their y-position relative to the viewport if `icon-allow-overlap` or `text-allow-overlap` is set to `true` or `icon-ignore-placement` or `text-ignore-placement` is `false`."
          },
          {
            "value": "viewport-y",
            "doc": "Sorts symbols by their y-position relative to the viewport if `icon-allow-overlap` or `text-allow-overlap` is set to `true` or `icon-ignore-placement` or `text-ignore-placement` is `false`."
          },
          {
            "value": "source",
            "doc": "Sorts symbols by `symbol-sort-key` if set. Otherwise, no sorting is applied; symbols are rendered in the same order as the source data."
          }
        ],
        "default": "auto",
        "description": "Determines whether overlapping symbols in the same layer are rendered in the order that they appear in the data source or by their yPosition relative to the viewport. To control the order and prioritization of symbols otherwise, use `symbolSortKey`.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-symbol-z-order",
          "name": "symbol-z-order",
          "namespace": "layout"
        }
      },
      {
        "name": "iconAllowOverlap",
        "type": "boolean",
        "values": [],
        "default": false,
        "description": "If true, the icon will be visible even if it collides with other previously drawn symbols.",
        "requires": [
          "iconImage"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-icon-allow-overlap",
          "name": "icon-allow-overlap",
          "namespace": "layout"
        }
      },
      {
        "name": "iconIgnorePlacement",
        "type": "boolean",
        "values": [],
        "default": false,
        "description": "If true, other symbols can be visible even if they collide with the icon.",
        "requires": [
          "iconImage"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-icon-ignore-placement",
          "name": "icon-ignore-placement",
          "namespace": "layout"
        }
      },
      {
        "name": "iconOptional",
        "type": "boolean",
        "values": [],
        "default": false,
        "description": "If true, text will display without their corresponding icons when the icon collides with other symbols and the text does not.",
        "requires": [
          "iconImage",
          "textField"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-icon-optional",
          "name": "icon-optional",
          "namespace": "layout"
        }
      },
      {
        "name": "iconRotationAlignment",
        "type": "enum",
        "values": [
          {
            "value": "map",
            "doc": "When `symbol-placement` is set to `point`, aligns icons east-west. When `symbol-placement` is set to `line` or `line-center`, aligns icon x-axes with the line."
          },
          {
            "value": "viewport",
            "doc": "Produces icons whose x-axes are aligned with the x-axis of the viewport, regardless of the value of `symbol-placement`."
          },
          {
            "value": "auto",
            "doc": "When `symbol-placement` is set to `point`, this is equivalent to `viewport`. When `symbol-placement` is set to `line` or `line-center`, this is equivalent to `map`."
          }
        ],
        "default": "auto",
        "description": "In combination with `symbolPlacement`, determines the rotation behavior of icons.",
        "requires": [
          "iconImage"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-icon-rotation-alignment",
          "name": "icon-rotation-alignment",
          "namespace": "layout"
        }
      },
      {
        "name": "iconSize",
        "type": "number",
        "values": [],
        "minimum": 0,
        "units": "factor of the original icon size",
        "default": 1,
        "description": "Scales the original size of the icon by the provided factor. The new pixel size of the image will be the original pixel size multiplied by `iconSize`. 1 is the original size; 3 triples the size of the image.",
        "requires": [
          "iconImage"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-icon-size",
          "name": "icon-size",
          "namespace": "layout"
        }
      },
      {
        "name": "iconTextFit",
        "type": "enum",
        "values": [
          {
            "value": "none",
            "doc": "The icon is displayed at its intrinsic aspect ratio."
          },
          {
            "value": "width",
            "doc": "The icon is scaled in the x-dimension to fit the width of the text."
          },
          {
            "value": "height",
            "doc": "The icon is scaled in the y-dimension to fit the height of the text."
          },
          {
            "value": "both",
            "doc": "The icon is scaled in both x- and y-dimensions."
          }
        ],
        "default": "none",
        "description": "Scales the icon to fit around the associated text.",
        "requires": [
          "iconImage",
          "textField"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom",
            "feature"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-icon-text-fit",
          "name": "icon-text-fit",
          "namespace": "layout"
        }
      },
      {
        "name": "iconTextFitPadding",
        "type": "array<number>",
        "values": [],
        "units": "pixels",
        "default": [
          0,
          0,
          0,
          0
        ],
        "description": "Size of the additional area added to dimensions determined by `iconTextFit`, in clockwise order: top, right, bottom, left.",
        "requires": [
          "iconImage",
          "textField"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-icon-text-fit-padding",
          "name": "icon-text-fit-padding",
          "namespace": "layout"
        }
      },
      {
        "name": "iconImage",
        "type": "resolvedImage",
        "values": [],
        "description": "Name of image in sprite to use for drawing an image background.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom",
            "feature"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-icon-image",
          "name": "icon-image",
          "namespace": "layout"
        }
      },
      {
        "name": "iconRotate",
        "type": "number",
        "values": [],
        "units": "degrees",
        "default": 0,
        "description": "Rotates the icon clockwise.",
        "requires": [
          "iconImage"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-icon-rotate",
          "name": "icon-rotate",
          "namespace": "layout"
        }
      },
      {
        "name": "iconPadding",
        "type": "number",
        "values": [],
        "minimum": 0,
        "units": "pixels",
        "default": 2,
        "description": "Size of the additional area around the icon bounding box used for detecting symbol collisions.",
        "requires": [
          "iconImage"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-icon-padding",
          "name": "icon-padding",
          "namespace": "layout"
        }
      },
      {
        "name": "iconKeepUpright",
        "type": "boolean",
        "values": [],
        "default": false,
        "description": "If true, the icon may be flipped to prevent it from being rendered upsideDown.",
        "requires": [
          "iconImage"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-icon-keep-upright",
          "name": "icon-keep-upright",
          "namespace": "layout"
        }
      },
      {
        "name": "iconOffset",
        "type": "array<number>",
        "values": [],
        "default": [
          0,
          0
        ],
        "description": "Offset distance of icon from its anchor. Positive values indicate right and down, while negative values indicate left and up. Each component is multiplied by the value of `iconSize` to obtain the final offset in pixels. When combined with `iconRotate` the offset will be as if the rotated direction was up.",
        "requires": [
          "iconImage"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-icon-offset",
          "name": "icon-offset",
          "namespace": "layout"
        }
      },
      {
        "name": "iconAnchor",
        "type": "enum",
        "values": [
          {
            "value": "center",
            "doc": "The center of the icon is placed closest to the anchor."
          },
          {
            "value": "left",
            "doc": "The left side of the icon is placed closest to the anchor."
          },
          {
            "value": "right",
            "doc": "The right side of the icon is placed closest to the anchor."
          },
          {
            "value": "top",
            "doc": "The top of the icon is placed closest to the anchor."
          },
          {
            "value": "bottom",
            "doc": "The bottom of the icon is placed closest to the anchor."
          },
          {
            "value": "top-left",
            "doc": "The top left corner of the icon is placed closest to the anchor."
          },
          {
            "value": "top-right",
            "doc": "The top right corner of the icon is placed closest to the anchor."
          },
          {
            "value": "bottom-left",
            "doc": "The bottom left corner of the icon is placed closest to the anchor."
          },
          {
            "value": "bottom-right",
            "doc": "The bottom right corner of the icon is placed closest to the anchor."
          }
        ],
        "default": "center",
        "description": "Part of the icon placed closest to the anchor.",
        "requires": [
          "iconImage"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom",
            "feature"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-icon-anchor",
          "name": "icon-anchor",
          "namespace": "layout"
        }
      },
      {
        "name": "iconPitchAlignment",
        "type": "enum",
        "values": [
          {
            "value": "map",
            "doc": "The icon is aligned to the plane of the map."
          },
          {
            "value": "viewport",
            "doc": "The icon is aligned to the plane of the viewport."
          },
          {
            "value": "auto",
            "doc": "Automatically matches the value of `icon-rotation-alignment`."
          }
        ],
        "default": "auto",
        "description": "Orientation of icon when map is pitched.",
        "requires": [
          "iconImage"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-icon-pitch-alignment",
          "name": "icon-pitch-alignment",
          "namespace": "layout"
        }
      },
      {
        "name": "textPitchAlignment",
        "type": "enum",
        "values": [
          {
            "value": "map",
            "doc": "The text is aligned to the plane of the map."
          },
          {
            "value": "viewport",
            "doc": "The text is aligned to the plane of the viewport."
          },
          {
            "value": "auto",
            "doc": "Automatically matches the value of `text-rotation-alignment`."
          }
        ],
        "default": "auto",
        "description": "Orientation of text when map is pitched.",
        "requires": [
          "textField"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-text-pitch-alignment",
          "name": "text-pitch-alignment",
          "namespace": "layout"
        }
      },
      {
        "name": "textRotationAlignment",
        "type": "enum",
        "values": [
          {
            "value": "map",
            "doc": "When `symbol-placement` is set to `point`, aligns text east-west. When `symbol-placement` is set to `line` or `line-center`, aligns text x-axes with the line."
          },
          {
            "value": "viewport",
            "doc": "Produces glyphs whose x-axes are aligned with the x-axis of the viewport, regardless of the value of `symbol-placement`."
          },
          {
            "value": "auto",
            "doc": "When `symbol-placement` is set to `point`, this is equivalent to `viewport`. When `symbol-placement` is set to `line` or `line-center`, this is equivalent to `map`."
          }
        ],
        "default": "auto",
        "description": "In combination with `symbolPlacement`, determines the rotation behavior of the individual glyphs forming the text.",
        "requires": [
          "textField"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-text-rotation-alignment",
          "name": "text-rotation-alignment",
          "namespace": "layout"
        }
      },
      {
        "name": "textField",
        "type": "formatted",
        "values": [],
        "default": "",
        "description": "Value to use for a text label. If a plain `string` is provided, it will be treated as a `formatted` with default/inherited formatting options. SDF images are not supported in formatted text and will be ignored.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom",
            "feature"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-text-field",
          "name": "text-field",
          "namespace": "layout"
        }
      },
      {
        "name": "textFont",
        "type": "array<string>",
        "values": [],
        "default": [
          "Open Sans Regular",
          "Arial Unicode MS Regular"
        ],
        "description": "Font stack to use for displaying text.",
        "requires": [
          "textField"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [
          "camera"
        ],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom",
            "feature"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-text-font",
          "name": "text-font",
          "namespace": "layout"
        }
      },
      {
        "name": "textSize",
        "type": "number",
        "values": [],
        "minimum": 0,
        "units": "pixels",
        "default": 16,
        "description": "Font size.",
        "requires": [
          "textField"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-text-size",
          "name": "text-size",
          "namespace": "layout"
        }
      },
      {
        "name": "textMaxWidth",
        "type": "number",
        "values": [],
        "minimum": 0,
        "units": "ems",
        "default": 10,
        "description": "The maximum line width for text wrapping.",
        "requires": [
          "textField"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [
          "camera"
        ],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-text-max-width",
          "name": "text-max-width",
          "namespace": "layout"
        }
      },
      {
        "name": "textLineHeight",
        "type": "number",
        "values": [],
        "units": "ems",
        "default": 1.2,
        "description": "Text leading value for multiLine text.",
        "requires": [
          "textField"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-text-line-height",
          "name": "text-line-height",
          "namespace": "layout"
        }
      },
      {
        "name": "textLetterSpacing",
        "type": "number",
        "values": [],
        "units": "ems",
        "default": 0,
        "description": "Text tracking amount.",
        "requires": [
          "textField"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [
          "camera"
        ],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-text-letter-spacing",
          "name": "text-letter-spacing",
          "namespace": "layout"
        }
      },
      {
        "name": "textJustify",
        "type": "enum",
        "values": [
          {
            "value": "auto",
            "doc": "The text is aligned towards the anchor position."
          },
          {
            "value": "left",
            "doc": "The text is aligned to the left."
          },
          {
            "value": "center",
            "doc": "The text is centered."
          },
          {
            "value": "right",
            "doc": "The text is aligned to the right."
          }
        ],
        "default": "center",
        "description": "Text justification options.",
        "requires": [
          "textField"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [
          "camera"
        ],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom",
            "feature"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-text-justify",
          "name": "text-justify",
          "namespace": "layout"
        }
      },
      {
        "name": "textRadialOffset",
        "type": "number",
        "values": [],
        "units": "ems",
        "default": 0,
        "description": "Radial offset of text, in the direction of the symbol's anchor. Useful in combination with `textVariableAnchor`, which defaults to using the twoDimensional `textOffset` if present.",
        "requires": [
          "textField"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-text-radial-offset",
          "name": "text-radial-offset",
          "namespace": "layout"
        }
      },
      {
        "name": "textVariableAnchor",
        "type": "array<enum>",
        "values": [],
        "description": "To increase the chance of placing highPriority labels on the map, you can provide an array of `textAnchor` locations: the renderer will attempt to place the label at each location, in order, before moving onto the next label. Use `textJustify: auto` to choose justification based on anchor position. To apply an offset, use the `textRadialOffset` or the twoDimensional `textOffset`.",
        "requires": [
          "textField"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-text-variable-anchor",
          "name": "text-variable-anchor",
          "namespace": "layout"
        }
      },
      {
        "name": "textAnchor",
        "type": "enum",
        "values": [
          {
            "value": "center",
            "doc": "The center of the text is placed closest to the anchor."
          },
          {
            "value": "left",
            "doc": "The left side of the text is placed closest to the anchor."
          },
          {
            "value": "right",
            "doc": "The right side of the text is placed closest to the anchor."
          },
          {
            "value": "top",
            "doc": "The top of the text is placed closest to the anchor."
          },
          {
            "value": "bottom",
            "doc": "The bottom of the text is placed closest to the anchor."
          },
          {
            "value": "top-left",
            "doc": "The top left corner of the text is placed closest to the anchor."
          },
          {
            "value": "top-right",
            "doc": "The top right corner of the text is placed closest to the anchor."
          },
          {
            "value": "bottom-left",
            "doc": "The bottom left corner of the text is placed closest to the anchor."
          },
          {
            "value": "bottom-right",
            "doc": "The bottom right corner of the text is placed closest to the anchor."
          }
        ],
        "default": "center",
        "description": "Part of the text placed closest to the anchor.",
        "requires": [
          "textField"
        ],
        "disabledBy": [
          "textVariableAnchor"
        ],
        "allowedFunctionTypes": [
          "camera"
        ],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom",
            "feature"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-text-anchor",
          "name": "text-anchor",
          "namespace": "layout"
        }
      },
      {
        "name": "textMaxAngle",
        "type": "number",
        "values": [],
        "units": "degrees",
        "default": 45,
        "description": "Maximum angle change between adjacent characters.",
        "requires": [
          "textField"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-text-max-angle",
          "name": "text-max-angle",
          "namespace": "layout"
        }
      },
      {
        "name": "textWritingMode",
        "type": "array<enum>",
        "values": [],
        "description": "The property allows control over a symbol's orientation. Note that the property values act as a hint, so that a symbol whose language doesn’t support the provided orientation will be laid out in its natural orientation. Example: English point symbol will be rendered horizontally even if array value contains single 'vertical' enum value. For symbol with point placement, the order of elements in an array define priority order for the placement of an orientation variant. For symbol with line placement, the default text writing mode is either ['horizontal', 'vertical'] or ['vertical', 'horizontal'], the order doesn't affect the placement.",
        "requires": [
          "textField"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-text-writing-mode",
          "name": "text-writing-mode",
          "namespace": "layout"
        }
      },
      {
        "name": "textRotate",
        "type": "number",
        "values": [],
        "units": "degrees",
        "default": 0,
        "description": "Rotates the text clockwise.",
        "requires": [
          "textField"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-text-rotate",
          "name": "text-rotate",
          "namespace": "layout"
        }
      },
      {
        "name": "textPadding",
        "type": "number",
        "values": [],
        "minimum": 0,
        "units": "pixels",
        "default": 2,
        "description": "Size of the additional area around the text bounding box used for detecting symbol collisions.",
        "requires": [
          "textField"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-text-padding",
          "name": "text-padding",
          "namespace": "layout"
        }
      },
      {
        "name": "textKeepUpright",
        "type": "boolean",
        "values": [],
        "default": true,
        "description": "If true, the text may be flipped vertically to prevent it from being rendered upsideDown.",
        "requires": [
          "textField"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-text-keep-upright",
          "name": "text-keep-upright",
          "namespace": "layout"
        }
      },
      {
        "name": "textTransform",
        "type": "enum",
        "values": [
          {
            "value": "none",
            "doc": "The text is not altered."
          },
          {
            "value": "uppercase",
            "doc": "Forces all letters to be displayed in uppercase."
          },
          {
            "value": "lowercase",
            "doc": "Forces all letters to be displayed in lowercase."
          }
        ],
        "default": "none",
        "description": "Specifies how to capitalize text, similar to the CSS `textTransform` property.",
        "requires": [
          "textField"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom",
            "feature"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-text-transform",
          "name": "text-transform",
          "namespace": "layout"
        }
      },
      {
        "name": "textOffset",
        "type": "array<number>",
        "values": [],
        "units": "ems",
        "default": [
          0,
          0
        ],
        "description": "Offset distance of text from its anchor. Positive values indicate right and down, while negative values indicate left and up. If used with textVariableAnchor, input values will be taken as absolute values. Offsets along the x and yAxis will be applied automatically based on the anchor position.",
        "requires": [
          "textField"
        ],
        "disabledBy": [
          "textRadialOffset"
        ],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-text-offset",
          "name": "text-offset",
          "namespace": "layout"
        }
      },
      {
        "name": "textAllowOverlap",
        "type": "boolean",
        "values": [],
        "default": false,
        "description": "If true, the text will be visible even if it collides with other previously drawn symbols.",
        "requires": [
          "textField"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-text-allow-overlap",
          "name": "text-allow-overlap",
          "namespace": "layout"
        }
      },
      {
        "name": "textIgnorePlacement",
        "type": "boolean",
        "values": [],
        "default": false,
        "description": "If true, other symbols can be visible even if they collide with the text.",
        "requires": [
          "textField"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-text-ignore-placement",
          "name": "text-ignore-placement",
          "namespace": "layout"
        }
      },
      {
        "name": "textOptional",
        "type": "boolean",
        "values": [],
        "default": false,
        "description": "If true, icons will display without their corresponding text when the text collides with other symbols and the icon does not.",
        "requires": [
          "textField",
          "iconImage"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom"
          ]
        },
        "mbx": {
          "fullName": "layout-symbol-text-optional",
          "name": "text-optional",
          "namespace": "layout"
        }
      },
      {
        "name": "visibility",
        "type": "enum",
        "values": [
          {
            "value": "visible",
            "doc": "The layer is shown."
          },
          {
            "value": "none",
            "doc": "The layer is not shown."
          }
        ],
        "default": "visible",
        "description": "Whether this layer is displayed.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false
        },
        "mbx": {
          "fullName": "layout-symbol-visibility",
          "name": "visibility",
          "namespace": "layout"
        }
      },
      {
        "name": "iconOpacity",
        "type": "number",
        "values": [],
        "minimum": 0,
        "maximum": 1,
        "default": 1,
        "description": "The opacity at which the icon will be drawn.",
        "requires": [
          "iconImage"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature",
            "feature-state",
            "measure-light"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-symbol-icon-opacity",
          "name": "icon-opacity",
          "namespace": "paint"
        }
      },
      {
        "name": "iconColor",
        "type": "color",
        "values": [],
        "default": "#000000",
        "description": "The color of the icon. This can only be used with [SDF icons](https://docs.mapbox.com/help/troubleshooting/using-recolorable-images-in-mapbox-maps/).",
        "requires": [
          "iconImage"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature",
            "feature-state",
            "measure-light"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-symbol-icon-color",
          "name": "icon-color",
          "namespace": "paint"
        }
      },
      {
        "name": "iconHaloColor",
        "type": "color",
        "values": [],
        "default": "rgba(0, 0, 0, 0)",
        "description": "The color of the icon's halo. Icon halos can only be used with [SDF icons](https://docs.mapbox.com/help/troubleshooting/using-recolorable-images-in-mapbox-maps/).",
        "requires": [
          "iconImage"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature",
            "feature-state",
            "measure-light"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-symbol-icon-halo-color",
          "name": "icon-halo-color",
          "namespace": "paint"
        }
      },
      {
        "name": "iconHaloWidth",
        "type": "number",
        "values": [],
        "minimum": 0,
        "units": "pixels",
        "default": 0,
        "description": "Distance of halo to the icon outline.",
        "requires": [
          "iconImage"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature",
            "feature-state",
            "measure-light"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-symbol-icon-halo-width",
          "name": "icon-halo-width",
          "namespace": "paint"
        }
      },
      {
        "name": "iconHaloBlur",
        "type": "number",
        "values": [],
        "minimum": 0,
        "units": "pixels",
        "default": 0,
        "description": "Fade out the halo towards the outside.",
        "requires": [
          "iconImage"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature",
            "feature-state",
            "measure-light"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-symbol-icon-halo-blur",
          "name": "icon-halo-blur",
          "namespace": "paint"
        }
      },
      {
        "name": "iconTranslate",
        "type": "array<number>",
        "values": [],
        "units": "pixels",
        "default": [
          0,
          0
        ],
        "description": "Distance that the icon's anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up.",
        "requires": [
          "iconImage"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-symbol-icon-translate",
          "name": "icon-translate",
          "namespace": "paint"
        }
      },
      {
        "name": "iconTranslateAnchor",
        "type": "enum",
        "values": [
          {
            "value": "map",
            "doc": "Icons are translated relative to the map."
          },
          {
            "value": "viewport",
            "doc": "Icons are translated relative to the viewport."
          }
        ],
        "default": "map",
        "description": "Controls the frame of reference for `iconTranslate`.",
        "requires": [
          "iconImage",
          "iconTranslate"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom"
          ]
        },
        "mbx": {
          "fullName": "paint-symbol-icon-translate-anchor",
          "name": "icon-translate-anchor",
          "namespace": "paint"
        }
      },
      {
        "name": "textOpacity",
        "type": "number",
        "values": [],
        "minimum": 0,
        "maximum": 1,
        "default": 1,
        "description": "The opacity at which the text will be drawn.",
        "requires": [
          "textField"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature",
            "feature-state",
            "measure-light"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-symbol-text-opacity",
          "name": "text-opacity",
          "namespace": "paint"
        }
      },
      {
        "name": "textColor",
        "type": "color",
        "values": [],
        "default": "#000000",
        "description": "The color with which the text will be drawn.",
        "requires": [
          "textField"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature",
            "feature-state",
            "measure-light"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-symbol-text-color",
          "name": "text-color",
          "namespace": "paint"
        }
      },
      {
        "name": "textHaloColor",
        "type": "color",
        "values": [],
        "default": "rgba(0, 0, 0, 0)",
        "description": "The color of the text's halo, which helps it stand out from backgrounds.",
        "requires": [
          "textField"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature",
            "feature-state",
            "measure-light"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-symbol-text-halo-color",
          "name": "text-halo-color",
          "namespace": "paint"
        }
      },
      {
        "name": "textHaloWidth",
        "type": "number",
        "values": [],
        "minimum": 0,
        "units": "pixels",
        "default": 0,
        "description": "Distance of halo to the font outline. Max text halo width is 1/4 of the fontSize.",
        "requires": [
          "textField"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature",
            "feature-state",
            "measure-light"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-symbol-text-halo-width",
          "name": "text-halo-width",
          "namespace": "paint"
        }
      },
      {
        "name": "textHaloBlur",
        "type": "number",
        "values": [],
        "minimum": 0,
        "units": "pixels",
        "default": 0,
        "description": "The halo's fadeout distance towards the outside.",
        "requires": [
          "textField"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom",
            "feature",
            "feature-state",
            "measure-light"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-symbol-text-halo-blur",
          "name": "text-halo-blur",
          "namespace": "paint"
        }
      },
      {
        "name": "textTranslate",
        "type": "array<number>",
        "values": [],
        "units": "pixels",
        "default": [
          0,
          0
        ],
        "description": "Distance that the text's anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up.",
        "requires": [
          "textField"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "paint-symbol-text-translate",
          "name": "text-translate",
          "namespace": "paint"
        }
      },
      {
        "name": "textTranslateAnchor",
        "type": "enum",
        "values": [
          {
            "value": "map",
            "doc": "The text is translated relative to the map."
          },
          {
            "value": "viewport",
            "doc": "The text is translated relative to the viewport."
          }
        ],
        "default": "map",
        "description": "Controls the frame of reference for `textTranslate`.",
        "requires": [
          "textField",
          "textTranslate"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": false,
          "parameters": [
            "zoom"
          ]
        },
        "mbx": {
          "fullName": "paint-symbol-text-translate-anchor",
          "name": "text-translate-anchor",
          "namespace": "paint"
        }
      }
    ]
  },
  "Terrain": {
    "description": "",
    "displayName": "Terrain",
    "methods": [],
    "props": [
      {
        "name": "sourceID",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "Name of a source of raster_dem type to be used for terrain elevation."
      },
      {
        "name": "exaggeration",
        "required": false,
        "type": "Value",
        "default": "none",
        "description": "Deprecated, use exaggeration in style instead"
      },
      {
        "name": "style",
        "required": false,
        "type": "TerrainLayerStyleProps",
        "default": "none",
        "description": "Customizable style attributes"
      }
    ],
    "fileNameWithExt": "Terrain.tsx",
    "relPath": "src/components/Terrain.tsx",
    "name": "Terrain",
    "mbx": {
      "name": "terrain"
    },
    "styles": [
      {
        "name": "source",
        "type": "string",
        "values": [],
        "description": "Name of a source of `raster_dem` type to be used for terrain elevation.",
        "requires": [],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "mbx": {
          "fullName": "source",
          "name": "source",
          "namespace": null
        }
      },
      {
        "name": "exaggeration",
        "type": "number",
        "values": [],
        "minimum": 0,
        "maximum": 1000,
        "default": 1,
        "description": "Exaggerates the elevation of the terrain by multiplying the data from the DEM with this value.",
        "requires": [
          "source"
        ],
        "disabledBy": [],
        "allowedFunctionTypes": [],
        "expression": {
          "interpolated": true,
          "parameters": [
            "zoom"
          ]
        },
        "transition": true,
        "mbx": {
          "fullName": "exaggeration",
          "name": "exaggeration",
          "namespace": null
        }
      }
    ]
  },
  "UserLocation": {
    "description": "",
    "displayName": "UserLocation",
    "methods": [
      {
        "name": "setLocationManager",
        "docblock": "Whether to start or stop listening to the locationManager\n\nNotice, that listening will start automatically when\neither `onUpdate` or `visible` are set\n\n@async\n@param {Object} running - Object with key `running` and `boolean` value\n@return {Promise<void>}",
        "modifiers": [
          "async"
        ],
        "params": [
          {
            "name": "{ running }: { running?: boolean }",
            "optional": false,
            "type": {
              "name": "{running?:boolean}"
            }
          }
        ],
        "returns": {
          "type": {
            "name": "Promise",
            "elements": [
              {
                "name": "void"
              }
            ]
          }
        },
        "description": "Whether to start or stop listening to the locationManager\n\nNotice, that listening will start automatically when\neither `onUpdate` or `visible` are set",
        "examples": []
      },
      {
        "name": "needsLocationManagerRunning",
        "docblock": "If locationManager should be running\n\n@return {boolean}",
        "modifiers": [],
        "params": [],
        "returns": {
          "type": {
            "name": "boolean"
          }
        },
        "description": "If locationManager should be running",
        "examples": []
      }
    ],
    "props": [
      {
        "name": "androidRenderMode",
        "required": false,
        "type": "'normal' \\| 'compass' \\| 'gps'",
        "default": "none",
        "description": "native/android only render mode\n\n - normal: just a circle\n - compass: triangle with heading\n - gps: large arrow\n\n@platform android"
      },
      {
        "name": "animated",
        "required": false,
        "type": "boolean",
        "default": "true",
        "description": "Whether location icon is animated between updates"
      },
      {
        "name": "children",
        "required": false,
        "type": "ReactElement \\| ReactElement[]",
        "default": "none",
        "description": "Custom location icon of type mapbox-gl-native components"
      },
      {
        "name": "minDisplacement",
        "required": false,
        "type": "number",
        "default": "0",
        "description": "Minimum amount of movement before GPS location is updated in meters"
      },
      {
        "name": "onPress",
        "required": false,
        "type": {
          "name": "func",
          "funcSignature": "() => void"
        },
        "default": "none",
        "description": "Callback that is triggered on location icon press\n*signature:*`() => void`"
      },
      {
        "name": "onUpdate",
        "required": false,
        "type": {
          "name": "func",
          "funcSignature": "(location:Location) => void"
        },
        "default": "none",
        "description": "Callback that is triggered on location update\n*signature:*`(location:Location) => void`"
      },
      {
        "name": "renderMode",
        "required": false,
        "type": "UserLocationRenderMode",
        "default": "UserLocationRenderMode.Normal",
        "description": "@deprecated use LocationPuck component instead of UserLocationRenderMode.Native\nWhich render mode to use."
      },
      {
        "name": "requestsAlwaysUse",
        "required": false,
        "type": "boolean",
        "default": "false",
        "description": "Request the always location permission, and listen to the location even when the app is in background\n\n@platform ios"
      },
      {
        "name": "showsUserHeadingIndicator",
        "required": false,
        "type": "boolean",
        "default": "false",
        "description": "Show or hide small arrow which indicates direction the device is pointing relative to north."
      },
      {
        "name": "visible",
        "required": false,
        "type": "boolean",
        "default": "true",
        "description": "Whether location icon is visible"
      }
    ],
    "fileNameWithExt": "UserLocation.tsx",
    "relPath": "src/components/UserLocation.tsx",
    "name": "UserLocation"
  },
  "VectorSource": {
    "description": "VectorSource is a map content source that supplies tiled vector data in Mapbox Vector Tile format to be shown on the map.\nThe location of and metadata about the tiles are defined either by an option dictionary or by an external file that conforms to the TileJSON specification.",
    "displayName": "VectorSource",
    "methods": [
      {
        "name": "onPress",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "optional": false,
            "type": {
              "name": "NativeSyntheticEvent"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": [
      {
        "name": "id",
        "required": false,
        "type": "string",
        "default": "MapboxGL.StyleSource.DefaultSourceID",
        "description": "A string that uniquely identifies the source."
      },
      {
        "name": "existing",
        "required": false,
        "type": "boolean",
        "default": "none",
        "description": "The id refers to en existing source in the style. Does not create a new source."
      },
      {
        "name": "url",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "A URL to a TileJSON configuration file describing the source’s contents and other metadata."
      },
      {
        "name": "tileUrlTemplates",
        "required": false,
        "type": "Array",
        "default": "none",
        "description": "An array of tile URL templates. If multiple endpoints are specified, clients may use any combination of endpoints.\nExample: https://example.com/vector-tiles/{z}/{x}/{y}.pbf"
      },
      {
        "name": "minZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "An unsigned integer that specifies the minimum zoom level at which to display tiles from the source.\nThe value should be between 0 and 22, inclusive, and less than\nmaxZoomLevel, if specified. The default value for this option is 0."
      },
      {
        "name": "maxZoomLevel",
        "required": false,
        "type": "number",
        "default": "none",
        "description": "An unsigned integer that specifies the maximum zoom level at which to display tiles from the source.\nThe value should be between 0 and 22, inclusive, and less than\nminZoomLevel, if specified. The default value for this option is 22."
      },
      {
        "name": "tms",
        "required": false,
        "type": "boolean",
        "default": "none",
        "description": "Influences the y direction of the tile coordinates. (tms inverts y axis)"
      },
      {
        "name": "attribution",
        "required": false,
        "type": "string",
        "default": "none",
        "description": "An HTML or literal text string defining the buttons to be displayed in an action sheet when the\nsource is part of a map view’s style and the map view’s attribution button is pressed."
      },
      {
        "name": "onPress",
        "required": false,
        "type": {
          "name": "func",
          "funcSignature": "(event:OnPressEvent) => void"
        },
        "default": "none",
        "description": "Source press listener, gets called when a user presses one of the children layers only\nif that layer has a higher z-index than another source layers\n\n- `event`: `Object` \n- `event.features`: `Object[]`  - the geojson features that have hit by the press (might be multiple)\n- `event.coordinates`: `Object`  - the coordinates of the click\n- `event.point`: `Object`  - the point of the click\n*signature:*`(event:OnPressEvent) => void`"
      },
      {
        "name": "hitbox",
        "required": false,
        "type": {
          "name": "shape",
          "value": [
            {
              "name": "width",
              "required": true,
              "type": "number",
              "default": "none",
              "description": "`width` of hitbox"
            },
            {
              "name": "height",
              "required": true,
              "type": "number",
              "default": "none",
              "description": "`height` of hitbox"
            }
          ]
        },
        "default": "none",
        "description": "Overrides the default touch hitbox(44x44 pixels) for the source layers"
      },
      {
        "name": "children",
        "required": false,
        "type": "React.ReactElement \\| React.ReactElement[]",
        "default": "none",
        "description": "FIX ME NO DESCRIPTION"
      }
    ],
    "fileNameWithExt": "VectorSource.tsx",
    "relPath": "src/components/VectorSource.tsx",
    "name": "VectorSource"
  },
  "Viewport": {
    "description": "provides a structured approach to organizing camera management logic into states and transitions between them.\n\nAt any given time, the viewport is either:\n - idle\n - in a state (camera is being managed by a ViewportState)\n - transitioning between states\n\nSee [android](https://docs.mapbox.com/android/maps/api/${ANDROID_SDK_VERSION}/mapbox-maps-android/com.mapbox.maps.plugin.viewport/viewport.html),\n[ios](https://docs.mapbox.com/ios/maps/api/${IOS_SDK_VERSION}/Viewport.html#/s:10MapboxMaps8ViewportC)",
    "displayName": "Viewport",
    "methods": [
      {
        "name": "getState",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "idle",
        "docblock": null,
        "modifiers": [
          "async"
        ],
        "params": [],
        "returns": null
      },
      {
        "name": "transitionTo",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "state",
            "optional": false,
            "type": {
              "name": null
            }
          },
          {
            "name": "transition",
            "optional": false,
            "type": {
              "name": null
            }
          }
        ],
        "returns": null
      }
    ],
    "props": [
      {
        "name": "transitionsToIdleUponUserInteraction",
        "required": false,
        "type": "boolean",
        "default": "none",
        "description": "Indicates whether the Viewport should idle when the MapView receives touch input.\n\nSet this property to false to enable building custom ViewportStates that can work simultaneously with certain types of gestures.\n\nDefaults to true."
      },
      {
        "name": "onStatusChanged",
        "required": false,
        "type": {
          "name": "func",
          "funcSignature": "(event:{from: union, to: union, reason: union}) => void"
        },
        "default": "none",
        "description": "Subscribes to status changes, will be called when the status changes.\n\nObservers are notified of status changes asynchronously on the main queue.\nThis means that by the time the notification is delivered, the status may have already changed again.\nThis behavior is necessary to allow observers to trigger further transitions while avoiding out-of-order\ndelivery of status changed notifications.\n*signature:*`(event:{from: union, to: union, reason: union}) => void`"
      }
    ],
    "fileNameWithExt": "Viewport.tsx",
    "relPath": "src/components/Viewport.tsx",
    "name": "Viewport"
  },
  "coordinates": {
    "name": "coordinates",
    "fileNameWithExt": "locationManager.ts",
    "relPath": "src/modules/location/locationManager.ts",
    "description": "Coorinates sent by locationManager",
    "props": [],
    "styles": [],
    "methods": []
  },
  "location": {
    "name": "location",
    "fileNameWithExt": "locationManager.ts",
    "relPath": "src/modules/location/locationManager.ts",
    "description": "Location sent by locationManager",
    "props": [],
    "styles": [],
    "methods": []
  },
  "locationManager": {
    "name": "locationManager",
    "fileNameWithExt": "locationManager.ts",
    "relPath": "src/modules/location/locationManager.ts",
    "description": "LocationManager is a singleton, see ",
    "props": [],
    "styles": [],
    "methods": [
      {
        "name": "setLocationEventThrottle",
        "description": "Sets the period at which location events will be sent over the React Native bridge.\nThe default is 0, aka no limit. [V10, iOS only]",
        "params": [
          {
            "name": "throttleValue",
            "description": "event throttle value in ms.",
            "type": {
              "name": "Number"
            },
            "optional": false
          }
        ],
        "examples": [
          "locationManager.setLocationEventThrottle(500);"
        ],
        "returns": {
          "description": "",
          "type": {
            "name": "void"
          }
        }
      }
    ]
  },
  "offlineManager": {
    "name": "offlineManager",
    "fileNameWithExt": "offlineManager.ts",
    "relPath": "src/modules/offline/offlineManager.ts",
    "description": "OfflineManager implements a singleton (shared object) that manages offline packs.\nAll of this class’s instance methods are asynchronous, reflecting the fact that offline resources are stored in a database.\nThe shared object maintains a canonical collection of offline packs.",
    "props": [],
    "styles": [],
    "methods": [
      {
        "name": "createPack",
        "description": "Creates and registers an offline pack that downloads the resources needed to use the given region offline.",
        "params": [
          {
            "name": "options",
            "description": "Create options for a offline pack that specifices zoom levels, style url, and the region to download.",
            "type": {
              "name": "OfflineCreatePackOptions"
            },
            "optional": false
          },
          {
            "name": "progressListener",
            "description": "Callback that listens for status events while downloading the offline resource.",
            "type": {
              "name": "Callback"
            },
            "optional": true
          },
          {
            "name": "errorListener",
            "description": "Callback that listens for status events while downloading the offline resource.",
            "type": {
              "name": "Callback"
            },
            "optional": true
          }
        ],
        "examples": [
          "const progressListener = (offlineRegion, status) => console.log(offlineRegion, status);\nconst errorListener = (offlineRegion, err) => console.log(offlineRegion, err);\n\nawait Mapbox.offlineManager.createPack({\n  name: 'offlinePack',\n  styleURL: 'mapbox://...',\n  minZoom: 14,\n  maxZoom: 20,\n  bounds: [[neLng, neLat], [swLng, swLat]]\n}, progressListener, errorListener)"
        ],
        "returns": {
          "description": "",
          "type": {
            "name": "void"
          }
        }
      },
      {
        "name": "invalidatePack",
        "description": "Invalidates the specified offline pack. This method checks that the tiles in the specified offline pack match those from the server. Local tiles that do not match the latest version on the server are updated.This is more efficient than deleting the offline pack and downloading it again. If the data stored locally matches that on the server, new data will not be downloaded.",
        "params": [
          {
            "name": "name",
            "description": "Name of the offline pack.",
            "type": {
              "name": "String"
            },
            "optional": false
          }
        ],
        "examples": [
          "await Mapbox.offlineManager.invalidatePack('packName')"
        ],
        "returns": {
          "description": "",
          "type": {
            "name": "void"
          }
        }
      },
      {
        "name": "deletePack",
        "description": "Unregisters the given offline pack and allows resources that are no longer required by any remaining packs to be potentially freed.",
        "params": [
          {
            "name": "name",
            "description": "Name of the offline pack.",
            "type": {
              "name": "String"
            },
            "optional": false
          }
        ],
        "examples": [
          "await Mapbox.offlineManager.deletePack('packName')"
        ],
        "returns": {
          "description": "",
          "type": {
            "name": "void"
          }
        }
      },
      {
        "name": "invalidateAmbientCache",
        "description": "Forces a revalidation of the tiles in the ambient cache and downloads a fresh version of the tiles from the tile server.\nThis is the recommend method for clearing the cache.\nThis is the most efficient method because tiles in the ambient cache are re-downloaded to remove outdated data from a device.\nIt does not erase resources from the ambient cache or delete the database, which can be computationally expensive operations that may carry unintended side effects.",
        "params": [],
        "examples": [
          "await Mapbox.offlineManager.invalidateAmbientCache();"
        ],
        "returns": {
          "description": "",
          "type": {
            "name": "void"
          }
        }
      },
      {
        "name": "clearAmbientCache",
        "description": "Erases resources from the ambient cache.\nThis method clears the cache and decreases the amount of space that map resources take up on the device.",
        "params": [],
        "examples": [
          "await Mapbox.offlineManager.clearAmbientCache();"
        ],
        "returns": {
          "description": "",
          "type": {
            "name": "void"
          }
        }
      },
      {
        "name": "migrateOfflineCache",
        "description": "Migrates the offline cache from pre-v10 SDKs to the new v10 cache location",
        "params": [],
        "examples": [
          "await Mapbox.offlineManager.migrateOfflineCache()"
        ],
        "returns": {
          "description": "",
          "type": {
            "name": "void"
          }
        }
      },
      {
        "name": "setMaximumAmbientCacheSize",
        "description": "Sets the maximum size of the ambient cache in bytes. Disables the ambient cache if set to 0.\nThis method may be computationally expensive because it will erase resources from the ambient cache if its size is decreased.",
        "params": [
          {
            "name": "size",
            "description": "Size of ambient cache.",
            "type": {
              "name": "Number"
            },
            "optional": false
          }
        ],
        "examples": [
          "await Mapbox.offlineManager.setMaximumAmbientCacheSize(5000000);"
        ],
        "returns": {
          "description": "",
          "type": {
            "name": "void"
          }
        }
      },
      {
        "name": "resetDatabase",
        "description": "Deletes the existing database, which includes both the ambient cache and offline packs, then reinitializes it.",
        "params": [],
        "examples": [
          "await Mapbox.offlineManager.resetDatabase();"
        ],
        "returns": {
          "description": "",
          "type": {
            "name": "void"
          }
        }
      },
      {
        "name": "getPacks",
        "description": "Retrieves all the current offline packs that are stored in the database.",
        "params": [],
        "examples": [
          "const offlinePacks = await Mapbox.offlineManager.getPacks();"
        ],
        "returns": {
          "description": "",
          "type": {
            "name": "Array"
          }
        }
      },
      {
        "name": "getPack",
        "description": "Retrieves an offline pack that is stored in the database by name.",
        "params": [
          {
            "name": "name",
            "description": "Name of the offline pack.",
            "type": {
              "name": "String"
            },
            "optional": false
          }
        ],
        "examples": [
          "const offlinePack = await Mapbox.offlineManager.getPack();"
        ],
        "returns": {
          "description": "",
          "type": {
            "name": "OfflinePack"
          }
        }
      },
      {
        "name": "mergeOfflineRegions",
        "description": "Sideloads offline db",
        "params": [
          {
            "name": "path",
            "description": "Path to offline tile db on file system.",
            "type": {
              "name": "String"
            },
            "optional": false
          }
        ],
        "examples": [
          "await Mapbox.offlineManager.mergeOfflineRegions(path);"
        ],
        "returns": {
          "description": "",
          "type": {
            "name": "void"
          }
        }
      },
      {
        "name": "setTileCountLimit",
        "description": "Sets the maximum number of Mapbox-hosted tiles that may be downloaded and stored on the current device.\nThe Mapbox Terms of Service prohibit changing or bypassing this limit without permission from Mapbox.",
        "params": [
          {
            "name": "limit",
            "description": "Map tile limit count.",
            "type": {
              "name": "Number"
            },
            "optional": false
          }
        ],
        "examples": [
          "Mapbox.offlineManager.setTileCountLimit(1000);"
        ],
        "returns": {
          "description": "",
          "type": {
            "name": "void"
          }
        }
      },
      {
        "name": "setProgressEventThrottle",
        "description": "Sets the period at which download status events will be sent over the React Native bridge.\nThe default is 300ms.",
        "params": [
          {
            "name": "throttleValue",
            "description": "event throttle value in ms.",
            "type": {
              "name": "Number"
            },
            "optional": false
          }
        ],
        "examples": [
          "Mapbox.offlineManager.setProgressEventThrottle(500);"
        ],
        "returns": {
          "description": "",
          "type": {
            "name": "void"
          }
        }
      },
      {
        "name": "subscribe",
        "description": "Subscribe to download status/error events for the requested offline pack.\nNote that createPack calls this internally if listeners are provided.",
        "params": [
          {
            "name": "packName",
            "description": "Name of the offline pack.",
            "type": {
              "name": "String"
            },
            "optional": false
          },
          {
            "name": "progressListener",
            "description": "Callback that listens for status events while downloading the offline resource.",
            "type": {
              "name": "Callback"
            },
            "optional": false
          },
          {
            "name": "errorListener",
            "description": "Callback that listens for status events while downloading the offline resource.",
            "type": {
              "name": "Callback"
            },
            "optional": false
          }
        ],
        "examples": [
          "const progressListener = (offlinePack, status) => console.log(offlinePack, status)\nconst errorListener = (offlinePack, err) => console.log(offlinePack, err)\nMapbox.offlineManager.subscribe('packName', progressListener, errorListener)"
        ],
        "returns": {
          "description": "",
          "type": {
            "name": "void"
          }
        }
      },
      {
        "name": "unsubscribe",
        "description": "Unsubscribes any listeners associated with the offline pack.\nIt's a good idea to call this on componentWillUnmount.",
        "params": [
          {
            "name": "packName",
            "description": "Name of the offline pack.",
            "type": {
              "name": "String"
            },
            "optional": false
          }
        ],
        "examples": [
          "Mapbox.offlineManager.unsubscribe('packName')"
        ],
        "returns": {
          "description": "",
          "type": {
            "name": "void"
          }
        }
      }
    ]
  },
  "offlineManagerLegacy": {
    "name": "offlineManagerLegacy",
    "fileNameWithExt": "offlineManagerLegacy.ts",
    "relPath": "src/modules/offline/offlineManagerLegacy.ts",
    "description": "OfflineManagerLegacy implements a singleton (shared object) that manages offline packs.\nAll of this class’s instance methods are asynchronous, reflecting the fact that offline resources are stored in a database.\nThe shared object maintains a canonical collection of offline packs.",
    "props": [],
    "styles": [],
    "methods": [
      {
        "name": "createPack",
        "description": "Creates and registers an offline pack that downloads the resources needed to use the given region offline.",
        "params": [
          {
            "name": "options",
            "description": "Create options for a offline pack that specifices zoom levels, style url, and the region to download.",
            "type": {
              "name": "OfflineCreatePackOptions"
            },
            "optional": false
          }
        ],
        "examples": [
          "await Mapbox.offlineManager.createPack({\n  name: 'offlinePack',\n  styleURL: 'mapbox://...',\n  minZoom: 14,\n  maxZoom: 20,\n  bounds: [[neLng, neLat], [swLng, swLat]]\n})"
        ],
        "returns": {
          "description": "",
          "type": {
            "name": "void"
          }
        }
      },
      {
        "name": "invalidatePack",
        "description": "Invalidates the specified offline pack. This method checks that the tiles in the specified offline pack match those from the server. Local tiles that do not match the latest version on the server are updated.This is more efficient than deleting the offline pack and downloading it again. If the data stored locally matches that on the server, new data will not be downloaded.",
        "params": [
          {
            "name": "name",
            "description": "Name of the offline pack.",
            "type": {
              "name": "String"
            },
            "optional": false
          }
        ],
        "examples": [
          "await Mapbox.offlineManagerLegacy.invalidatePack('packName')"
        ],
        "returns": {
          "description": "",
          "type": {
            "name": "void"
          }
        }
      },
      {
        "name": "deletePack",
        "description": "Unregisters the given offline pack and allows resources that are no longer required by any remaining packs to be potentially freed.",
        "params": [
          {
            "name": "name",
            "description": "Name of the offline pack.",
            "type": {
              "name": "String"
            },
            "optional": false
          }
        ],
        "examples": [
          "await Mapbox.offlineManagerLegacy.deletePack('packName')"
        ],
        "returns": {
          "description": "",
          "type": {
            "name": "void"
          }
        }
      },
      {
        "name": "migrateOfflineCache",
        "description": "Migrates the offline cache from pre-v10 SDKs to the new v10 cache location",
        "params": [],
        "examples": [
          "await Mapbox.offlineManager.migrateOfflineCache()"
        ],
        "returns": {
          "description": "",
          "type": {
            "name": "void"
          }
        }
      },
      {
        "name": "resetDatabase",
        "description": "Deletes the existing database, which includes both the ambient cache and offline packs, then reinitializes it.",
        "params": [],
        "examples": [
          "await Mapbox.offlineManager.resetDatabase();"
        ],
        "returns": {
          "description": "",
          "type": {
            "name": "void"
          }
        }
      },
      {
        "name": "getPacks",
        "description": "Retrieves all the current offline packs that are stored in the database.",
        "params": [],
        "examples": [
          "const offlinePacks = await Mapbox.offlineManagerLegacy.getPacks();"
        ],
        "returns": {
          "description": "",
          "type": {
            "name": "Array"
          }
        }
      },
      {
        "name": "getPack",
        "description": "Retrieves an offline pack that is stored in the database by name.",
        "params": [
          {
            "name": "name",
            "description": "Name of the offline pack.",
            "type": {
              "name": "String"
            },
            "optional": false
          }
        ],
        "examples": [
          "const offlinePack = await Mapbox.offlineManagerLegacy.getPack();"
        ],
        "returns": {
          "description": "",
          "type": {
            "name": "OfflinePack"
          }
        }
      }
    ]
  },
  "snapshotManager": {
    "name": "snapshotManager",
    "fileNameWithExt": "snapshotManager.ts",
    "relPath": "src/modules/snapshot/snapshotManager.ts",
    "description": "The snapshotManager generates static raster images of the map.\nEach snapshot image depicts a portion of a map defined by an SnapshotOptions object you provide.\nThe snapshotter generates the snapshot asynchronous.",
    "props": [],
    "styles": [],
    "methods": [
      {
        "name": "takeSnap",
        "description": "Takes a snapshot of the base map using the provided Snapshot options. NOTE pitch, heading, zoomLevel only works when centerCoordinate is set!",
        "params": [
          {
            "name": "options",
            "description": "Snapshot options for create a static image of the base map",
            "type": {
              "name": "SnapshotOptions"
            },
            "optional": false
          }
        ],
        "examples": [
          "// creates a temp file png of base map\nconst uri = await MapboxGL.snapshotManager.takeSnap({\n  centerCoordinate: [-74.126410, 40.797968],\n  width: width,\n  height: height,\n  zoomLevel: 12,\n  pitch: 30,\n  heading: 20,\n  styleURL: MapboxGL.StyleURL.Dark,\n  writeToDisk: true, // Create a temporary file\n});\n\n// creates base64 png of base map without logo\nconst uri = await MapboxGL.snapshotManager.takeSnap({\n  centerCoordinate: [-74.126410, 40.797968],\n  width: width,\n  height: height,\n  zoomLevel: 12,\n  pitch: 30,\n  heading: 20,\n  styleURL: MapboxGL.StyleURL.Dark,\n  withLogo: false, // Disable Mapbox logo (Android only)\n});\n\n// creates snapshot with bounds\nconst uri = await MapboxGL.snapshotManager.takeSnap({\n  bounds: [[-74.126410, 40.797968], [-74.143727, 40.772177]],\n  width: width,\n  height: height,\n  styleURL: MapboxGL.StyleURL.Dark,\n});"
        ],
        "returns": {
          "description": "",
          "type": {
            "name": "Promise"
          }
        }
      }
    ]
  },
  "tileStore": {
    "name": "tileStore",
    "fileNameWithExt": "TileStore.ts",
    "relPath": "src/modules/offline/TileStore.ts",
    "description": "TileStore manages downloads and storage for requests to tile-related API endpoints,\nenforcing a disk usage quota: tiles available on disk may be deleted to make room for a new download.\nThis interface can be used by an app developer to set the disk quota.",
    "props": [],
    "styles": [],
    "methods": [
      {
        "name": "setOption",
        "description": "Sets additional options for this instance that are specific to a data type.\nParams:\nkey – The configuration option that should be changed. Valid keys are listed in \\c TileStoreOptions. domain – The data type this setting should be applied for. value – The value for the configuration option, or null if it should be reset.",
        "params": [
          {
            "name": "key",
            "description": "",
            "type": {
              "name": "string"
            },
            "optional": false
          },
          {
            "name": "domain",
            "description": "",
            "type": {
              "name": "TileDataDomain"
            },
            "optional": false
          },
          {
            "name": "value",
            "description": "",
            "type": {
              "name": "TileDataValue"
            },
            "optional": false
          }
        ],
        "examples": [],
        "returns": {
          "description": "",
          "type": {
            "name": "Promise"
          }
        }
      }
    ]
  }
}