[
  {
    "groupName": "SymbolCircleLayer",
    "metadata": {
      "title": "Symbol/CircleLayer"
    },
    "examples": [
      {
        "metadata": {
          "title": "Custom Icon",
          "tags": [
            "ShapeSource",
            "ShapeSource#onPress",
            "SymbolLayer",
            "Images",
            "SymbolLayer#iconImage"
          ],
          "docs": "\nRenders a symbol layer with custom icon defined using the Images component. Clicking a location on a map add a new icon.\n"
        },
        "fullPath": "example/src/examples/SymbolCircleLayer/CustomIcon.tsx",
        "relPath": "SymbolCircleLayer/CustomIcon.tsx",
        "name": "CustomIcon"
      },
      {
        "metadata": {
          "title": "Custom Icon Native Asset",
          "tags": [
            "ShapeSource",
            "ShapeSource#onPress",
            "SymbolLayer",
            "Images",
            "SymbolLayer#iconImage"
          ],
          "docs": "\nRenders a symbol layer with custom icon (native asset) defined using the Images component. Clicking a location on a map add a new icon.\n"
        },
        "fullPath": "example/src/examples/SymbolCircleLayer/CustomIconNativeAsset.tsx",
        "relPath": "SymbolCircleLayer/CustomIconNativeAsset.tsx",
        "name": "CustomIconNativeAsset"
      },
      {
        "metadata": {
          "title": "Data driven circle colors",
          "tags": [
            "VectorSource",
            "CircleLayer",
            "CircleLayer#circleRadius",
            "CircleLayer#circleColor",
            "expressions"
          ],
          "docs": "\nRenders circles with radius and color based on data-driven expressions.\n\nColor is based on the `ethnicity` property of the feature, radius is based on zoom level.\n"
        },
        "fullPath": "example/src/examples/SymbolCircleLayer/DataDrivenCircleColors.js",
        "relPath": "SymbolCircleLayer/DataDrivenCircleColors.js",
        "name": "DataDrivenCircleColors"
      },
      {
        "metadata": {
          "title": "Earthquakes",
          "tags": [
            "ShapeSource",
            "SymbolLayer",
            "ShapeSource#getClusterLeaves",
            "CircleLayer",
            "CircleLayer#clusterProperties",
            "expressions"
          ],
          "docs": "\nRenders earthqueke with clustering.\n\nClick a cluster to show list of contents in the cluster `getClusterLeaves`.\n"
        },
        "fullPath": "example/src/examples/SymbolCircleLayer/Earthquakes.tsx",
        "relPath": "SymbolCircleLayer/Earthquakes.tsx",
        "name": "Earthquakes"
      },
      {
        "metadata": {
          "title": "Scaleable images",
          "tags": [
            "Images",
            "Images#stretchX",
            "Images#stretchY",
            "Images#content"
          ],
          "docs": "\nDemonstates Scalable images.\n\nYou can use strachX, stretchY and content to scale a bitmap image - keep parts of it fixed while only scale specific parts.\n"
        },
        "fullPath": "example/src/examples/SymbolCircleLayer/ScalableImages.tsx",
        "relPath": "SymbolCircleLayer/ScalableImages.tsx",
        "name": "ScalableImages"
      },
      {
        "metadata": {
          "title": "Shape Source Icons",
          "tags": [
            "ShapeSource",
            "SymbolLayer",
            "Images",
            "Images#nativeAssetImages",
            "Images#onImageMissing"
          ],
          "docs": "\nRender icons with various methods.\n\n* pin-rn: Rendered with a React Native View\n* pin: Rendered with a native asset image\n* pin3: Resolved as a result of onImageMissing\n* example: Rendered with a js asset image (require)\n\n"
        },
        "fullPath": "example/src/examples/SymbolCircleLayer/ShapeSourceIcon.js",
        "relPath": "SymbolCircleLayer/ShapeSourceIcon.js",
        "name": "ShapeSourceIcon"
      }
    ]
  },
  {
    "groupName": "UserLocation",
    "metadata": {
      "title": "User Location"
    },
    "examples": [
      {
        "metadata": {
          "title": "Custom Native UserLocation",
          "tags": [
            "LocationPuck",
            "LocationPuck#topImage",
            "LocationPuck#scale"
          ],
          "docs": "\n  Demonstrates use of images to customize LocationPuck\n  "
        },
        "fullPath": "example/src/examples/UserLocation/CustomNativeUserLocation.tsx",
        "relPath": "UserLocation/CustomNativeUserLocation.tsx",
        "name": "CustomNativeUserLocation"
      },
      {
        "metadata": {
          "title": "Set Displacement",
          "tags": [
            "UserLocation",
            "UserLocation#minDisplacement"
          ],
          "docs": "\nChange the minimum displacement required to update the user location.\n"
        },
        "fullPath": "example/src/examples/UserLocation/SetDisplacement.js",
        "relPath": "UserLocation/SetDisplacement.js",
        "name": "SetDisplacement"
      },
      {
        "metadata": {
          "title": "Set Tint Color",
          "tags": [
            "MapView#tintColor"
          ],
          "docs": "\nChange the tint color of the map. This will change the color of the user location icon and the compass.\n"
        },
        "fullPath": "example/src/examples/UserLocation/SetTintColor.js",
        "relPath": "UserLocation/SetTintColor.js",
        "name": "SetTintColor"
      },
      {
        "metadata": {
          "title": "User Location Padding",
          "tags": [
            "Images",
            "Images#stretchX",
            "Images#stretchY",
            "Images#content"
          ],
          "docs": "\nDemonstates Scalable images.\n\nYou can use strachX, stretchY and content to scale a bitmap image - keep parts of it fixed while only scale specific parts.\n"
        },
        "fullPath": "example/src/examples/UserLocation/UserLocationPadding.tsx",
        "relPath": "UserLocation/UserLocationPadding.tsx",
        "name": "UserLocationPadding"
      },
      {
        "metadata": {
          "title": "User Location Render Mode",
          "tags": [
            "UserLocation",
            "UserLocation#renderMode",
            "UserLocation#visible",
            "UserLocation#onUserTrackingModeChange"
          ],
          "docs": "\nDemonstates UserLocation render modes, follow modes\n"
        },
        "fullPath": "example/src/examples/UserLocation/UserLocationRenderMode.tsx",
        "relPath": "UserLocation/UserLocationRenderMode.tsx",
        "name": "UserLocationRenderMode"
      },
      {
        "metadata": {
          "title": "User Location Updates",
          "tags": [
            "UserLocation",
            "UserLocation#onUpdate"
          ],
          "docs": "\nRetrieves and shows location updates from UserLocation componen via the `onUpdate` callback\n"
        },
        "fullPath": "example/src/examples/UserLocation/UserLocationUpdates.tsx",
        "relPath": "UserLocation/UserLocationUpdates.tsx",
        "name": "UserLocationUpdates"
      }
    ]
  },
  {
    "groupName": "Map",
    "metadata": {
      "title": "Map"
    },
    "examples": [
      {
        "metadata": {
          "title": "Change Layer Color",
          "tags": [
            "FillLayer#existing",
            "FillLayer#fillColor"
          ],
          "docs": "\nChange style of a layer part of the map on the fly.\n"
        },
        "fullPath": "example/src/examples/Map/ChangeLayerColor.js",
        "relPath": "Map/ChangeLayerColor.js",
        "name": "ChangeLayerColor"
      },
      {
        "metadata": {
          "title": "Change Offline Region",
          "tags": [
            "offlineManage#createPack"
          ],
          "docs": "\nCreates offline pack and montiors them\n"
        },
        "fullPath": "example/src/examples/Map/CreateOfflineRegion.js",
        "relPath": "Map/CreateOfflineRegion.js",
        "name": "CreateOfflineRegion"
      },
      {
        "metadata": {
          "title": "Dynamic URL",
          "tags": [
            "ShapeSource#url"
          ],
          "docs": "\nChange shape source URL on press of the bubble.\n"
        },
        "fullPath": "example/src/examples/Map/DynamicUrl.tsx",
        "relPath": "Map/DynamicUrl.tsx",
        "name": "DynamicUrl"
      },
      {
        "metadata": {
          "title": "Localize Labels",
          "tags": [
            "MapView#localizeLabels"
          ],
          "docs": "\nLocalize labels to a specific locale(es).\n"
        },
        "fullPath": "example/src/examples/Map/LocalizeLabels.tsx",
        "relPath": "Map/LocalizeLabels.tsx",
        "name": "LocalizeLabels"
      },
      {
        "metadata": {
          "title": "Map and React Navigation",
          "tags": [
            "MapView"
          ],
          "docs": "\nDemonstrates various ways to embedd map via (Navigation, Page, modal, etc)\n"
        },
        "fullPath": "example/src/examples/Map/MapAndRNNavigation.js",
        "relPath": "Map/MapAndRNNavigation.js",
        "name": "MapAndRNNavigation"
      },
      {
        "metadata": {
          "title": "Offline Example",
          "tags": [
            "offlineManager#createPack",
            "offlineManager#getPack",
            "offlineManager#getPacks"
          ],
          "docs": "\nDemonstates basic use of offlineManager api.\n"
        },
        "fullPath": "example/src/examples/Map/OfflineExample.tsx",
        "relPath": "Map/OfflineExample.tsx",
        "name": "OfflineExample"
      },
      {
        "metadata": {
          "title": "Ornaments",
          "tags": [
            "MapView#logoEnabled",
            "MapView#logoPosition",
            "MapView#attributionEnabled",
            "MapView#attributionPosition",
            "MapView#compassEnabled",
            "MapView#compassPosition",
            "MapView#compassImage",
            "MapView#compassFadeWhenNorth",
            "MapView#scaleBarEnabled",
            "MapView#scaleBarPosition"
          ],
          "docs": "\nCustomize ornaments of the map(logo, compass, scalebar, attribution)\n"
        },
        "fullPath": "example/src/examples/Map/Ornaments.tsx",
        "relPath": "Map/Ornaments.tsx",
        "name": "Ornaments"
      },
      {
        "metadata": {
          "title": "Point in Map View",
          "tags": [
            "MapView#pointInMapView"
          ],
          "docs": "\nConverts a coordinate to a point in the current view.\n"
        },
        "fullPath": "example/src/examples/Map/PointInMapView.js",
        "relPath": "Map/PointInMapView.js",
        "name": "PointInMapView"
      },
      {
        "metadata": {
          "title": "Show and hide layer",
          "tags": [
            "FillLayer#existing",
            "LineLayer#existing",
            "FillLayer#visibility",
            "FillLayer#visibility"
          ],
          "docs": "\nChanges visibility of layers part of the map\n"
        },
        "fullPath": "example/src/examples/Map/ShowAndHideLayer.js",
        "relPath": "Map/ShowAndHideLayer.js",
        "name": "ShowAndHideLayer"
      },
      {
        "metadata": {
          "title": "Show Click",
          "tags": [
            "MapView#onPress"
          ],
          "docs": "\nDemonstates onPress event and how to get the screen point of the click.\n"
        },
        "fullPath": "example/src/examples/Map/ShowClick.js",
        "relPath": "Map/ShowClick.js",
        "name": "ShowClick"
      },
      {
        "metadata": {
          "title": "Show Map",
          "tags": [
            "Camera#followZoomLevel",
            "UserLocation#onPress"
          ],
          "docs": "\nShows a map with the user location annotation enabled, and on press of the user location annotation, an alert is shown.\n"
        },
        "fullPath": "example/src/examples/Map/ShowMap.tsx",
        "relPath": "Map/ShowMap.tsx",
        "name": "ShowMap"
      },
      {
        "metadata": {
          "title": "Show Map Local Style",
          "tags": [],
          "docs": "\nCustomize ornaments of the map(logo, compass, scalebar, attribution)\n"
        },
        "fullPath": "example/src/examples/Map/ShowMapLocalStyle.tsx",
        "relPath": "Map/ShowMapLocalStyle.tsx",
        "name": "ShowMapLocalStyle"
      },
      {
        "metadata": {
          "title": "Show Region Did Change",
          "tags": [
            "MapView#onRegionWillChange",
            "MapView#onRegionIsChanging",
            "MapView#onRegionDidChange"
          ],
          "docs": "\nDemonstates MapView region change events.\n"
        },
        "fullPath": "example/src/examples/Map/ShowRegionDidChange.js",
        "relPath": "Map/ShowRegionDidChange.js",
        "name": "ShowRegionDidChange"
      },
      {
        "metadata": {
          "title": "Source Layer Visibility",
          "tags": [
            "MapView#setSoruceVisibility"
          ],
          "docs": "\nChanges visibility of layers using a source in the map\n"
        },
        "fullPath": "example/src/examples/Map/SourceLayerVisibility.js",
        "relPath": "Map/SourceLayerVisibility.js",
        "name": "SourceLayerVisibility"
      },
      {
        "metadata": {
          "title": "Style JSON",
          "tags": [
            "Style#json"
          ],
          "docs": "\nChange style of a MapView on the fly.\n"
        },
        "fullPath": "example/src/examples/Map/StyleJson.js",
        "relPath": "Map/StyleJson.js",
        "name": "StyleJson"
      },
      {
        "metadata": {
          "title": "Two Map Views",
          "tags": [
            "MapView"
          ],
          "docs": "\nDisplay two map views side by side\n"
        },
        "fullPath": "example/src/examples/Map/TwoByTwo.js",
        "relPath": "Map/TwoByTwo.js",
        "name": "TwoByTwo"
      }
    ]
  },
  {
    "groupName": "V10",
    "metadata": {
      "title": "V10"
    },
    "examples": [
      {
        "metadata": {
          "title": "Camera Animation",
          "tags": [
            "Camera",
            "Camera#animationMode"
          ],
          "docs": "\nCamera animation modes\n"
        },
        "fullPath": "example/src/examples/V10/CameraAnimation.tsx",
        "relPath": "V10/CameraAnimation.tsx",
        "name": "CameraAnimation"
      },
      {
        "metadata": {
          "title": "Globe Projection",
          "tags": [
            "MapView#projection"
          ],
          "docs": "\nShows map with globe projection\n"
        },
        "fullPath": "example/src/examples/V10/GlobeProjection.tsx",
        "relPath": "V10/GlobeProjection.tsx",
        "name": "GlobeProjection"
      },
      {
        "metadata": {
          "title": "Map Handlers",
          "tags": [
            "MapView#onMapIdle"
          ],
          "docs": "\nMap Handlers\n"
        },
        "fullPath": "example/src/examples/V10/MapHandlers.tsx",
        "relPath": "V10/MapHandlers.tsx",
        "name": "MapHandlers"
      },
      {
        "metadata": {
          "title": "Markers",
          "tags": [
            "MarkerView"
          ],
          "docs": "\nTest view for MarkerViews\n"
        },
        "fullPath": "example/src/examples/V10/Markers.tsx",
        "relPath": "V10/Markers.tsx",
        "name": "Markers"
      },
      {
        "metadata": {
          "title": "Query Terrain Elevation",
          "tags": [
            "MapView#queryTerrainElevation",
            "AnimatedShape",
            "AnimatedRouteCoordinatesArray",
            "AnimatedExtractCoordinateFromArray"
          ],
          "docs": "\nThis is a fairly complex example demonstraing the use of AnimatedShape, Camera animation, queryTerrainElevation and AnimatedMarkerView\n"
        },
        "fullPath": "example/src/examples/V10/QueryTerrainElevation.js",
        "relPath": "V10/QueryTerrainElevation.js",
        "name": "QueryTerrainElevation"
      },
      {
        "metadata": {
          "title": "Simple Model Layer",
          "tags": [
            "Models",
            "ModelLayer"
          ],
          "docs": "\nDeomnstrate the use of ModelLayer to render, and Models to associate 3D models with names.\n"
        },
        "fullPath": "example/src/examples/V10/SimpleModelLayer.js",
        "relPath": "V10/SimpleModelLayer.js",
        "name": "SimpleModelLayer"
      },
      {
        "metadata": {
          "title": "Terrain, Sky, & Atmosphere",
          "tags": [
            "RasterDemSource",
            "Terrain",
            "Atmosphere",
            "SkyLayer"
          ],
          "docs": "\nDemostrates use of Terran, Atmosphere and SkyLayer.\n"
        },
        "fullPath": "example/src/examples/V10/TerrainSkyAtmosphere.tsx",
        "relPath": "V10/TerrainSkyAtmosphere.tsx",
        "name": "TerrainSkyAtmosphere"
      }
    ]
  },
  {
    "groupName": "Annotations",
    "metadata": {
      "title": "Annotations"
    },
    "examples": [
      {
        "metadata": {
          "title": "Custom Callout",
          "tags": [
            "MarkerView"
          ],
          "docs": "\nUse MarkerView to create a custom callout.\n"
        },
        "fullPath": "example/src/examples/Annotations/CustomCallout.tsx",
        "relPath": "Annotations/CustomCallout.tsx",
        "name": "CustomCallout"
      },
      {
        "metadata": {
          "title": "Heatmap",
          "tags": [
            "HeatmapLayer",
            "HeatmapLayer#heatmapColor"
          ],
          "docs": "\nShows heatmap layer\n"
        },
        "fullPath": "example/src/examples/Annotations/Heatmap.js",
        "relPath": "Annotations/Heatmap.js",
        "name": "Heatmap"
      },
      {
        "metadata": {
          "title": "Marker View",
          "tags": [
            "PointAnnotation",
            "MarkerView"
          ],
          "docs": "\nShows marker view and poitn annotations\n"
        },
        "fullPath": "example/src/examples/Annotations/MarkerView.tsx",
        "relPath": "Annotations/MarkerView.tsx",
        "name": "MarkerView"
      },
      {
        "metadata": {
          "title": "Point Annotation Anchors",
          "tags": [
            "PointAnnotation"
          ],
          "docs": "\nPoint annotation anchors test\n"
        },
        "fullPath": "example/src/examples/Annotations/PointAnnotationAnchors.js",
        "relPath": "Annotations/PointAnnotationAnchors.js",
        "name": "PointAnnotationAnchors"
      },
      {
        "metadata": {
          "title": "Show Point Annotations",
          "tags": [
            "PointAnnotation",
            "MapView#deselectAnnotationOnTap",
            "PointAnnotation#refresh",
            "getAnnotationsLayerID"
          ],
          "docs": "\nShows Point annotation with images\n"
        },
        "fullPath": "example/src/examples/Annotations/ShowPointAnnotation.tsx",
        "relPath": "Annotations/ShowPointAnnotation.tsx",
        "name": "ShowPointAnnotation"
      }
    ]
  },
  {
    "groupName": "FillRasterLayer",
    "metadata": {
      "title": "Fill/Raster Layer"
    },
    "examples": [
      {
        "metadata": {
          "title": "Choropleth Layer By Zoom Level",
          "tags": [
            "VectorSource"
          ],
          "docs": ""
        },
        "fullPath": "example/src/examples/FillRasterLayer/ChoroplethLayerByZoomLevel.js",
        "relPath": "FillRasterLayer/ChoroplethLayerByZoomLevel.js",
        "name": "ChoroplethLayerByZoomLevel"
      },
      {
        "metadata": {
          "title": "Custom Vector Source",
          "tags": [
            "VectorSource",
            "VectorSource#features"
          ],
          "docs": ""
        },
        "fullPath": "example/src/examples/FillRasterLayer/CustomVectorSource.js",
        "relPath": "FillRasterLayer/CustomVectorSource.js",
        "name": "CustomVectorSource"
      },
      {
        "metadata": {
          "title": "GeoJSON Source",
          "tags": [],
          "docs": ""
        },
        "fullPath": "example/src/examples/FillRasterLayer/GeoJSONSource.js",
        "relPath": "FillRasterLayer/GeoJSONSource.js",
        "name": "GeoJSONSource"
      },
      {
        "metadata": {
          "title": "Image Overlay",
          "tags": [
            "RasterLayer",
            "ImageSource"
          ],
          "docs": ""
        },
        "fullPath": "example/src/examples/FillRasterLayer/ImageOverlay.js",
        "relPath": "FillRasterLayer/ImageOverlay.js",
        "name": "ImageOverlay"
      },
      {
        "metadata": {
          "title": "Indoor Building Map",
          "tags": [],
          "docs": ""
        },
        "fullPath": "example/src/examples/FillRasterLayer/IndoorBuilding.js",
        "relPath": "FillRasterLayer/IndoorBuilding.js",
        "name": "IndoorBuilding"
      },
      {
        "metadata": {
          "title": "Query Feature Point",
          "tags": [],
          "docs": ""
        },
        "fullPath": "example/src/examples/FillRasterLayer/QueryAtPoint.js",
        "relPath": "FillRasterLayer/QueryAtPoint.js",
        "name": "QueryAtPoint"
      },
      {
        "metadata": {
          "title": "Query Source Features",
          "tags": [
            "VectorSource",
            "querySourceFeatures"
          ],
          "docs": ""
        },
        "fullPath": "example/src/examples/FillRasterLayer/QuerySourceFeatures.tsx",
        "relPath": "FillRasterLayer/QuerySourceFeatures.tsx",
        "name": "QuerySourceFeatures"
      },
      {
        "metadata": {
          "title": "Query Features Bounding Box",
          "tags": [],
          "docs": ""
        },
        "fullPath": "example/src/examples/FillRasterLayer/QueryWithRect.js",
        "relPath": "FillRasterLayer/QueryWithRect.js",
        "name": "QueryWithRect"
      },
      {
        "metadata": {
          "title": "Raster Source",
          "tags": [],
          "docs": ""
        },
        "fullPath": "example/src/examples/FillRasterLayer/RasterSource.js",
        "relPath": "FillRasterLayer/RasterSource.js",
        "name": "RasterSource"
      },
      {
        "metadata": {
          "title": "Watercolor Raster Tiles",
          "tags": [
            "RasterSource",
            "RasterLayer"
          ],
          "docs": ""
        },
        "fullPath": "example/src/examples/FillRasterLayer/WatercolorRasterTiles.js",
        "relPath": "FillRasterLayer/WatercolorRasterTiles.js",
        "name": "WatercolorRasterTiles"
      }
    ]
  },
  {
    "groupName": "LineLayer",
    "metadata": {
      "title": "LineLayer"
    },
    "examples": [
      {
        "metadata": {
          "title": "Draw Polyline",
          "tags": [
            "LineLayer",
            "ShapeSource",
            "onCameraChanged",
            "getCoordinateFromView",
            "Overlay"
          ],
          "docs": "This example shows a simple polyline editor. It uses `onCameraChanged` to get the center of the map and `getCoordinateFromView` \n  to get the coordinates of the crosshair.\n  \n  The crosshair is an overlay that is positioned using `onLayout` and `getCoordinateFromView`.\n  \n  The `ShapeSource` is updated with the new coordinates and the `LineLayer` is updated with the new coordinates."
        },
        "fullPath": "example/src/examples/LineLayer/DrawPolyline.tsx",
        "relPath": "LineLayer/DrawPolyline.tsx",
        "name": "DrawPolyline"
      },
      {
        "metadata": {
          "title": "Gradient Line",
          "tags": [
            "LineLayer",
            "LineLayer#lineGradient"
          ],
          "docs": "This example demonstrates how to use interpolate expression in the `lineGradient` property of a `LineLayer` to create a gradient line."
        },
        "fullPath": "example/src/examples/LineLayer/GradientLine.js",
        "relPath": "LineLayer/GradientLine.js",
        "name": "GradientLine"
      },
      {
        "metadata": {
          "title": "Third Party Vector Source",
          "tags": [
            "VectorSource",
            "VectorSource#tileUrlTemplates"
          ],
          "docs": "This example renders vector tiles using a third party vector tile source.\n\nIn this case, Mapillary provides the vector tiles, which are added to the map using VectorSource."
        },
        "fullPath": "example/src/examples/LineLayer/ThirdPartyVectorSource.js",
        "relPath": "LineLayer/ThirdPartyVectorSource.js",
        "name": "ThirdPartyVectorSource"
      }
    ]
  },
  {
    "groupName": "Camera",
    "metadata": {
      "title": "Camera"
    },
    "examples": [
      {
        "metadata": {
          "title": "Fit",
          "tags": [
            "Camera",
            "Camera#zoomTo"
          ],
          "docs": "\nChange camera via imperative methods"
        },
        "fullPath": "example/src/examples/Camera/Fit.js",
        "relPath": "Camera/Fit.js",
        "name": "Fit"
      },
      {
        "metadata": {
          "title": "FlyTo",
          "tags": [
            "Camera"
          ],
          "docs": "\nChange camera via change of camera properties\n"
        },
        "fullPath": "example/src/examples/Camera/FlyTo.js",
        "relPath": "Camera/FlyTo.js",
        "name": "FlyTo"
      },
      {
        "metadata": {
          "title": "GetCenter",
          "tags": [
            "Camera",
            "Camera#getCenter"
          ],
          "docs": "\nGet center of map via Camera#getCenter\n"
        },
        "fullPath": "example/src/examples/Camera/GetCenter.js",
        "relPath": "Camera/GetCenter.js",
        "name": "GetCenter"
      },
      {
        "metadata": {
          "title": "GetZoom",
          "tags": [
            "Camera",
            "Camera#getZoom"
          ],
          "docs": "\nGet zoom level of map via Camera#getZoom\n"
        },
        "fullPath": "example/src/examples/Camera/GetZoom.js",
        "relPath": "Camera/GetZoom.js",
        "name": "GetZoom"
      }
    ]
  }
]