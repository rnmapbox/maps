<%
  const layers = locals.layers;
-%>
// DO NOT MODIFY
// THIS FILE IS AUTOGENERATED

import MapboxMaps

class RNMBXStyle {
  var style : Style
  weak var bridge : RCTBridge?

  init(style: Style) {
    self.style = style;
  }

<% for (const layer of layers) { %>
func <%- setLayerMethodName(layer, 'ios') -%>(layer: inout <%- getLayerType(layer, 'ios-v10') -%>, reactStyle:Dictionary<String, Any>, oldReactStyle:Dictionary<String, Any>?, applyUpdater: @escaping  ((inout <%- getLayerType(layer, 'ios-v10') -%>)->Void)->Void, isValid: @escaping () -> Bool)
{
  guard self._hasReactStyle(reactStyle) else {
    Logger.log(level:.error, message: "Invalid style: \(reactStyle)")
    return
  }

  let styleProps = reactStyle.keys
  for prop in styleProps {
    if (prop == "__MAPBOX_STYLESHEET__") {
      continue;
    }

    let styleValue = RNMBXStyleValue.make(reactStyle[prop])

  <% for (let i = 0; i < layer.properties.length; i++) { -%>
  <%- ifOrElseIf(i) -%> (prop == "<%= layer.properties[i].name %>") {
  <%_ if (layer.properties[i].image) { _%>
      styleValue.setImage(
        bridge: bridge!,
        style: style,
        oldValue: oldReactStyle?[prop],
        setImageOnLayer: { (_) in self.set<%- iosPropMethodName(layer, pascelCase(layer.properties[i].name)) -%>(&layer, styleValue:styleValue) },
        isLayerStillValid: isValid,
        setImageOnLayerLater: { (_) in applyUpdater { (layer: inout <%- getLayerType(layer, 'ios-v10') -%>) in self.set<%- iosPropMethodName(layer, pascelCase(layer.properties[i].name)) -%>(&layer, styleValue: styleValue) } },
        name: "<%- pascelCase(layer.name) %>.\(prop)"
      )
  <%_ } else { _%>
      self.set<%- iosPropMethodName(layer, pascelCase(layer.properties[i].name)) -%>(&layer, styleValue:styleValue);
  <%_ } _%>
  <%_ if (layer.properties[i].transition) { _%>
    } else if (prop == "<%= layer.properties[i].name %>Transition") {
      self.set<%- iosPropMethodName(layer, pascelCase(layer.properties[i].name)) -%>Transition(&layer, styleValue:styleValue);
  <%_ } _%>
  <% } -%>
  } else {
      Logger.log(level:.error, message: "Unexpected property \(prop) for layer: <%- layer.name -%>")
    }
  }
}
<% } %>

<% for (const layer of layers) {%>
<% for (const prop of layer.properties) {%>
func set<%- iosPropMethodName(layer, pascelCase(prop.name)) -%>(_ layer: inout <%- getLayerType(layer, 'ios-v10') -%>, styleValue: RNMBXStyleValue)
{
    <%_ if (layer.name === 'light' && prop.name === 'position') { _%>
    layer.position = styleValue.getSphericalPosition();
    <%_ } else if (prop.name === 'visibility') { _%>
    layer.visibility = styleValue.isVisible();
    <%_ } else { _%>
      <% if (prop.type === 'enum') { %>
        <% if (layer.name === 'light') { %>
          layer.<%- iosV10PropName(prop.name) -%> = styleValue.mglStyleValue<%- pascelCase(prop.name) %>Raw(); 
        <% } else { %>
          layer.<%- iosV10PropName(prop.name) -%> = styleValue.mglStyleValueEnum(); 
        <% } %>
      <% } else if (prop.type === 'array') { %>
        <% if (prop.value === 'enum') { %>
          layer.<%- iosV10PropName(prop.name) -%> = styleValue.mglStyleValueArray<%- pascelCase(prop.name) %>();
        <% } else { %>
          layer.<%- iosV10PropName(prop.name) -%> = styleValue.mglStyleValueArray<%- pascelCase(prop.value) %>();
        <% } %> 
      <% } else { %>
        <% if (layer.name === 'light') { %>
          layer.<%- iosV10PropName(prop.name) -%> = styleValue.mglStyleValue<%- pascelCase(prop.type) %>Raw();
        <% } else { %>
          layer.<%- iosV10PropName(prop.name) -%> = styleValue.mglStyleValue<%- pascelCase(prop.type) %>();
        <% } %>
      <% } %>
    <%_ } _%>
}
<%_ if (prop.transition) { _%>

func set<%- iosPropMethodName(layer, pascelCase(prop.name)) -%>Transition(_ layer: inout <%- getLayerType(layer, 'ios-v10') -%>, styleValue: RNMBXStyleValue)
{
    layer.<%- iosV10PropName(prop.name) -%>Transition = styleValue.getTransition();
}
<%_ } _%>
<% } %>
<% } %>

func _hasReactStyle(_ reactStyle: Dictionary<String, Any>) -> Bool
{
  return reactStyle != nil && reactStyle.keys.count > 0;
}

}
