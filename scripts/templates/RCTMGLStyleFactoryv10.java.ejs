<%
  const layers = locals.layers;
-%>
// DO NOT MODIFY
// THIS FILE IS AUTOGENERATED

package com.mapbox.rctmgl.components.styles;

import com.mapbox.maps.extension.style.expressions.generated.Expression;
import com.mapbox.maps.extension.style.layers.generated.BackgroundLayer;
import com.mapbox.maps.extension.style.layers.generated.CircleLayer;
import com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer;
import com.mapbox.maps.extension.style.layers.generated.FillLayer;
import com.mapbox.maps.extension.style.layers.generated.LineLayer;
import com.mapbox.maps.extension.style.layers.generated.SkyLayer;
// import com.mapbox.maps.extension.style.layers.generated.PropertyFactory;
// import com.mapbox.maps.extension.style.layers.generated.PropertyValue;
import com.mapbox.maps.extension.style.layers.generated.RasterLayer;
import com.mapbox.maps.extension.style.layers.generated.SymbolLayer;
import com.mapbox.maps.extension.style.layers.generated.HeatmapLayer;
import com.mapbox.maps.extension.style.layers.generated.HillshadeLayer;
// import com.mapbox.maps.extension.style.layers.properties.generated.Visibility;
import com.mapbox.maps.extension.style.layers.properties.generated.*;
import com.mapbox.maps.extension.style.types.StyleTransition;
import com.mapbox.maps.extension.style.light.generated.Light;
import com.mapbox.maps.extension.style.light.LightPosition;
import com.mapbox.rctmgl.utils.DownloadMapImageTask;

import java.util.List;

public class RCTMGLStyleFactory {
    public static final String VALUE_KEY = "value";
    public static final String SHOULD_ADD_IMAGE_KEY = "shouldAddImage";

  <%_ for (const layer of layers) { _%>
    public static void <%- setLayerMethodName(layer) -%>(final <%- getLayerType(layer, 'android') -%> layer, RCTMGLStyle style) {
      List<String> styleKeys = style.getAllStyleKeys();

      if (styleKeys.size() == 0) {
        return;
      }

      for (String styleKey : styleKeys) {
        final RCTMGLStyleValue styleValue = style.getStyleValueForKey(styleKey);

        switch (styleKey) {
          <%_ for (const prop of layer.properties) { _%>
            case "<%= prop.name %>":
              <%_ if (prop.image) { _%>
              style.addImage(styleValue, new DownloadMapImageTask.OnAllImagesLoaded() {
                  @Override
                  public void onAllImagesLoaded() {
                      RCTMGLStyleFactory.set<%- pascelCase(prop.name) -%>(layer, styleValue);
                  }
              });
              <%_ } else { _%>
              RCTMGLStyleFactory.set<%- pascelCase(prop.name) -%>(layer, styleValue);
              <%_ } _%>
              break;
            <%_ if (prop.transition) { _%>
            case "<%= prop.name %>Transition":
              RCTMGLStyleFactory.set<%- pascelCase(prop.name) -%>Transition(layer, styleValue);
              break;
            <%_ } _%>
          <%_ } _%>
        }
      }
    }
  <%_ } _%>

  <%_ for (const layer of layers) { _%>
  <%_ for (const prop of layer.properties) { _%>
    public static void set<%- pascelCase(prop.name) -%>(<%- getLayerType(layer, 'android') -%> layer, RCTMGLStyleValue styleValue) {
      <%_ if (prop.name === 'visibility') { _%>
        layer.<%- prop.name %>(<%- pascelCase(prop.name) %>.valueOf(styleValue.getEnumName()));
      <%_ } else if (prop.type === 'resolvedImage') { _%>
      if (styleValue.isExpression()) {
        if (styleValue.isImageStringValue()) {
          layer.<%- prop.name %>(styleValue.getImageStringValue());
        } else {
          layer.<%- prop.name %>(styleValue.getExpression());
        }
      } else {
        layer.<%- prop.name %>(<%- androidGetConfigType(androidInputType(prop.type, prop.value), prop) -%>);
      }
      <%_ } else { _%>
      if (styleValue.isExpression()) {
        layer.<%- prop.name -%>(styleValue.getExpression());
      } else {
        <%_ if (prop.type === 'enum') { _%>
          layer.<%- prop.name -%>(<%- pascelCase(prop.name) %>.valueOf(styleValue.getEnumName()));
        <%_ } else if (prop.name === 'lineGradient' || prop.name === 'heatmapColor' || prop.name === 'skyGradient') { _%>
          layer.<%- prop.name -%>(styleValue.getIntExpression(VALUE_KEY));
        <%_ } else if (prop.name === 'position') { _%>
          layer.<%- prop.name -%>(styleValue.getLightPosition());
        <%_ } else { _%>
          layer.<%- prop.name -%>(<%- androidGetConfigType(androidInputType(prop.type, prop.value), prop) -%>);
        <%_ } _%>
      }
      <%_ } _%>
    }

    <%_ if (prop.transition) { %>
    public static void set<%- pascelCase(prop.name) -%>Transition(<%- getLayerType(layer, 'android') -%> layer, RCTMGLStyleValue styleValue) {
      StyleTransition transition = styleValue.getTransition();
      if (transition != null) {
        layer.<%- prop.name -%>Transition(transition);
      }
    }

    <%_ } _%>
  <%_ } _%>
  <%_ } _%>
}
