<%
  const layers = locals.layers;
-%>
/* eslint-disable */
// DO NOT MODIFY
// THIS FILE IS AUTOGENERATED

import PropTypes from 'prop-types';
import { isAndroid } from './index';

export const StyleTypes = {
  Constant: 'constant',
  Color: 'color',
  Transition: 'transition',
  Translation: 'translation',
  Function: 'function',
  Image: 'image',
  Enum: 'enum',
};

export function getStyleType(styleProp: keyof typeof styleExtras) {
  if (!isAndroid() && styleExtras[styleProp]) {
    return styleExtras[styleProp].iosType;
  }

  if (styleMap[styleProp]) {
    return styleMap[styleProp];
  }

  throw new Error(`${styleProp} is not a valid Mapbox layer style`);
}

<%_ for (let layer of layers) { _%>
export const <%- pascelCase(layer.name) _%>LayerStyleProp = PropTypes.shape({
  <%_ for (let prop of layer.properties) { %>
  /**
   * <%- prop.doc.description %>
  <%_ if (prop.doc.requires.length) { _%>
   *
   * @requires <%- prop.doc.requires.join(', ') %>
  <%_ } _%>
  <%_ if (prop.doc.disabledBy.length) { _%>
   *
   * @disabledBy <%- prop.doc.disabledBy.join(', ') %>
  <%_ } _%>
   */
  <%= prop.name %>: <%- jsDocReactProp(prop) %>,
  <%_ if (prop.transition) { %>
  /**
   * The transition affecting any changes to this layerâ€™s <%= prop.name %> property.
   */
  <%= prop.name %>Transition: PropTypes.shape({
    duration: PropTypes.number,
    delay: PropTypes.number,
  }),
  <%_ } _%>
  <%_ } _%>
});

<%_ } _%>

const styleMap = {
  <%_ for (let layer of layers) { _%>
  <%_ for (let prop of layer.properties) { _%>
  <%_ if (!['color', 'colorTransition', 'visibility'].includes(prop.name)) { _%>
  <%= prop.name %>: <%- jsStyleType(prop) %>,
  <%_ if (prop.transition) { _%>
  <%= prop.name %>Transition: StyleTypes.Transition,
  <%_ } _%>
  <%_ } _%>
  <%_ } _%>

  <%_ } _%>

  color: StyleTypes.Color,
  colorTransition: StyleTypes.Transition,
  visibility: StyleTypes.Constant,
};

export const styleExtras = {
  // padding
  iconTextFitPadding: {
    iosType: 'edgeinsets',
  },

  // offsets
  iconOffset: {
    iosType: 'vector',
  },
  textOffset: {
    iosType: 'vector',
  },
  lineOffset: {
    iosType: 'vector',
  },

  // translates
  fillTranslate: {
    iosType: 'vector',
  },
  lineTranslate: {
    iosType: 'vector',
  },
  iconTranslate: {
    iosType: 'vector',
  },
  textTranslate: {
    iosType: 'vector',
  },
  circleTranslate: {
    iosType: 'vector',
  },
  fillExtrusionTranslate: {
    iosType: 'vector',
  },
};

export default styleMap;
