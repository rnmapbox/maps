<%
  const layers = locals.layers;
-%>
// DO NOT MODIFY
// THIS FILE IS AUTOGENERATED
package com.rnmapbox.rnmbx.components.styles

import com.mapbox.maps.MapboxStyleException
import com.mapbox.maps.extension.style.expressions.generated.Expression
import com.mapbox.maps.extension.style.layers.generated.BackgroundLayer
import com.mapbox.maps.extension.style.layers.generated.CircleLayer
import com.mapbox.maps.extension.style.layers.generated.FillExtrusionLayer
import com.mapbox.maps.extension.style.layers.generated.FillLayer
import com.mapbox.maps.extension.style.layers.generated.LineLayer
import com.mapbox.maps.extension.style.layers.generated.SkyLayer
// import com.mapbox.maps.extension.style.layers.generated.PropertyFactory
// import com.mapbox.maps.extension.style.layers.generated.PropertyValue
import com.mapbox.maps.extension.style.layers.generated.RasterLayer
import com.mapbox.maps.extension.style.layers.generated.SymbolLayer
import com.mapbox.maps.extension.style.layers.generated.HeatmapLayer
import com.mapbox.maps.extension.style.layers.generated.HillshadeLayer
import com.mapbox.maps.extension.style.atmosphere.generated.Atmosphere
import com.mapbox.maps.extension.style.terrain.generated.Terrain
import com.mapbox.maps.extension.style.layers.generated.ModelLayer
// import com.mapbox.maps.extension.style.layers.properties.generated.Visibility
import com.mapbox.maps.extension.style.layers.properties.generated.*
import com.mapbox.maps.extension.style.types.StyleTransition

import com.mapbox.maps.extension.style.light.LightPosition
import com.rnmapbox.rnmbx.utils.DownloadMapImageTask.OnAllImagesLoaded
import com.rnmapbox.rnmbx.utils.Logger

import com.rnmapbox.rnmbx.v11compat.light.*;
import com.rnmapbox.rnmbx.v11compat.stylefactory.*;

import java.util.List;

const val LOG_TAG = "RNMBXStyleFactory"

object RNMBXStyleFactory {
    const val VALUE_KEY = "value";
    const val SHOULD_ADD_IMAGE_KEY = "shouldAddImage";

  <%_ for (const layer of layers) { _%>
    fun <%- setLayerMethodName(layer) -%>(layer: <%- getLayerType(layer, 'android') -%>, style: RNMBXStyle ) {
      val styleKeys = style.allStyleKeys

      if (styleKeys.isEmpty()) {
        return
      }

      for (styleKey in styleKeys) {
        try {
          val styleValue = style.getStyleValueForKey(styleKey)

          when (styleKey) {
            <%_ for (const prop of layer.properties) { _%>
              "<%= prop.name %>" ->
                <%_ if (prop.image) { _%>
                style.addImage(styleValue!!, styleKey, object : OnAllImagesLoaded {
                    override fun onAllImagesLoaded() {
                        try {
                            set<%- pascelCase(prop.name) -%>(layer, styleValue)
                        } catch (exception: RuntimeException) {
                            Logger.e("RNMBX<%- pascelCase(layer.name) %>",String.format("Exception failed during set<%- pascelCase(prop.name) -%>: %s", exception.message))
                        }
                    }
                })
                <%_ } else { _%>
                set<%- pascelCase(prop.name) -%>(layer, styleValue)
                <%_ } _%>
              <%_ if (prop.transition) { _%>
                "<%= prop.name %>Transition" ->
                set<%- pascelCase(prop.name) -%>Transition(layer, styleValue)
              <%_ } _%>
            <%_ } _%>
          }
        } catch (e: MapboxStyleException) {
          Logger.e(LOG_TAG, "Failed to update: $styleKey ${e.message}")
        }
      }
    }
  <%_ } _%>

  <%_ for (const layer of layers) { _%>
  <%_ for (const prop of layer.properties) { _%>
    fun set<%- pascelCase(prop.name) -%>(layer: <%- getLayerType(layer, 'android') -%>, styleValue: RNMBXStyleValue ) {
      <%_ if (prop.name === 'visibility') { _%>
        layer.<%- prop.name %>(<%- pascelCase(prop.name) %>.valueOf(styleValue.getEnumName()));
      <%_ } else if (prop.type === 'resolvedImage') { _%>
      if (styleValue.isExpression()) {
        if (styleValue.isImageStringValue) {
          val value = styleValue.getImageStringValue()
          if (value != null) {
            layer.<%- prop.name %>(value)
          } else {
            Logger.e("RNMBX<%- pascelCase(layer.name) %>", "Image for <%- prop.name %> is null")
          }
        } else {
          val expression = styleValue.getExpression()
          if (expression != null) {
            layer.<%- prop.name %>(expression)
          } else {
            Logger.e("RNMBX<%- pascelCase(layer.name) %>", "Expression for <%- prop.name %> is null")
          }
        }
      } else {
        val value = <%- androidGetConfigTypeKt(androidInputType(prop.type, prop.value), prop) %>
        if (value != null) {
          layer.<%- prop.name %>(value);
        } else {
          Logger.e("RNMBX<%- pascelCase(layer.name) %>", "value for <%- prop.name %> is null")
        }
      }
      <%_ } else { _%>
      if (styleValue.isExpression()) {
        val expression = styleValue.getExpression()
        if (expression != null) {
          layer.<%- prop.name -%>(expression)
        } else {
          Logger.e("RNMBX<%- pascelCase(layer.name) %>", "Expression for <%- prop.name %> is null")
        }
      } else {
        <%_ if (prop.type === 'enum') { _%>
          layer.<%- prop.name -%>(<%- pascelCase(prop.name) %>.valueOf(styleValue.getEnumName()))
        <%_ } else if (prop.name === 'lineGradient' || prop.name === 'heatmapColor' || prop.name === 'skyGradient') { _%>
          layer.<%- prop.name -%>(styleValue.getIntExpression(VALUE_KEY))
        <%_ } else if (prop.name === 'position') { _%>
          layer.<%- prop.name -%>(styleValue.getLightPosition())
        <%_ } else { _%>
          val value = <%- androidGetConfigTypeKt(androidInputType(prop.type, prop.value), prop) %>
          if (value != null) {
            layer.<%- prop.name -%>(value)
          } else {
            Logger.e("RNMBX<%- pascelCase(layer.name) %>", "value for <%- prop.name %> is null")
          }
        <%_ } _%>
      }
      <%_ } _%>
    }

    <%_ if (prop.transition) { %>
    fun set<%- pascelCase(prop.name) -%>Transition(layer: <%- getLayerType(layer, 'android') -%>, styleValue: RNMBXStyleValue) {
      val transition = styleValue.transition
      if (transition != null) {
        layer.<%- prop.name -%>Transition(transition);
      }
    }

    <%_ } _%>
  <%_ } _%>
  <%_ } _%>
}
